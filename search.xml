<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《Python3 面向对象编程》笔记 - 第4章 异常捕获</title>
      <link href="/2020/07/02/python-object-4/"/>
      <url>/2020/07/02/python-object-4/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3-面向对象编程笔记"><a href="#Python3-面向对象编程笔记" class="headerlink" title="Python3 面向对象编程笔记"></a>Python3 面向对象编程笔记</h1><h2 id="第4章-异常捕获"><a href="#第4章-异常捕获" class="headerlink" title="第4章 异常捕获"></a>第4章 异常捕获</h2><p>在本章中将学习异常，特殊的错误对象只有在合理的时候才需要特别处理，将会学习：</p><ol><li>如何找到异常出现的原因</li><li>遇到异常时如何恢复</li><li>如何以不同的方式处理不同的异常</li><li>遇到异常时如何清理</li><li>创建新的异常类型</li><li>在控制流中使用异常语法</li></ol><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p>本质上，异常只是一个对象，有很多不同的异常类，但是他们都继承子同一个异常类BaseException。一些常见的异常：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>ZeroDivisionError                         Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-1</span><span class="token operator">-</span><span class="token number">663c7a933a87</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span>ZeroDivisionError<span class="token punctuation">:</span> division by zeroIn <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>IndexError                                Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-3</span><span class="token operator">-</span><span class="token number">7a094246b9ab</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>IndexError<span class="token punctuation">:</span> list index out of rangeIn <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError                                 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-4</span><span class="token operator">-</span>ffe4e6e220bf<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> lst <span class="token operator">+</span> <span class="token number">2</span>TypeError<span class="token punctuation">:</span> can only concatenate list <span class="token punctuation">(</span><span class="token operator">not</span> <span class="token string">"int"</span><span class="token punctuation">)</span> to listIn <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst<span class="token punctuation">.</span>add<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>AttributeError                            Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-5</span><span class="token operator">-</span><span class="token number">50e4efd52cad</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> lst<span class="token punctuation">.</span>addAttributeError<span class="token punctuation">:</span> <span class="token string">'list'</span> object has no attribute <span class="token string">'add'</span>In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token string">'b'</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d<span class="token punctuation">[</span><span class="token string">'df'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>KeyError                                  Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-7</span><span class="token operator">-</span><span class="token number">4b3d04097323</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> d<span class="token punctuation">[</span><span class="token string">'df'</span><span class="token punctuation">]</span>KeyError<span class="token punctuation">:</span> <span class="token string">'df'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python中大部分的错误类都继承自 Exception（它又继承自 BaseException ）</p><h3 id="抛出一个异常"><a href="#抛出一个异常" class="headerlink" title="抛出一个异常"></a>抛出一个异常</h3><p>当我们的程序比如遇到不合法的输入时，需要抛出异常可以像下面这样，利用 raise</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">EvenOnly</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> integer<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>integer<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>             <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"Only integers can be added"</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> integer <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>             <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Only even numbers can be added"</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>integer<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> e <span class="token operator">=</span> EvenOnly<span class="token punctuation">(</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> e<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"a string"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError                                 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-4</span><span class="token operator">-</span><span class="token number">9cff98c34dae</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> e<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"a string"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-2</span><span class="token operator">-</span><span class="token number">7af07cf6ebb7</span><span class="token operator">></span> <span class="token keyword">in</span> append<span class="token punctuation">(</span>self<span class="token punctuation">,</span> integer<span class="token punctuation">)</span>      <span class="token number">3</span>     <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> integer<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token number">4</span>         <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>integer<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span>             <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"Only integers can be added"</span><span class="token punctuation">)</span>      <span class="token number">6</span>         <span class="token keyword">if</span> integer <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token number">7</span>             <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Only even numbers can be added"</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> Only integers can be addedIn <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> e<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>ValueError                                Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-5</span><span class="token operator">-</span>d9ea7f347873<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> e<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-2</span><span class="token operator">-</span><span class="token number">7af07cf6ebb7</span><span class="token operator">></span> <span class="token keyword">in</span> append<span class="token punctuation">(</span>self<span class="token punctuation">,</span> integer<span class="token punctuation">)</span>      <span class="token number">5</span>             <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"Only integers can be added"</span><span class="token punctuation">)</span>      <span class="token number">6</span>         <span class="token keyword">if</span> integer <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">7</span>             <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Only even numbers can be added"</span><span class="token punctuation">)</span>      <span class="token number">8</span>         super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>integer<span class="token punctuation">)</span>      <span class="token number">9</span>ValueError<span class="token punctuation">:</span> Only even numbers can be added<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常的作用"><a href="#异常的作用" class="headerlink" title="异常的作用"></a>异常的作用</h3><p>当抛出一个异常时，该异常后面所有的代码都将不会执行</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">no_return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am about to raise an exception"</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"This is always raised"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This line will never execute"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">call_exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"call_exception starts here..."</span><span class="token punctuation">)</span>    no_return<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"an exception was raised..."</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    call_exception<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># call_exception starts here...</span><span class="token comment" spellcheck="true"># I am about to raise an exception</span><span class="token comment" spellcheck="true"># Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 15, in &lt; module ></span><span class="token comment" spellcheck="true">#   call_exception()</span><span class="token comment" spellcheck="true">#   File "test.py", line 10, in call_exception</span><span class="token comment" spellcheck="true">#   no_return()</span><span class="token comment" spellcheck="true">#   File "test.py", line 4, in no_return</span><span class="token comment" spellcheck="true">#   raise Exception("This is always raised")</span><span class="token comment" spellcheck="true"># Exception: This is always raised</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>当我们需要处理一个异常时，可以像下面这样：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">funy_division2</span><span class="token punctuation">(</span>anumber<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> anumber <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"13 is an unlucky number"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">100</span> <span class="token operator">/</span> anumber    <span class="token keyword">except</span> <span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">,</span> TypeError<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Enter a number other than zero"</span><span class="token keyword">for</span> val <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print end设定尾部的符号</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Testiong {val}"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>funy_division2<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Testiong 0 Enter a number other than zero</span><span class="token comment" spellcheck="true"># Testiong hello Enter a number other than zero</span><span class="token comment" spellcheck="true"># Testiong 50.0 2.0</span><span class="token comment" spellcheck="true"># Testiong 13 Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 13, in &lt; module ></span><span class="token comment" spellcheck="true">#   print(funy_division2(val))</span><span class="token comment" spellcheck="true">#   File "test.py", line 4, in funy_division2</span><span class="token comment" spellcheck="true">#   raise ValueError("13 is an unlucky number")</span><span class="token comment" spellcheck="true"># ValueError: 13 is an unlucky number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们知道了如何处理异常，但是想要对不同的异常作出不同的反应，或者想要针对某种异常执行某些操作之后传递给上层函数，就像从来没有处理过一样，解决办法分别就是利用<code>except</code>和<code>raise</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">funy_division2</span><span class="token punctuation">(</span>anumber<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> anumber <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"13 is an unlucky number"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">100</span> <span class="token operator">/</span> anumber    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Enter a number other than zero"</span>    <span class="token keyword">except</span> TypeError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Enter a numberical value"</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No, No, not 13!"</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span><span class="token keyword">for</span> val <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print end设定尾部的符号</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Testiong {val}"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>funy_division2<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Testiong 0 Enter a number other than zero</span><span class="token comment" spellcheck="true"># Testiong hello Enter a numberical value</span><span class="token comment" spellcheck="true"># Testiong 50.0 2.0</span><span class="token comment" spellcheck="true"># Testiong 13 No, No, not 13!</span><span class="token comment" spellcheck="true"># Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 18, in &lt; module ></span><span class="token comment" spellcheck="true">#   print(funy_division2(val))</span><span class="token comment" spellcheck="true">#   File "test.py", line 4, in funy_division2</span><span class="token comment" spellcheck="true">#   raise ValueError("13 is an unlucky number")</span><span class="token comment" spellcheck="true"># ValueError: 13 is an unlucky number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果我们在捕获TypeError之前，捕获了Exception，那么就只有捕获Exception的代码执行。</p><p>利用上述的特性，我们可以在处理完一个特殊的异常后，最后统一用Exception捕获其余的异常。</p></blockquote><p>通常和捕获异常使用的还有<code>as</code>，<code>else</code>，<code>finally</code></p><p><code>finally</code>下的代码无论在什么条件下都会执行，如果我们需要在代码执行完成后执行特定的任务将非常有用，一些常见的例子：</p><ol><li>清楚打开的数据库连接</li><li>关闭打开的文件</li><li>向网络发送一次关闭握手</li></ol><blockquote><p><code>finally</code>语句对于我们在try中执行return语句也非常重要，finally中的代码任然会在返回值之前执行</p></blockquote><p>比如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10/0'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally exec'</span><span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0</span><span class="token comment" spellcheck="true"># finally exec</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常的层级"><a href="#异常的层级" class="headerlink" title="异常的层级"></a>异常的层级</h3><p>大部分的异常类都继承自Exception，但是除了下面这两个异常类：</p><ol><li>SystemExit，在程序自然退出时抛出，通常是在代码中调用了sys.exit函数，设计这个异常的目的是，在程序最终退出之前完成清理工作</li><li>KeyboardInterrupt，常见于命令行程序，通常是ctrl + c</li></ol><p>异常之间的层级关系：</p><p><img src="./%E7%AC%AC4%E7%AB%A0-%E5%BC%82%E5%B8%B8%E5%B1%82%E7%BA%A7.png" alt="第4章-异常层级"></p><p>当我们用except:从句而不添加任何类型的异常时，将会捕获所有BaseException的子类，也就是会捕获所有异常</p><h3 id="定义我们的异常"><a href="#定义我们的异常" class="headerlink" title="定义我们的异常"></a>定义我们的异常</h3><p>异常类的名字通常用于说明发生了什么错误，而且可以先初始化函数中传入任何参数来提供额外的信息</p><p>通常我们自定义的异常类继承Exception，而不是BaseException，因为BaseException无法被except Exception从句捕获</p><p><code>Exception.__init__</code>方法设计成接受任意参数并将它们作为一个元组保存在一个名为args的属性当中，这使得我们可以更容易的定义新的异常，而不需要重写<code>__init__</code>方法</p><p>比如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">InvalidWithdrawal</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> balance<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>f<span class="token string">"account doesn't have {amount}"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> balance        self<span class="token punctuation">.</span>amount <span class="token operator">=</span> amount    <span class="token keyword">def</span> <span class="token function">overage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>amount <span class="token operator">-</span> self<span class="token punctuation">.</span>balance<span class="token keyword">print</span><span class="token punctuation">(</span>InvalidWithdrawal<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ("account doesn't have 20",)</span><span class="token keyword">raise</span> InvalidWithdrawal<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 13, in &lt; module ></span><span class="token comment" spellcheck="true">#   raise InvalidWithdrawal(25, 20)</span><span class="token comment" spellcheck="true"># __main__.InvalidWithdrawal: account doesn't have 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们需要处理异常时可以这样：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">InvalidWithdrawal</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> balance<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>f<span class="token string">"account doesn't have {amount}"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> balance        self<span class="token punctuation">.</span>amount <span class="token operator">=</span> amount    <span class="token keyword">def</span> <span class="token function">overage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>amount <span class="token operator">-</span> self<span class="token punctuation">.</span>balance<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> InvalidWithdrawal<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">except</span> InvalidWithdrawal <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"catch err {e.overage()}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以像对待其他对象一样对待异常类，可以为他添加属性和方法</p><p>使用自定义异常的真正优势在于创建供他人使用的框架、库或者API上</p><p>Python程序员倾向于追随“请求谅解，而不是许可”的原则，也就是说，他们先执行代码，然后解决错误。认为没有必要去花费cpu资源去检查一些很少才会出现的情况。比如下面的两段代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">divide_with_exception</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        number <span class="token operator">/</span> divisor    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can't divide by zero"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">divide_with_if</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> divisor <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can't divide by zero"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        number <span class="token operator">/</span> divisor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两段代码都是可以执行的，但是Python程序员应该更倾向于写第一种方式的代码</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>password <span class="token operator">=</span> self<span class="token punctuation">.</span>_encrypt_pw<span class="token punctuation">(</span>password<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>is_logged_in <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">_encrypt_pw</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        hash_string <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>username <span class="token operator">+</span> password<span class="token punctuation">)</span>        hash_string <span class="token operator">=</span> hash_string<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>hash_string<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        encrypted <span class="token operator">=</span> self<span class="token punctuation">.</span>_encrypt_pw<span class="token punctuation">(</span>password<span class="token punctuation">)</span>        <span class="token keyword">return</span> encrypted <span class="token operator">==</span> self<span class="token punctuation">.</span>password<span class="token keyword">class</span> <span class="token class-name">AuthException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> user<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>username<span class="token punctuation">,</span> user<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token keyword">class</span> <span class="token class-name">UsernameAlreadyExists</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">PasswordTooShort</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Authenticator</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">add_user</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> username <span class="token keyword">in</span> self<span class="token punctuation">.</span>users<span class="token punctuation">:</span>            <span class="token keyword">raise</span> UsernameAlreadyExists<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> PasswordTooShort<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>users<span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            user <span class="token operator">=</span> self<span class="token punctuation">.</span>users<span class="token punctuation">[</span>username<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> InvalidUsername<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> InvalidPassword<span class="token punctuation">(</span>username<span class="token punctuation">,</span> user<span class="token punctuation">)</span>        user<span class="token punctuation">.</span>is_logged_in <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">is_logged_in</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> username <span class="token keyword">in</span> self<span class="token punctuation">.</span>users<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>users<span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">.</span>is_logged_in        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">class</span> <span class="token class-name">InvalidUsername</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">InvalidPassword</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Authorizor</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> authenticator<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>authenticator <span class="token operator">=</span> authenticator        self<span class="token punctuation">.</span>permissions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">add_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> perm_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            perm_set <span class="token operator">=</span> self<span class="token punctuation">.</span>permissions<span class="token punctuation">[</span>perm_name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>permissions<span class="token punctuation">[</span>perm_name<span class="token punctuation">]</span> <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> PermissionError<span class="token punctuation">(</span><span class="token string">"Permission Exists"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">permit_user</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> perm_name<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            perm_set <span class="token operator">=</span> self<span class="token punctuation">.</span>permissions<span class="token punctuation">[</span>perm_name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> PermissionError<span class="token punctuation">(</span><span class="token string">"Permission does not exist"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> username <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>authenticator<span class="token punctuation">.</span>users<span class="token punctuation">:</span>                <span class="token keyword">raise</span> InvalidUsername<span class="token punctuation">(</span>username<span class="token punctuation">)</span>            perm_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> perm_name<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>authenticator<span class="token punctuation">.</span>is_logged_in<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> NotLoggedInError<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            perm_set <span class="token operator">=</span> self<span class="token punctuation">.</span>permissions<span class="token punctuation">[</span>perm_name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> PermissionError<span class="token punctuation">(</span><span class="token string">"Permission does not exist"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> username <span class="token operator">not</span> <span class="token keyword">in</span> perm_set<span class="token punctuation">:</span>                <span class="token keyword">raise</span> NotPermittedError<span class="token punctuation">(</span>username<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">PermissionError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">NotLoggedInError</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">NotPermittedError</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>authenticator <span class="token operator">=</span> Authenticator<span class="token punctuation">(</span><span class="token punctuation">)</span>authorizor <span class="token operator">=</span> Authorizor<span class="token punctuation">(</span>authenticator<span class="token punctuation">)</span>authenticator<span class="token punctuation">.</span>add_user<span class="token punctuation">(</span><span class="token string">"joe"</span><span class="token punctuation">,</span> <span class="token string">"joepassword"</span><span class="token punctuation">)</span>authorizor<span class="token punctuation">.</span>add_permission<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">)</span>authorizor<span class="token punctuation">.</span>check_permission<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 129, in &lt;module></span><span class="token comment" spellcheck="true">#     authorizor.check_permission("paint", "joe")</span><span class="token comment" spellcheck="true">#   File "test.py", line 101, in check_permission</span><span class="token comment" spellcheck="true">#     raise NotLoggedInError(username)</span><span class="token comment" spellcheck="true"># __main__.NotLoggedInError: ('joe', None)</span><span class="token keyword">print</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span>is_logged_in<span class="token punctuation">(</span><span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token string">"joe"</span><span class="token punctuation">,</span> <span class="token string">"joepassword"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>authorizor<span class="token punctuation">.</span>check_permission<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 145, in &lt;module></span><span class="token comment" spellcheck="true">#     authorizor.check_permission("paint", "joe")</span><span class="token comment" spellcheck="true">#   File "test.py", line 108, in check_permission</span><span class="token comment" spellcheck="true">#     raise NotPermittedError(username)</span><span class="token comment" spellcheck="true"># __main__.NotPermittedError: ('joe', None)</span>authorizor<span class="token punctuation">.</span>check_permission<span class="token punctuation">(</span><span class="token string">"mix"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 103, in check_permission</span><span class="token comment" spellcheck="true">#     perm_set = self.permissions[perm_name]</span><span class="token comment" spellcheck="true"># KeyError: 'mix'</span><span class="token comment" spellcheck="true"># During handling of the above exception, another exception occurred:</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 153, in &lt;module></span><span class="token comment" spellcheck="true">#     authorizor.check_permission("mix", "joe")</span><span class="token comment" spellcheck="true">#   File "test.py", line 105, in check_permission</span><span class="token comment" spellcheck="true">#     raise PermissionError("Permission does not exist")</span><span class="token comment" spellcheck="true"># __main__.PermissionError: Permission does not exist</span>authorizor<span class="token punctuation">.</span>permit_user<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>authorizor<span class="token punctuation">.</span>check_permission<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Git tags Explained》翻译</title>
      <link href="/2020/07/01/fanyi-git-tag/"/>
      <url>/2020/07/01/fanyi-git-tag/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mohitkhare.me/blog/git-tags-explained/" target="_blank" rel="noopener">原文链接</a></p><h2 id="Git-tags-简明教程"><a href="#Git-tags-简明教程" class="headerlink" title="Git tags 简明教程"></a>Git tags 简明教程</h2><p><img src="./git-tags.png" alt="git-tags"></p><p><code>Git</code>对于开发者来说是个非常必要的工具，它能非常方便的维护多人共享的代码库</p><p><code>Git-scm</code>简单的定义：</p><blockquote><p><code>Git</code>是一个开源的分布式版本控制系统，设计用来快速有效的管理各种小项目和大项目</p></blockquote><p>如果你还不知道<code>Git</code>，我推荐你首先学习一些基础知识</p><ul><li><a href="https://try.github.io/" target="_blank" rel="noopener">https://try.github.io/</a></li><li><a href="https://www.vogella.com/tutorials/Git/article.html" target="_blank" rel="noopener">https://www.vogella.com/tutorials/Git/article.html</a></li></ul><p>在这篇文章中，我们将学习到什么是<code>git tag</code>，为什么要使用它和什么时候以及怎么使用它。这因该足够让你在你的项目使用它了</p><p>让我们开始吧</p><h3 id="什么是git-tag"><a href="#什么是git-tag" class="headerlink" title="什么是git tag"></a>什么是<code>git tag</code></h3><p><code>git tag</code>实际上是指向了Git history 中的一个commit，它可以标记git history中某个的commit，以后可以方便的找到它</p><p>你可以将 tag 看做是一个不变的分支</p><p>Tag 代表某个特定分支在一定时刻的版本。所以，tag 本质上是开发者在程序中做的一个标记</p><h3 id="为什么和什么时候使用git-tag"><a href="#为什么和什么时候使用git-tag" class="headerlink" title="为什么和什么时候使用git tag"></a>为什么和什么时候使用<code>git tag</code></h3><p>你肯定看到过<code>v1.0.0</code>这样的标记。它表示一个产品的版本号。通常，当产品有重大的更新并且需要推送给用户时，就会创建一个tag。</p><p>tag 通常用户标记一个里程碑，例如可以发布给用户或者企业的新功能或一些bug修复</p><p>你肯定不希望每次修复Bug都要推送给客户，Tag 可以确保用户使用的是某个特定时刻的版本，而不需要每次代码的新提交都推送给客户。</p><h3 id="怎么使用git-tag"><a href="#怎么使用git-tag" class="headerlink" title="怎么使用git tag"></a>怎么使用<code>git tag</code></h3><p>现在你已经知道了tag的应用场景，下面就开始看看怎么使用它</p><h4 id="创建tag"><a href="#创建tag" class="headerlink" title="创建tag"></a>创建<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>// Eg. <span class="token function">git</span> tag v1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这条命令会将最新的commit打上tag，<code>tag_name</code>就是你要起得tag 名字，通常是类似v1.0.1这种。当然你也可以命名任何你喜欢的名字</p><p>通常 tag name 是：</p><pre class="line-numbers language-bash"><code class="language-bash">v<span class="token operator">&lt;</span>major<span class="token operator">></span>.<span class="token operator">&lt;</span>minor<span class="token operator">></span>.<span class="token operator">&lt;</span>patch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>major:重大修改</li><li>minor: 版本与先前版本兼容</li><li>patch: bug 修复</li></ul><p>创建了tag之后，可以push到远端代码库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以为tag添加描述信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag -a <span class="token operator">&lt;</span>tag_name<span class="token operator">></span> -m <span class="token string">"message"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-a</code>是什么意思呢？下面来看看</p><h4 id="tag类型"><a href="#tag类型" class="headerlink" title="tag类型"></a><code>tag</code>类型</h4><p>一共有两种<code>tag</code>类型：</p><ul><li>附注标签（Annonated）</li><li>轻量标签（Lightweight）</li></ul><h5 id="附注标签"><a href="#附注标签" class="headerlink" title="附注标签"></a>附注标签</h5><p>附注标签存储一个额外的信息，比如作者、发行说明、tag 信息存储为Git仓库中完整的数据，这些数据对于一个公开的项目是非常重要的</p><p><code>-a</code>表示该tag是附注标签</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag -a v1.0.1 -m <span class="token string">"First release"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="轻量标签"><a href="#轻量标签" class="headerlink" title="轻量标签"></a>轻量标签</h5><p>轻量标签时最简单的打tag的方式，它只存储tag name和关联的commit的hash值，不包含额外的信息，就类似于一个书签</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag v2.1-lw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>lw</code>表示轻量级标签，在tag name中加<code>lw</code>是为了更好的可读性</p><h4 id="为一个特殊的commit打tag"><a href="#为一个特殊的commit打tag" class="headerlink" title="为一个特殊的commit打tag"></a>为一个特殊的commit打tag</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token operator">&lt;</span>tag_name<span class="token operator">></span> <span class="token operator">&lt;</span>commit_sha<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令可以让你为一些老的commit打tag</p><h4 id="查看所有tag"><a href="#查看所有tag" class="headerlink" title="查看所有tag"></a>查看所有<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令将会展示所有存在的tag</p><p>输出可能是这样：</p><pre class="line-numbers language-bash"><code class="language-bash">1.0.01.0.11.0.21.0.32.0.02.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以使用<code>-l</code>或者<code>--list</code>选项利用正则表达式进行过滤</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag -l <span class="token string">"1.0*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash"><code class="language-bash">1.0.01.0.11.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="查看tag信息"><a href="#查看tag信息" class="headerlink" title="查看tag信息"></a>查看<code>tag</code>信息</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> show <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>// Eg. <span class="token function">git</span> show v1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将会展示作者、tag 信息、commit信息等其他信息</p><h4 id="删除tag"><a href="#删除tag" class="headerlink" title="删除tag"></a>删除<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag -d <span class="token operator">&lt;</span>tag_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="推送tag"><a href="#推送tag" class="headerlink" title="推送tag"></a>推送<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push origin <span class="token operator">&lt;</span>branch<span class="token operator">></span> --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将会把本地<code>tag</code>推送到远程仓库</p><h4 id="拉取tag"><a href="#拉取tag" class="headerlink" title="拉取tag"></a>拉取<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> fetch --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将会把远程仓库<code>tag</code>拉取到本地</p><h4 id="切换tag"><a href="#切换tag" class="headerlink" title="切换tag"></a>切换<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>// Eg. <span class="token function">git</span> checkout v1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你可以用这条命名，将代码回退到打某个<code>tag</code>的时候</p><p>你现在已经掌握了<code>Git tag</code>，开始在你的项目中应用起来吧😁</p><p>更多学习资源：</p><ul><li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">Excellent book to learn git</a></li><li><a href="https://softwareengineering.stackexchange.com/questions/165725/git-branching-and-tagging-best-practices" target="_blank" rel="noopener">Best git tag practices</a></li><li><a href="https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-tag" target="_blank" rel="noopener">On tagging by atlassian</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文章翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Python3 面向对象编程》笔记 - 第3章 对象相似时</title>
      <link href="/2020/06/29/python-object-3/"/>
      <url>/2020/06/29/python-object-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3-面向对象编程笔记"><a href="#Python3-面向对象编程笔记" class="headerlink" title="Python3 面向对象编程笔记"></a>Python3 面向对象编程笔记</h1><h2 id="第3章-对象相似时"><a href="#第3章-对象相似时" class="headerlink" title="第3章 对象相似时"></a>第3章 对象相似时</h2><p>在编程的世界中，重复的代码被认为是邪恶的。这一章主要学习继承。既将共有的逻辑抽象到超类并在子类中控制具体的细节。这一章主要学习：</p><ol><li>基本的基础</li><li>从内置类型基础</li><li>多重基础</li><li>多态与鸭子类型</li></ol><h3 id="基本的基础"><a href="#基本的基础" class="headerlink" title="基本的基础"></a>基本的基础</h3><p>严格来说，在Python中，我们都是用到了基础。所有的Python类都可以看做是继承了<code>object</code>类的子类</p><p>我们声明一个类时可以显示的声明基础的类是什么，如果隐藏了父类，那么默认就是继承的<code>object</code>类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyTest</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">MyTest2</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两种其实都是一样的。</p><p>在实践中使用继承关系，最简单的就是为已经存在的类添加功能，先写一个实例</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span>test1 <span class="token operator">=</span> Contact<span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span> <span class="token string">"name@qq.com"</span><span class="token punctuation">)</span>test2 <span class="token operator">=</span> Contact<span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"name2@qq.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span>all_contacts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [ &lt; __main__.Contact object at 0x103b3afd0 > , &lt; __main__.Contact object at 0x103b42048 > ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中有个概念<strong>类变量</strong>，代码中的<code>all_contacts</code>就是类变量，他可以被该类的所有实例共享。在子类中可以通过<code>self.all_contacts</code>获取该类变量，如果在这一对象中找不到该变量名，将会从类中找到。如果你用了<code>self.all_contacts</code>设定了这一变量。实际上只是设定了该对象的这以变量，并不会影响类变量，还是可以通过<code>Contacts.all_contacts</code>访问到</p><p>上面的例子是一个联系人的类，其中有名字和邮箱。我们需要从这些联系人中下订单，需要新加一个类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Supplier</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里会自动调用父类的__init__方法</span>    <span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>            f<span class="token string">"If this were a real system we would send {order} to {self.name}"</span><span class="token punctuation">)</span>c <span class="token operator">=</span> Contact<span class="token punctuation">(</span><span class="token string">"Some Body"</span><span class="token punctuation">,</span> <span class="token string">"somebody@example.net"</span><span class="token punctuation">)</span>s <span class="token operator">=</span> Supplier<span class="token punctuation">(</span><span class="token string">"sup Plier"</span><span class="token punctuation">,</span> <span class="token string">"supplier@example.net"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>all_contacts<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [&lt;__main__.Contact object at 0x1073f9f60>, &lt;__main__.Supplier object at 0x1073f9fd0>]</span><span class="token comment" spellcheck="true"># c.order("I need pliers") 会报错</span>s<span class="token punctuation">.</span>order<span class="token punctuation">(</span><span class="token string">"I need pliers"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># If this were a real system we would send I need pliers to sup Plier</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>Supplier</code>能够做<code>Contact</code>能做的所有事（加入<code>all_contacts</code>），而且还有自己的方法。</p><h3 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h3><p>继承关系中有一种有趣的应用就是为内置类型添加新的功能，比如前面的例子中保存了联系人，如果想查找联系人就可以添加一个新的类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ContactList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        matching_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> contact <span class="token keyword">in</span> self<span class="token punctuation">:</span>            <span class="token keyword">if</span> name <span class="token keyword">in</span> contact<span class="token punctuation">.</span>name<span class="token punctuation">:</span>                matching_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>contact<span class="token punctuation">)</span>        <span class="token keyword">return</span> matching_contacts<span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> ContactList<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Supplier</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里会自动调用父类的__init__方法</span>    <span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>            f<span class="token string">"If this were a real system we would send {order} to {self.name}"</span><span class="token punctuation">)</span>c <span class="token operator">=</span> Contact<span class="token punctuation">(</span><span class="token string">"Some Body"</span><span class="token punctuation">,</span> <span class="token string">"somebody@example.net"</span><span class="token punctuation">)</span>s <span class="token operator">=</span> Supplier<span class="token punctuation">(</span><span class="token string">"sup Plier"</span><span class="token punctuation">,</span> <span class="token string">"supplier@example.net"</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Supplier<span class="token punctuation">(</span><span class="token string">"sup Body"</span><span class="token punctuation">,</span> <span class="token string">"supplier2@example.net"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>contact<span class="token punctuation">.</span>name <span class="token keyword">for</span> contact <span class="token keyword">in</span> Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"Body"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['Some Body', 'sup Body']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大多数的内置对象都可以通过这种方式进行扩展。通常会扩展的内置类型有：<code>object</code>、<code>list</code>、<code>set</code>、<code>dict</code>、<code>file</code>、<code>str</code></p><p>比如扩展<code>dict</code>类型</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestDict</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longest_key</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        longest <span class="token operator">=</span> None        <span class="token keyword">for</span> key <span class="token keyword">in</span> self<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> longest <span class="token operator">or</span> len<span class="token punctuation">(</span>longest<span class="token punctuation">)</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>                longest <span class="token operator">=</span> key        <span class="token keyword">return</span> longestlongest_keys <span class="token operator">=</span> TestDict<span class="token punctuation">(</span><span class="token punctuation">)</span>longest_keys<span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>longest_keys<span class="token punctuation">[</span><span class="token string">"hello world"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>longest_keys<span class="token punctuation">[</span><span class="token string">"xx"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>longest_keys<span class="token punctuation">.</span>longest_key<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># hello world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重写和super"><a href="#重写和super" class="headerlink" title="重写和super"></a>重写和super</h3><p>继承关系很适合向已经存在的类中添加新的行为，如果需要修改某些行为，就要重写父类的某些方法。当一个子类重写了父类的一个方法，在调用该方法时会调用子类的方法。而不是父类的方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，我们重写了<code>__init__</code>方法。但是会有重复的代码，而且我们还必须手动加入<code>Contact.all_contacts</code>中。</p><blockquote><p>任何方法都可以被重写</p></blockquote><p>我们真正需要做的是执行Contact类上的<code>__init__</code>方法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们调用了<code>super()</code>函数获取父类对象的实例，然后调用他的<code>__init__</code>方法</p><blockquote><p>可以在任何方法内调用<code>super()</code>获取父类对象实例</p></blockquote><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>多重继承：继承自多个父类的子类可以获取所有父类的功能。</p><p>多重继承最简单的形式被称为混入（mixin），关于混入可以参考<a href="http://30daydo.com/article/480" target="_blank" rel="noopener">http://30daydo.com/article/480</a></p><p>其中利用混入实现多重继承比较重要的就是：</p><ol><li>首先它表示一个功能，而不是一个对象或者物品</li><li>必须职责单一，如果有多个功能，就要写多个minin类</li><li>不依赖于子类的实现</li><li>即使子类没有继承该类，也可以正常运行。只不过没有该方法</li></ol><p>比如在联系人当中，我们要给某个人发邮件，发邮件这个功能可以利用混入的方式实现多重继承</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MailSender</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">send_mail</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"send email to {self.email}"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">EmailableContact</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> MailSender<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>e <span class="token operator">=</span> EmailableContact<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"test@example.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>all_contacts<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [&lt;__main__.EmailableContact object at 0x109cdde48>]</span>e<span class="token punctuation">.</span>send_mail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># send email to test@example.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多重继承在混合不同类的方法时不会有问题，但是当调用父类的方法时就会变得很混乱</p><p>为了讨论更复杂的情况，我们在<code>Friend</code>类中加入家庭住址。应该更好的方法是利用组合的方式，创建一个<code>Address</code>类，在<code>Friend</code>中的地址指向<code>Address</code>类的实例。但是在这里采用继承的方式。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AddressHolder</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>street <span class="token operator">=</span> street        self<span class="token punctuation">.</span>city <span class="token operator">=</span> city        self<span class="token punctuation">.</span>state <span class="token operator">=</span> state        self<span class="token punctuation">.</span>code <span class="token operator">=</span> code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="钻石型继承问题"><a href="#钻石型继承问题" class="headerlink" title="钻石型继承问题"></a>钻石型继承问题</h3><p>首先可以用多重继承的方式为已有的<code>Friend</code>类添加父类，但是现在有了两个父类，需要初始化两个父类。先从一个简单的方法开始</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AddressHolder</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>street <span class="token operator">=</span> street        self<span class="token punctuation">.</span>city <span class="token operator">=</span> city        self<span class="token punctuation">.</span>state <span class="token operator">=</span> state        self<span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token keyword">class</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> AddressHolder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        Contact<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">)</span>        AddressHolder<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> code<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子是可以正常运行的，但是会有两个问题</p><ol><li>如果忘记了初始化父类，就会出现问题</li><li>可能会导致超类被多次调用</li></ol><p>下面是整个初始化的流程：</p><img src="./钻石继承问题1.png"><p>从图中可以看出分别在初始化<code>Contact</code>和<code>AddressHolder</code>时都初始化了<code>object</code>，既<code>object</code>被初始化了两次。</p><p>为了更加清楚的阐述这个问题，让我们看另外一个虚构的例子。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token punctuation">:</span>    num_base_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Base Class"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_base_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">LeftSubclass</span><span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_left_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        BaseClass<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Left Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_left_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">RightSubclass</span><span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_right_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        BaseClass<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Right Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_right_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">Subclass</span><span class="token punctuation">(</span>LeftSubclass<span class="token punctuation">,</span> RightSubclass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_sub_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        LeftSubclass<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        RightSubclass<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_sub_call <span class="token operator">+=</span> <span class="token number">1</span>s <span class="token operator">=</span> Subclass<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Calling method on Base Class</span><span class="token comment" spellcheck="true"># Calling method on Left Subclass</span><span class="token comment" spellcheck="true"># Calling method on Base Class</span><span class="token comment" spellcheck="true"># Calling method on Right Subclass</span><span class="token comment" spellcheck="true"># Calling method on Subclass</span><span class="token keyword">print</span><span class="token punctuation">(</span>f"num_sub_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_sub_call<span class="token punctuation">}</span>\nnum_left_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_left_call<span class="token punctuation">}</span>\n\num_right_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_right_call<span class="token punctuation">}</span>\nnum_base_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_base_call<span class="token punctuation">}</span>\n"<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># num_sub_call: 1</span><span class="token comment" spellcheck="true"># num_left_call: 1</span><span class="token comment" spellcheck="true"># num_right_call: 1</span><span class="token comment" spellcheck="true"># num_base_call: 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是整个流程图：</p><p><img src="./%E9%92%BB%E7%9F%B3%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%982.png" alt="钻石继承问题2"></p><p>整个调用流程看起来像是钻石，因此也叫做钻石继承问题</p><p>从输出可以看到<code>BaseClass</code>的<code>call_me</code>方法被调用了两次。关于多重继承需要记住，我们只想调用类层级中的“下一个”方法，而不是“父类”方法。实际上下一个方法可能不属于该类的父类或者更早的祖先。super关键字再次拯救了我们</p><p>修改后的代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token punctuation">:</span>    num_base_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Base Class"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_base_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">LeftSubclass</span><span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_left_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Left Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_left_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">RightSubclass</span><span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_right_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Right Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_right_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">Subclass</span><span class="token punctuation">(</span>LeftSubclass<span class="token punctuation">,</span> RightSubclass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_sub_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_sub_call <span class="token operator">+=</span> <span class="token number">1</span>s <span class="token operator">=</span> Subclass<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Calling method on Base Class</span><span class="token comment" spellcheck="true"># Calling method on Right Subclass</span><span class="token comment" spellcheck="true"># Calling method on Left Subclass</span><span class="token comment" spellcheck="true"># Calling method on Subclass</span><span class="token keyword">print</span><span class="token punctuation">(</span>f"num_sub_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_sub_call<span class="token punctuation">}</span>\nnum_left_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_left_call<span class="token punctuation">}</span>\n\num_right_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_right_call<span class="token punctuation">}</span>\nnum_base_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_base_call<span class="token punctuation">}</span>\n"<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># num_sub_call: 1</span><span class="token comment" spellcheck="true"># num_left_call: 1</span><span class="token comment" spellcheck="true"># num_right_call: 1</span><span class="token comment" spellcheck="true"># num_base_call: 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出结果可以看到<code>BaseClass</code>的<code>call_me</code>方法只被调用了一次。</p><p>从流程中看到，<code>Subclass</code>的<code>call_me</code>方法调用<code>super().calll_me()</code>，指向了<code>LeftSubclass.call_me()</code>，然后<code>LeftSubclass.call_me()</code>调用了<code>super().call_me()</code>，但是这里<code>super()</code>指向的是<code>RightSubclass.call_me()</code>，而不是他父类<code>BaseClass.call_me()</code>。然后<code>RightSubclass</code>在调用<code>BaseClass</code></p><p>特别注意的就是<code>LeftSubclass</code>中的<code>super()</code>指向的并不是他的父类，这样就实现了调用下一个方法而不是父类的方法。通过使用<code>super</code>可以确保类层级中的每一个方法都被调用一次</p><p>从上面的例子可以看到<code>super</code>的两个作用：</p><ol><li>调用父类方法，通常用来初始化父类</li><li>解决钻石继承问题，防止祖先类方法被调用多次</li></ol><h3 id="不同集合的参数"><a href="#不同集合的参数" class="headerlink" title="不同集合的参数"></a>不同集合的参数</h3><p>之前遇到继承的例子里，父类都是不需要参数初始化的。如果在多重继承下有这样的场景，每个父类都需要不同的参数初始化，那该怎样做呢？可惜的是，解决这个问题的唯一办法就是从头开始计划，我们不得不将基类的参数列表设计成接受任意关键字参数，而且这些参数对于所有子类的实现都是可选的。最后，我们必须确保能够接受不需要的参数并将其传递给自己的<code>super</code>方法，以防他们在后续继承顺序的方法中会用到</p><p>修改后的代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token keyword">class</span> <span class="token class-name">AddressHolder</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> street<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> state<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>street <span class="token operator">=</span> street        self<span class="token punctuation">.</span>city <span class="token operator">=</span> city        self<span class="token punctuation">.</span>state <span class="token operator">=</span> state        self<span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token keyword">class</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> AddressHolder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> phone<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能够初始化不同参数的父类了</p><p>但是，如果子类和父类都需要同一个参数呢？比如Friend和Contact都需要phone参数呢？总共有下面几种方法：</p><ol><li>不要将phone作为关键字参数，而是放在<code>**kwargs</code>中，需要改参数的可以通过<code>kwargs[&#39;phone&#39;]</code>获取</li><li>将phone作为关键字参数，在Friend类中再将phone加入到<code>kwargs</code>中，<code>kwargs[&#39;phone&#39;]=value</code></li><li>将phone作为关键字参数，在Friend类中再将phone加入到<code>kwargs</code>中，使用<code>update</code>方法，该方法适用于更新多个字段到<code>kwargs</code>中</li><li>将phone作为关键字参数，在Friend类中<code>super(phone=phone,**kwargs)</code>这种方式传递给父类</li></ol><p>建议：在实际中尽量多用组合的方式，少用多重继承</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态：由于所用子类不同而产生不同的行为，而不需要明确知道用的是哪个子类。</p><p>在很多情况下，多态是使用继承关系最重要的一个原因之一</p><p>举个例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Animal is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dog is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Cat is running...'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_twice</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>run_twice<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Animal is running...</span>run_twice<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Dog is running...</span>run_twice<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Cat is running...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>run_twice</code>函数只管调用传递进来的<code>run</code>方法，而不关心具体是Animal的哪个子类，因为所有的子类都会有<code>run</code>方法，最基本的就是Animal的<code>run</code>方法。可以随便为Animal增加子类，但是<code>run_twice</code>不用改动。这就是多态真正的威力：调用方只管调用，不管细节</p><p>在静态语言中，<code>run_twice</code>的参数必须是Animal或者他的子类，但是在python中有鸭子类型，既：一个对象如果“看起来像是鸭子，走路像鸭子”，那么他就是鸭子。所以<code>run_twice</code>可以接受不是Animal子类的类，只要他有<code>run</code>方法即可。例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Animal is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dog is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Cat is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Test is running..."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_twice</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>run_twice<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Animal is running...</span>run_twice<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Dog is running...</span>run_twice<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Cat is running...</span>run_twice<span class="token punctuation">(</span>Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Test is running...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>run_twice(Test())</code>也是可以正常调用的。</p><p>鸭子类型主要的一个作用：不需要提供所需对象的完整接口，而只需满足实际被访问的接口。</p><p>可能在有些场景下，会调用一些官方库的方法，但他对参数是有要求的，比如必须实现某个方法等。利用鸭子类型，我们就可以只实现参数要求的那个方法，而不必实现参数对象所有的方法才去调用这个官方库方法。</p><h3 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h3><p>虽然鸭子类型很有用，但是要想事先知道这个类是否满足全部的需要并不是一件容易的事。因此，Python引入了抽象基类的概念，抽象基类（Abstract base class），或者是ABCs，定义一组必须被类的鸭子实例实现的方法和属性</p><h4 id="使用抽象基类"><a href="#使用抽象基类" class="headerlink" title="使用抽象基类"></a>使用抽象基类</h4><p>先来看一个例子：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">from</span> rich <span class="token keyword">import</span> <span class="token keyword">print</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">from</span> collections <span class="token keyword">import</span> ContainerIn <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> help<span class="token punctuation">(</span>Container<span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>__abstractmethods__<span class="token punctuation">)</span>frozenset<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'__contains__'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Container类只需要实现一个抽象方法<code>__contains__</code>。</p><p><code>List</code>,<code>str</code>和<code>dict</code>都实现了这个方法，用以表明给的值是否存在于这一数据结构中，我们自定义一个类：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Container<span class="token keyword">class</span> <span class="token class-name">OddContainer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__contains__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token operator">not</span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">TestContainer</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>OddContainer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>OddContainer<span class="token punctuation">,</span> Container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>TestContainer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Flase</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>TestContainer<span class="token punctuation">,</span> Container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于Container类规定了鸭子类型实例必须要实现<code>__contains__</code>方法，所以OddContainer可以被认为是Container的子类，而TestContainer不可以</p><p>这就是鸭子类型币传统的多态更棒的原因，我们可以不用继承关系（或者更坏的情况）就能创建一个“是一个”的关系。</p><p>有趣的是Container的子类都可以使用in关键字。实际上in只是<code>__contains__</code>的语法糖。</p><h4 id="创建抽象基类"><a href="#创建抽象基类" class="headerlink" title="创建抽象基类"></a>创建抽象基类</h4><p>Container类其实就是一个抽象基类，下面自己创建一个抽象基类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> abc<span class="token keyword">class</span> <span class="token class-name">MediaLoader</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>abc<span class="token punctuation">.</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 子类必须实现该方法 </span>    @abc<span class="token punctuation">.</span>abstractclassmethod    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># * 子类必须提供这一属性</span>    @abc<span class="token punctuation">.</span>abstractproperty    <span class="token keyword">def</span> <span class="token function">ext</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># * 该方法可用类直接调用，而不必用到实例</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">__subclasshook__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"MediaLoader __subclasshook"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> cls <span class="token keyword">is</span> MediaLoader<span class="token punctuation">:</span>            attrs <span class="token operator">=</span> set<span class="token punctuation">(</span>dir<span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> set<span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__abstractmethods__<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> attrs<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">class</span> <span class="token class-name">Wav</span><span class="token punctuation">(</span>MediaLoader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Ogg</span><span class="token punctuation">(</span>MediaLoader<span class="token punctuation">)</span><span class="token punctuation">:</span>    ext <span class="token operator">=</span> <span class="token string">".ogg"</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">TestABCs</span><span class="token punctuation">:</span>    ext <span class="token operator">=</span> <span class="token string">".testABCs"</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># x = Wav()</span><span class="token comment" spellcheck="true"># Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 26, in &lt; module ></span><span class="token comment" spellcheck="true">#   x = Wav()</span><span class="token comment" spellcheck="true"># TypeError: Can't instantiate abstract class Wav with abstract methods ext, play</span>o <span class="token operator">=</span> Ogg<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>ext<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># .ogg</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>Ogg<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MediaLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># MediaLoader __subclasshook</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>TestABCs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MediaLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># MediaLoader __subclasshook</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>Ogg<span class="token punctuation">,</span> MediaLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>TestABCs<span class="token punctuation">,</span> MediaLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果继承了抽象基类，但是不实现规定的方法和属性，则会报错</p><h3 id="案例学习"><a href="#案例学习" class="headerlink" title="案例学习"></a>案例学习</h3><p>下面将简单实现一个房屋租赁系统</p><p>继承关系：</p><p><img src="./%E7%AC%AC3%E7%AB%A0-%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0.png" alt="第3章-案例学习"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_valid_input</span><span class="token punctuation">(</span>input_string<span class="token punctuation">,</span> valid_options<span class="token punctuation">)</span><span class="token punctuation">:</span>    input_string <span class="token operator">=</span> f<span class="token string">"{input_string} {', '.join(valid_options)}\n"</span>    response <span class="token operator">=</span> input<span class="token punctuation">(</span>input_string<span class="token punctuation">)</span>    <span class="token keyword">while</span> response <span class="token operator">not</span> <span class="token keyword">in</span> valid_options<span class="token punctuation">:</span>        response <span class="token operator">=</span> input<span class="token punctuation">(</span>input_string<span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token comment" spellcheck="true"># 房屋和公寓的父类，提供一些共有的参数</span><span class="token keyword">class</span> <span class="token class-name">Property</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> square_feet<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> beds<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> baths<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 防止它不是在继承链的最后一层调用</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>square_feet <span class="token operator">=</span> square_feet        self<span class="token punctuation">.</span>num_bedrooms <span class="token operator">=</span> beds        self<span class="token punctuation">.</span>num_baths <span class="token operator">=</span> baths    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"PROPERTY DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"square footage: {self.square_feet}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"bedrooms: {self.num_bedrooms}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"bathrooms: {self.num_bedrooms}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># * 静态方法，可直接通过类调用，也可以通过实例调用</span>    <span class="token comment" spellcheck="true"># * 静态方法与实例无关，所以没有self参数，同样不能使用super关键字</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> dict<span class="token punctuation">(</span>            square_feet<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"Enter the square feet: "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            beds<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"Enter number of bedrooms: "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            baths<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"Enter number of baths: "</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 公寓</span><span class="token keyword">class</span> <span class="token class-name">Apartment</span><span class="token punctuation">(</span>Property<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 洗衣机</span>    valid_laundries <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"coin"</span><span class="token punctuation">,</span> <span class="token string">"ensuite"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 阳台</span>    valid_balconies <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"solarium"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> balcony<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> laundry<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>balcony <span class="token operator">=</span> balcony        self<span class="token punctuation">.</span>laundry <span class="token operator">=</span> laundry    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"APARTMENT DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"laundry: {self.laundry}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"has balcony: {self.balcony}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        parent_init <span class="token operator">=</span> Property<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        laundry <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"What laundry facilities does the property have? "</span><span class="token punctuation">,</span> Apartment<span class="token punctuation">.</span>valid_laundries<span class="token punctuation">)</span>        balcony <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"Does the property have a balcony? "</span><span class="token punctuation">,</span> Apartment<span class="token punctuation">.</span>valid_balconies<span class="token punctuation">)</span>        parent_init<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"laundry"</span><span class="token punctuation">:</span> laundry<span class="token punctuation">,</span>            <span class="token string">"balcony"</span><span class="token punctuation">:</span> balcony        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> parent_init<span class="token comment" spellcheck="true"># 房屋</span><span class="token keyword">class</span> <span class="token class-name">House</span><span class="token punctuation">(</span>Property<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 车库</span>    valid_garage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"attached"</span><span class="token punctuation">,</span> <span class="token string">"detached"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 围栏</span>    valid_fenced <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_stories<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> garage<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> fenced<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>garage <span class="token operator">=</span> garage        self<span class="token punctuation">.</span>fenced <span class="token operator">=</span> fenced        self<span class="token punctuation">.</span>num_stories <span class="token operator">=</span> num_stories    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"HOUSE DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"# of stories: {self.num_stories}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"garage: {self.garage}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"fenced yard: {self.fenced}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        parent_init <span class="token operator">=</span> Property<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        fenced <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"Is the yard fenced? "</span><span class="token punctuation">,</span> House<span class="token punctuation">.</span>valid_fenced<span class="token punctuation">)</span>        garage <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"Is there a garage? "</span><span class="token punctuation">,</span> House<span class="token punctuation">.</span>valid_garage<span class="token punctuation">)</span>        num_stories <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"How many stories? "</span><span class="token punctuation">)</span>        parent_init<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"fenced"</span><span class="token punctuation">:</span> fenced<span class="token punctuation">,</span>            <span class="token string">"garage"</span><span class="token punctuation">:</span> garage<span class="token punctuation">,</span>            <span class="token string">"num_stories"</span><span class="token punctuation">:</span> num_stories        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> parent_init<span class="token comment" spellcheck="true"># 购买</span><span class="token keyword">class</span> <span class="token class-name">Purchase</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> taxes<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price        self<span class="token punctuation">.</span>taxes <span class="token operator">=</span> taxes    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"PURCHASE DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"selling price: {self.price}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"estimated taxes: {self.taxes}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> dict<span class="token punctuation">(</span>            price<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"What is the selling price? "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            taxes<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"What are the estimated taxes? "</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 租房</span><span class="token keyword">class</span> <span class="token class-name">Rental</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> furnished<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> utilities<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> rent<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>furnished <span class="token operator">=</span> furnished        self<span class="token punctuation">.</span>utilities <span class="token operator">=</span> utilities        self<span class="token punctuation">.</span>rent <span class="token operator">=</span> rent    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RENTAL DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"rent: {self.rent}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"estimated utilities: {self.utilities}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"furnished: {self.furnished}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> dict<span class="token punctuation">(</span>            rent<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"What is the monthly rent? "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            utilities<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"What are the estimated utilities? "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            furnished<span class="token operator">=</span>get_valid_input<span class="token punctuation">(</span>                <span class="token string">"Is the property furnished? "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 租房子</span><span class="token keyword">class</span> <span class="token class-name">HouseRental</span><span class="token punctuation">(</span>Rental<span class="token punctuation">,</span> House<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init <span class="token operator">=</span> House<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        init<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Rental<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> initinit <span class="token operator">=</span> HouseRental<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>house <span class="token operator">=</span> HouseRental<span class="token punctuation">(</span><span class="token operator">**</span>init<span class="token punctuation">)</span>house<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Enter the square feet: 1Enter number of bedrooms: 2Enter number of baths: 3Is the yard fenced?  yes, noyesIs there a garage?  attached, detached, noneattachedHow many stories? 3What is the monthly rent? 12What are the estimated utilities? 100Is the property furnished?  yes, noyesPROPERTY DETAILS==========square footage: 1bedrooms: 2bathrooms: 2HOUSE DETAILS# of stories: 3garage: attachedfenced yard: yesRENTAL DETAILSrent: 12estimated utilities: 100furnished: yes'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在前面的例子中如果我们将HouseRental继承顺序改为<code>(House, Rental)</code>，将不会触发<code>Rental.display()</code>方法。因为当调用<code>House.display</code>方式时，会调用<code>Property.display</code>方法。但是<code>Property.display()</code>中没有调用<code>super</code>，所以调用不了<code>Rental.display</code>方法。如果在Property中调用<code>super().display()</code>方法则不行，因为<code>object</code>对象没有<code>display</code>方法。可行的方式是Rental也继承Property，就成了之前讲到的钻石继承问题了。<code>super()</code>能轻松的解决。</p></blockquote><p>继续编写剩余代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 租公寓</span><span class="token keyword">class</span> <span class="token class-name">ApartmentRental</span><span class="token punctuation">(</span>Rental<span class="token punctuation">,</span> Apartment<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init <span class="token operator">=</span> Apartment<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        init<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Rental<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> init<span class="token comment" spellcheck="true"># 买公寓</span><span class="token keyword">class</span> <span class="token class-name">ApartmentPurchase</span><span class="token punctuation">(</span>Purchase<span class="token punctuation">,</span> Apartment<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init <span class="token operator">=</span> Purchase<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        init<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Rental<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> init<span class="token comment" spellcheck="true"># 买房子</span><span class="token keyword">class</span> <span class="token class-name">HousePurchase</span><span class="token punctuation">(</span>Purchase<span class="token punctuation">,</span> House<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init <span class="token operator">=</span> House<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        init<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Purchase<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> init<span class="token keyword">class</span> <span class="token class-name">Agent</span><span class="token punctuation">:</span>    type_map <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token string">"house"</span><span class="token punctuation">,</span> <span class="token string">"rental"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> HouseRental<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"house"</span><span class="token punctuation">,</span> <span class="token string">"purchase"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> HousePurchase<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"apartment"</span><span class="token punctuation">,</span> <span class="token string">"rental"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ApartmentRental<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"apartment"</span><span class="token punctuation">,</span> <span class="token string">"purchase"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ApartmentPurchase    <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>property_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">display_properties</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> property <span class="token keyword">in</span> self<span class="token punctuation">.</span>property_list<span class="token punctuation">:</span>            property<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_property</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        property_type <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"What type of property? "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"house"</span><span class="token punctuation">,</span> <span class="token string">"apartment"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        payment_type <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"What payment type? "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"purchase"</span><span class="token punctuation">,</span> <span class="token string">"rental"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        PropertyClass <span class="token operator">=</span> self<span class="token punctuation">.</span>type_map<span class="token punctuation">[</span><span class="token punctuation">(</span>property_type<span class="token punctuation">,</span> payment_type<span class="token punctuation">)</span><span class="token punctuation">]</span>        init_args <span class="token operator">=</span> PropertyClass<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>property_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>PropertyClass<span class="token punctuation">(</span><span class="token operator">**</span>init_args<span class="token punctuation">)</span><span class="token punctuation">)</span>agent <span class="token operator">=</span> Agent<span class="token punctuation">(</span><span class="token punctuation">)</span>agent<span class="token punctuation">.</span>add_property<span class="token punctuation">(</span><span class="token punctuation">)</span>agent<span class="token punctuation">.</span>add_property<span class="token punctuation">(</span><span class="token punctuation">)</span>agent<span class="token punctuation">.</span>display_properties<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># What type of property?  house, apartment</span><span class="token comment" spellcheck="true"># house</span><span class="token comment" spellcheck="true"># What payment type?  purchase, rental</span><span class="token comment" spellcheck="true"># purchase</span><span class="token comment" spellcheck="true"># Enter the square feet: 1</span><span class="token comment" spellcheck="true"># Enter number of bedrooms: 2</span><span class="token comment" spellcheck="true"># Enter number of baths: 3</span><span class="token comment" spellcheck="true"># Is the yard fenced?  yes, no</span><span class="token comment" spellcheck="true"># yes</span><span class="token comment" spellcheck="true"># Is there a garage?  attached, detached, none</span><span class="token comment" spellcheck="true"># none</span><span class="token comment" spellcheck="true"># How many stories? 4</span><span class="token comment" spellcheck="true"># What is the selling price? 12</span><span class="token comment" spellcheck="true"># What are the estimated taxes? 23</span><span class="token comment" spellcheck="true"># What type of property?  house, apartment</span><span class="token comment" spellcheck="true"># house</span><span class="token comment" spellcheck="true"># What payment type?  purchase, rental</span><span class="token comment" spellcheck="true"># rental</span><span class="token comment" spellcheck="true"># Enter the square feet: 2</span><span class="token comment" spellcheck="true"># Enter number of bedrooms: 3</span><span class="token comment" spellcheck="true"># Enter number of baths: 4</span><span class="token comment" spellcheck="true"># Is the yard fenced?  yes, no</span><span class="token comment" spellcheck="true"># no</span><span class="token comment" spellcheck="true"># Is there a garage?  attached, detached, none</span><span class="token comment" spellcheck="true"># none</span><span class="token comment" spellcheck="true"># How many stories? 6</span><span class="token comment" spellcheck="true"># What is the monthly rent? 12</span><span class="token comment" spellcheck="true"># What are the estimated utilities? 4</span><span class="token comment" spellcheck="true"># Is the property furnished?  yes, no</span><span class="token comment" spellcheck="true"># no</span><span class="token comment" spellcheck="true"># PROPERTY DETAILS</span><span class="token comment" spellcheck="true"># == == == == ==</span><span class="token comment" spellcheck="true"># square footage: 1</span><span class="token comment" spellcheck="true"># bedrooms: 2</span><span class="token comment" spellcheck="true"># bathrooms: 2</span><span class="token comment" spellcheck="true"># HOUSE DETAILS</span><span class="token comment" spellcheck="true"># # of stories: 4</span><span class="token comment" spellcheck="true"># garage: none</span><span class="token comment" spellcheck="true"># fenced yard: yes</span><span class="token comment" spellcheck="true"># PURCHASE DETAILS</span><span class="token comment" spellcheck="true"># selling price: 12</span><span class="token comment" spellcheck="true"># estimated taxes: 23</span><span class="token comment" spellcheck="true"># PROPERTY DETAILS</span><span class="token comment" spellcheck="true"># == == == == ==</span><span class="token comment" spellcheck="true"># square footage: 2</span><span class="token comment" spellcheck="true"># bedrooms: 3</span><span class="token comment" spellcheck="true"># bathrooms: 3</span><span class="token comment" spellcheck="true"># HOUSE DETAILS</span><span class="token comment" spellcheck="true"># # of stories: 6</span><span class="token comment" spellcheck="true"># garage: none</span><span class="token comment" spellcheck="true"># fenced yard: no</span><span class="token comment" spellcheck="true"># RENTAL DETAILS</span><span class="token comment" spellcheck="true"># rent: 12</span><span class="token comment" spellcheck="true"># estimated utilities: 4</span><span class="token comment" spellcheck="true"># furnished: no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 面向对象 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API</title>
      <link href="/2020/06/27/restfule-api/"/>
      <url>/2020/06/27/restfule-api/</url>
      
        <content type="html"><![CDATA[<h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>​    最近在项目中单独负责一个组件的开发，这个组件的输出是通过api的方式输出。虽然接口不多，也就15个api左右，但是越往后写就越感觉不太对劲。在和同时联调沟通的时候也发现了很多的问题。一直都想要好好总结下，趁着今天下班早有时间就反思一下吧。</p><p>​    我总结了目前我发现的这个项目的一些问题</p><ol><li>API风格混乱</li><li>API设计不好，不能更加友好的支持API升级</li><li>返回状态码的滥用</li><li>接口返回数据结构不一致</li><li>接口太碎片化</li><li>由于是go语言写的，基本每个接口都用到了defer</li></ol><p>​    站在现在的角度来看，其实这个组件的api是想当失败，可以说是不忍直视。当然有一小部分原因是项目紧急的缘故。但是不可否认的是主要还是因为我的原因才导致了这样的结果。所以我决定新开一个分支，在下班时间重构这个组件的API。虽然这个新重构后的API上线的可能性不大（因为好多项目已经集成了该组件，改动起来花费的资源很大）。但也算是对自己的一个交代吧。</p><p>​    自己算了算之前也参与过三个项目相关业务API的开发。但是都是在别人的基础上进行开发，看到别人没有过多的去关注这些东西。所以自己也就自然而然的没有过多的去思考，就顺着那种思路开发下去了。总之该来的还是会来的。这次的更改可能对这个组件起不了多大的作用。但是希望能够给自己敲响警钟，避免下次出现同样的问题。</p><h3 id="REST-API的一些规范"><a href="#REST-API的一些规范" class="headerlink" title="REST API的一些规范"></a>REST API的一些规范</h3><p>实现REST API标准比较好的例子就是<a href="https://developer.github.com/v3/#current-version" target="_blank" rel="noopener">https://developer.github.com/v3/#current-version</a></p><ol><li><p>在API中指定版本</p><p>一种是可以放在url中，另外一种就是将版本放在HTTP请求头中。还是放在url中比较方便</p></li><li><p>url中不能出现动词，名词也应该使用复数</p><p>因为RESTful面向的都是资源，所以在url中不能包含动词。</p></li><li><p>对资源的操作都是用HTTP动词</p><p>常用到的HTTP动词</p><table><thead><tr><th>动词</th><th>作用</th><th>返回结果</th></tr></thead><tbody><tr><td>GET</td><td>从服务器获取资源</td><td>获取单个资源对象或者资源对象数组</td></tr><tr><td>POST</td><td>新建资源</td><td>新生成的资源对象</td></tr><tr><td>PUT</td><td>更新整个对象，需要客户端提供完整的对象</td><td>更新后的资源对象</td></tr><tr><td>PATCH</td><td>更新对象的某个部分，需要客户端提供更新的部分</td><td>更新后的资源对象</td></tr><tr><td>DELETE</td><td>删除整个对象</td><td>返回一个空文档</td></tr></tbody></table></li></ol><p>一些例子</p><pre><code>```bashGET /zoos：列出所有动物园POST /zoos：新建一个动物园GET /zoos/ID：获取某个指定动物园的信息PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）DELETE /zoos/ID：删除某个动物园GET /zoos/ID/animals：列出某个指定动物园的所有动物DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物```</code></pre><ol start="4"><li><p>过滤信息</p><p>一些例子</p><pre class="line-numbers language-bash"><code class="language-bash">?limit<span class="token operator">=</span>10：指定返回记录的数量?offset<span class="token operator">=</span>10：指定返回记录的开始位置。?page<span class="token operator">=</span>2<span class="token operator">&amp;</span>per_page<span class="token operator">=</span>100：指定第几页，以及每页的记录数。?sortby<span class="token operator">=</span>name<span class="token operator">&amp;</span>order<span class="token operator">=</span>asc：指定返回结果按照哪个属性排序，以及排序顺序。?animal_type_id<span class="token operator">=</span>1：指定筛选条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 GET /zoo/ID/animals 与 GET /animals?zoo=ID都是REST的风格。一直都以为只有第一种才是</p></li><li><p>状态码</p><pre class="line-numbers language-bash"><code class="language-bash">200 OK - <span class="token punctuation">[</span>GET<span class="token punctuation">]</span>：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。201 CREATED - <span class="token punctuation">[</span>POST/PUT/PATCH<span class="token punctuation">]</span>：用户新建或修改数据成功。202 Accepted - <span class="token punctuation">[</span>*<span class="token punctuation">]</span>：表示一个请求已经进入后台排队（异步任务）204 NO CONTENT - <span class="token punctuation">[</span>DELETE<span class="token punctuation">]</span>：用户删除数据成功。400 INVALID REQUEST - <span class="token punctuation">[</span>POST/PUT/PATCH<span class="token punctuation">]</span>：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。401 Unauthorized - <span class="token punctuation">[</span>*<span class="token punctuation">]</span>：表示用户没有权限（令牌、用户名、密码错误）。403 Forbidden - <span class="token punctuation">[</span>*<span class="token punctuation">]</span> 表示用户得到授权（与401错误相对），但是访问是被禁止的。404 NOT FOUND - <span class="token punctuation">[</span>*<span class="token punctuation">]</span>：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。406 Not Acceptable - <span class="token punctuation">[</span>GET<span class="token punctuation">]</span>：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。410 Gone -<span class="token punctuation">[</span>GET<span class="token punctuation">]</span>：用户请求的资源被永久删除，且不会再得到的。422 Unprocesable entity - <span class="token punctuation">[</span>POST/PUT/PATCH<span class="token punctuation">]</span> 当创建一个对象时，发生一个验证错误。500 INTERNAL SERVER ERROR - <span class="token punctuation">[</span>*<span class="token punctuation">]</span>：服务器发生错误，用户将无法判断发出的请求是否成功。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>返回结果</p><pre class="line-numbers language-bash"><code class="language-bash">GET /collection：返回资源对象的列表（数组）GET /collection/resource：返回单个资源对象POST /collection：返回新生成的资源对象PUT /collection/resource：返回完整的资源对象PATCH /collection/resource：返回完整的资源对象DELETE /collection/resource：返回一个空文档<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Hypermedia API</p><p>个人认为这个在公司这种项目中是可以省略的，毕竟公司项目中的API都是面向特定的用户，而且有安全限制，不会把所有的API都暴露出去。</p></li><li><p>API的用户认证使用OAuth 2.0框架</p><p>这个单独拿出来写一写</p></li></ol><p>其实RESTful规范也不多，在实际中除非有特殊情况，都要尽量的遵守规范。</p><p>参考链接：</p><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p><p><a href="https://docs.microsoft.com/zh-cn/azure/architecture/best-practices/api-design" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/azure/architecture/best-practices/api-design</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python可变对象和不可变对象</title>
      <link href="/2020/06/27/python-mutable/"/>
      <url>/2020/06/27/python-mutable/</url>
      
        <content type="html"><![CDATA[<p>在Python中所有的一切都是对象，都是继承同一个对象<code>object</code>。</p><blockquote><p><code>object</code>是所有对象的基类，<code>type</code>也是继承<code>object</code></p></blockquote><blockquote><p><code>type</code>是一切type的类型</p></blockquote><p>借用<a href="https://colinoftroy.wordpress.com/2012/12/03/differences-between-python-types-and-objects/" target="_blank" rel="noopener">某博客里的一张图片</a>，他们的关系应该是这样的（蓝色表示继承，红色表示类型）</p><p><img src="./python.jpg" alt="img"></p><h3 id="可变和不可变对象的区别"><a href="#可变和不可变对象的区别" class="headerlink" title="可变和不可变对象的区别"></a>可变和不可变对象的区别</h3><p>Python中的数据结构也可以分为可变对象和不可变对象两类</p><ul><li>可变对象：<code>list</code>,<code>set</code>,<code>dict</code></li><li>不可变对象：<code>tuple</code>,<code>int</code>,<code>float</code>,<code>string</code>,<code>bool</code></li></ul><p><strong>这里说的可变和不可变都是基于内存地址中的数据来区分的</strong>，看个例子</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里a和b都指向了同一个内存地址，因为是<code>list</code>，所以b能够修改内存地址当中的数据，所以打印a时就会输出内存地址当中修改后的数据。</p><p>下面看看不可变对象的例子</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError       Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-17</span><span class="token operator">-</span><span class="token number">62bbbc50f611</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> object does <span class="token operator">not</span> support item assignment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>tuple</code>是不可变对象，既内存中记录的数据是不可以修改的，所以当我们修改数据时就出现了错误。</p><p>可能会有人疑问，不可变对象也是可以改变内存地址内容的，比如</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">"test"</span>In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">"hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其实这并不是修改了内存地址中的数据，而是将a重新指向了另外一个内存地址，如果我们在打印输出b，就会发现b还是”test”。</strong></p><p>从内存地址中更容易理解</p><blockquote><p><code>id()</code>方法可以查看内存地址，其实是不是内存地址，而是逻辑地址</p></blockquote><p>可变对象：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4370511024</span>In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4370511024</span>In <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4370511024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到a和b指向的内存地址并没有发生变化</p><p>不可变对象：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">"test"</span>In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4343187248</span>In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> <span class="token string">"hello"</span>In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4343187248</span>In <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4372234608</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到其实是b指向的内存地址变化了，并不是内存地址当中的数据发生变化了</p><h3 id="可变对象和不可变对象的应用"><a href="#可变对象和不可变对象的应用" class="headerlink" title="可变对象和不可变对象的应用"></a>可变对象和不可变对象的应用</h3><p><strong>我们在实际工作中应该避免使用可变对象作为函数参数传入，除非你明确的知道会发生什么。</strong></p><p>这么做的原因是因为在Python当中是传递参数都是引用传递而不是值传递。关于引用传递可以简单的用下面的例子证明：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> id<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>    args <span class="token operator">+=</span> <span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> id<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> id<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>    test<span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> id<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash"><code class="language-bash">1 45175108321 451751083211 45175111521 4517510832<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在<code>test</code>函数中，<code>args</code>和在函数外的<code>args</code>的内存地址都是相同的，所以证明了Python中是传递参数是引用传递。但是最后并没有改变函数外<code>args</code>的值，是因为<code>int</code>类型是不可变对象。如果是可变对象就会改变值。</p><h4 id="可变对象作为函数参数的正向作用"><a href="#可变对象作为函数参数的正向作用" class="headerlink" title="可变对象作为函数参数的正向作用"></a>可变对象作为函数参数的正向作用</h4><p>在有些情况下，可变对象作为函数参数还是非常有用的。</p><p>比如要实现一个生产者-消费者模式</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"producet put a message {i}"</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"consumer get a message {data}"</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    producer <span class="token operator">=</span> Producer<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    consumer <span class="token operator">=</span> Consumer<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    thread <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>producer<span class="token punctuation">.</span>run<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>consumer<span class="token punctuation">.</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash"><code class="language-bash">producet put a message 0consumer get a message 0producet put a message 1consumer get a message 1producet put a message 2consumer get a message 2producet put a message 3consumer get a message 3producet put a message 4consumer get a message 4producet put a message 5consumer get a message 5producet put a message 6consumer get a message 6producet put a message 7consumer get a message 7producet put a message 8consumer get a message 8producet put a message 9consumer get a message 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过可变对象，能够方便的在两个函数中进行通信，不必每次改变数据都去通知对方。</p><h4 id="可变对象作为函数参数的负向作用"><a href="#可变对象作为函数参数的负向作用" class="headerlink" title="可变对象作为函数参数的负向作用"></a>可变对象作为函数参数的负向作用</h4><p>看下面的例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'world'</span>, <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'world'</span>, <span class="token string">'world'</span>, <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'world'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>会出现这个问题的原因主要有两个</p><ul><li><strong>默认参数的值只会在函数定义的时候赋值一次</strong></li><li><strong>a变量指向了一个可变对象</strong></li></ul><p>当不给test函数传递参数时，a变量就会修改<code>test(a=[])</code>中的[]的内存地址，而且因为<strong>默认参数的值只会在函数定义的时候赋值一次</strong>，所以后面再次不给test函数传递参数时，a变量还是会指向<code>test(a=[])</code>中的[]的内存地址，所以就出现了上面的结果</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>需要将默认值改为不可变对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> a<span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是改成这样还是有个问题，就是有时候函数传递进来的是比如说false、空字符串等。会把这些输入当做没有输入</p><p>优化：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token keyword">is</span> None<span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你的目标是检测函数调用时是否传递了默认值，而不是提供默认值那么会有一个更好的方式</p><p>改进：将<code>None</code>替换为一个独一无二的，用户不可能传入的类型，<code>object</code>是个好的选择</p><pre class="line-numbers language-python"><code class="language-python">_no_value <span class="token operator">=</span> object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">=</span>_no_value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token keyword">is</span> _no_value<span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样即使函数的参数是<code>None</code>，也会判断为传递进来了参数</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
