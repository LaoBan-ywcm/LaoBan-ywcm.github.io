<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux 学习笔记</title>
      <link href="/2020/09/05/linux-bi-ji/"/>
      <url>/2020/09/05/linux-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>Linux笔记</p><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><ul><li><p>创建多个嵌套目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p a/b/c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看嵌套目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -R ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>ls -h</code>会显示文件的大小</p></li><li><p>复制文件保留元信息（复制文件默认会修改文件的元信息）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> -a a b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通配符，只匹配一个字符</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> a?<span class="token comment" spellcheck="true"># 会匹配ab 不会匹配abc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>打包文件，解包文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 打包文件</span><span class="token function">tar</span> cf xxx.tar /a<span class="token comment" spellcheck="true"># 解包文件</span><span class="token function">tar</span> xf xxx.tar -C /a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将a目录下的文件打包成xxx.tar文件,<code>f</code>表示打包成文件</p><p><code>tar</code>命令的参数是不带<code>-</code>的</p></li><li><p>压缩文件，解压文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># gzip压缩文件，打包文件加压缩</span><span class="token function">tar</span> czf xxx.tar.gz /a<span class="token comment" spellcheck="true">#解压文件</span><span class="token function">tar</span> xzf xxx.tar.gz -C /a<span class="token comment" spellcheck="true"># bzip2压缩文件，打包文件加压缩</span><span class="token function">tar</span> cjf xxx.tar.bz2 /a<span class="token comment" spellcheck="true">#解压文件</span><span class="token function">tar</span> xjf xx.tar.gz _v /a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bzip2压缩的文件方式要比gzip小，压缩比例更高</p></li></ul><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><h5 id="进入插入模式："><a href="#进入插入模式：" class="headerlink" title="进入插入模式："></a>进入插入模式：</h5><p><code>-i</code>：当前位置进入插入模式</p><p><code>-I</code>：跳转到行前进入插入模式</p><p><code>-a</code>：跳转到下一个字符进入插入模式</p><p><code>-A</code>：跳转到行尾进入插入模式</p><p><code>-o</code>：下一行进入插入模式</p><p><code>-O</code>：上一行进入插入模式</p><h4 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h4><p><code>!</code>：可以执行linux命令</p><p><code>:s/a/b</code>：对当前行进行替换</p><p><code>:%s/a/b/g</code>：对所有符合条件的内容进行替换</p><p><code>:10,25s/a.b/g</code>：对10-25行中的内容进行替换</p><h4 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h4><p><code>v</code>：字符可视模式</p><p><code>V</code>：行可视模式</p><p><code>^+v</code>：块可视模式</p><p><code>I</code>：可以在快模式下编辑多行，编辑完后按两下<code>esc</code>键，修改就会同步到其他行</p><p><code>d</code>：在快模式下，删除多行选中的字符</p><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p><code>yy</code>：复制正行</p><p><code>n yy</code>：复制n行</p><p><code>y$</code>：从当前字符复制到行尾</p><p><code>p</code>：粘贴</p><h4 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h4><p><code>dd</code>：剪切整行</p><p><code>n dd</code>：剪切n行</p><p><code>d$</code>：剪切当前字符到行尾</p><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><p><code>u</code>：撤销</p><p><code>^+r</code>：反向撤销</p><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p><code>r</code>：替换单个字符</p><p><code>x</code>：删除单个字符</p><h4 id="跳转到指定行"><a href="#跳转到指定行" class="headerlink" title="跳转到指定行"></a>跳转到指定行</h4><p><code>n G</code>：跳转到第n行</p><p><code>gg</code>：跳转到第一行</p><p><code>G</code>：跳转到最后一行</p><p><code>$</code>：跳转到该行的行尾</p><p><code>^</code>：跳转到该行的行首</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="添加用户（需要在root用户下执行，其他普通用户无法创建用户）"><a href="#添加用户（需要在root用户下执行，其他普通用户无法创建用户）" class="headerlink" title="添加用户（需要在root用户下执行，其他普通用户无法创建用户）"></a>添加用户（需要在root用户下执行，其他普通用户无法创建用户）</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 不会创建用户目录、设定密码等</span><span class="token function">useradd</span> abc<span class="token comment" spellcheck="true"># 会创建用户目录、设定密码等</span>adduser abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">passwd</span> abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看某一个用户是否存在"><a href="#查看某一个用户是否存在" class="headerlink" title="查看某一个用户是否存在"></a>查看某一个用户是否存在</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">id</span> abc<span class="token comment" spellcheck="true"># uid=0(root) gid=0(root) groups=0(root),113(docker)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="添加用户会进过那些操作"><a href="#添加用户会进过那些操作" class="headerlink" title="添加用户会进过那些操作"></a>添加用户会进过那些操作</h4><ol><li><p>会在<code>/etc/passwd</code>中添加用户</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/passwd<span class="token comment" spellcheck="true"># abc:x:1002:1002::/home/abc:/bin/sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>会在<code>/etc/shadow</code>中添加用户</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/shadow<span class="token comment" spellcheck="true"># abc:!:18510:0:99999:7:::</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 不会删除用户目录</span><span class="token function">userdel</span> abc<span class="token comment" spellcheck="true"># 删除用户目录</span><span class="token function">userdel</span> -r abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改用户属性"><a href="#修改用户属性" class="headerlink" title="修改用户属性"></a>修改用户属性</h4><p>修改用户目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">usermod</span> -d /home/dd abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改用户所属的组</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">usermod</span> -g group1 abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="新建用户组"><a href="#新建用户组" class="headerlink" title="新建用户组"></a>新建用户组</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">groupadd</span> group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">su</span> - abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-</code>表示完全切换，会切换到该用户的目录下，如果没有<code>-</code>则还会在当前目录</p><h4 id="给特定用户执行某些命令的权限"><a href="#给特定用户执行某些命令的权限" class="headerlink" title="给特定用户执行某些命令的权限"></a>给特定用户执行某些命令的权限</h4><pre class="line-numbers language-bash"><code class="language-bash">visudo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用上面的命令可以给某些用户赋予某些命令的权限</p><h4 id="etc-passwd文件解析"><a href="#etc-passwd文件解析" class="headerlink" title="/etc/passwd文件解析"></a>/etc/passwd文件解析</h4><pre class="line-numbers language-bash"><code class="language-bash">root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologin<span class="token comment" spellcheck="true"># 用户名/用户是否需要密码进行验证/uid/gid/注释/用户目录/命令解释器</span><span class="token comment" spellcheck="true"># sbin/nologin 是不能被登录的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在新建用户时可以不用<code>adduser</code>命令，直接编辑该文件也可以起到新增用户的目的</p><h4 id="etc-shadow-文件解析（用来保存用户和密码的关系）"><a href="#etc-shadow-文件解析（用来保存用户和密码的关系）" class="headerlink" title="/etc/shadow 文件解析（用来保存用户和密码的关系）"></a>/etc/shadow 文件解析（用来保存用户和密码的关系）</h4><pre class="line-numbers language-bash"><code class="language-bash">mysql:<span class="token operator">!</span>:18493424:0:99999:7:::user1:<span class="token variable">$6</span><span class="token variable">$9JTohwDk</span><span class="token variable">$baTsdfsVJRRfSds6PCdF0xBQlqslTekjWK9xT7</span>/yIoTTUv45raWwtZRpwtMn5mNwjULCvL2XRJ9Nj3kFhekJBsjgBfq.:18511:0:99999:7:::<span class="token comment" spellcheck="true"># 用户名/加密后的密码</span><span class="token comment" spellcheck="true"># 相同的密码加密后是不同的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="etc-group-文件解析（用户组文件）"><a href="#etc-group-文件解析（用户组文件）" class="headerlink" title="/etc/group 文件解析（用户组文件）"></a>/etc/group 文件解析（用户组文件）</h4><pre class="line-numbers language-bash"><code class="language-bash">mysql:x:116:user1:x:1002:<span class="token comment" spellcheck="true"># 用户组名称/是否需要密码/gid/其他组设置(一个用户可以属于多个组)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><h4 id="文件权限格式"><a href="#文件权限格式" class="headerlink" title="文件权限格式"></a>文件权限格式</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -l-rwx------+   8 xx  staff      256 Mar  6  2020 Moviesdrwx------+  10 xx  staff      320 Mar  6  2020 Music<span class="token comment" spellcheck="true"># 第一位，表示文件类型</span><span class="token comment" spellcheck="true"># 后面接着的9位 rwx------ 表示权限，每三个字符为一组，分别表示：用户对该文件的权限、该组对文件的权限和其他用户的权限</span><span class="token comment" spellcheck="true"># xx ：用户</span><span class="token comment" spellcheck="true"># staff： 用户组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><p><code>-</code>：普通文件</p><p><code>d</code>：目录文件</p><p><code>b</code>：块特殊文件</p><p><code>c</code>：字符特殊文件</p><p><code>l</code>：符号链接</p><p><code>f</code>：命令管道</p><p><code>s</code>：套接字文件</p><h4 id="文件权限的表示方法"><a href="#文件权限的表示方法" class="headerlink" title="文件权限的表示方法"></a>文件权限的表示方法</h4><p>数字权限的表示方法</p><p>r=4</p><p>w=2</p><p>x=1</p><h4 id="目录权限的表示方法"><a href="#目录权限的表示方法" class="headerlink" title="目录权限的表示方法"></a>目录权限的表示方法</h4><p><code>x</code>：可以进入目录</p><p><code>rx</code>：显示目录内的文件名</p><p><code>wx</code>：修改目录内的文件名</p><h4 id="修改文件属主和属组的方法"><a href="#修改文件属主和属组的方法" class="headerlink" title="修改文件属主和属组的方法"></a>修改文件属主和属组的方法</h4><p>修改属主</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chown</span> user1 /test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改属组</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chgrp</span> :user1 /test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h4><p><code>u</code>：属主</p><p><code>g</code>：属组</p><p><code>o</code>：其他用户</p><p><code>a</code>：包括上述三种</p><p><code>+</code>：增加权限</p><p><code>-</code>：减少权限</p><p><code>=</code>：设置权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 为test的属主设置w权限</span><span class="token function">chmod</span> u+w ./test<span class="token comment" spellcheck="true"># 为属主、属组合其他用户设置只有wr权限</span><span class="token function">chmod</span> a<span class="token operator">=</span>wr ./test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>linux中默认的文件权限是644,是666-umask(022)=644，既<code>rw-r--r--</code></p><p>如果属主权限和属组权限冲突，则以属主权限为主</p><h4 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h4><p><code>SUID</code>：用户可执行的二进制文件，执行命令时获取文件属主的权限</p><pre class="line-numbers language-bash"><code class="language-bash">root@master:~<span class="token comment" spellcheck="true"># ls -l /usr/bin/passwd</span>-rwsr-xr-x 1 root root 59640 Mar 23  2019 /usr/bin/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>SGID</code>：用于目录，在该目录下新建的文件和目录，权限自动更改为该目录的属组，常用于共享文件</p><p><code>SBIT</code>：用户目录，在该目录下新建的文件和目录，只有root和自己可以删除</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -l /drwxrwxrwt  13 root root       4096 Sep  7 18:21 tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h4 id="网络状态查看工具"><a href="#网络状态查看工具" class="headerlink" title="网络状态查看工具"></a>网络状态查看工具</h4><ol><li><p>net-tools(centos 7 之前推荐的工具)</p><ul><li>ifconfig</li><li>route</li><li>netstat</li></ul><h5 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h5><ul><li>eth0 第一块网卡（根据网卡接入方式不同，名称也会不同）</li></ul></li><li><p>iproute2(centos 7 之后推荐的工具)</p><ul><li>ip</li><li>ss</li></ul></li></ol><h4 id="修改网卡名称为eth0"><a href="#修改网卡名称为eth0" class="headerlink" title="修改网卡名称为eth0"></a>修改网卡名称为eth0</h4><p>网卡命名规则受<code>biosdevname</code>和<code>net.ifnames</code>两个参数影响</p><ol><li><p>编辑<code>etc/default/grub</code>文件，增加<code>biosdevname=0</code>和<code>net.ifnames=0</code></p><pre class="line-numbers language-bash"><code class="language-bash">GRUB_CMDLINE_LINUX<span class="token operator">=</span><span class="token string">"net.ifnames=0 biosdevname=0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更新grub</p><pre class="line-numbers language-bash"><code class="language-bash">grub2-mkconfig -o /boot/grub2/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重启(reboot)</p></li></ol><h4 id="查看网卡物理连接情况"><a href="#查看网卡物理连接情况" class="headerlink" title="查看网卡物理连接情况"></a>查看网卡物理连接情况</h4><pre class="line-numbers language-bash"><code class="language-bash">mii-tool eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看网关"><a href="#查看网关" class="headerlink" title="查看网关"></a>查看网关</h4><pre class="line-numbers language-bash"><code class="language-bash">route -n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>-n</code>参数不解析主机名</p><h4 id="网络故障排除命令"><a href="#网络故障排除命令" class="headerlink" title="网络故障排除命令"></a>网络故障排除命令</h4><p><code>ping</code>：网络主机是否畅通</p><p><code>traceroute</code>：如果网络通畅，但是还是访问不通，可以通过该命令查看路由信息</p><p><code>mtr</code>：如果网络主机通畅，但是还是访问不通，可以查看是否有数据包丢失了</p><p><code>nslookup</code>：查看域名对应的ip</p><p><code>telnet</code>：如果主机没有问题，可以查看端口是否开放</p><p><code>tcpdump</code>：如果主机和端口都ok，则需要抓包进行分析</p><p><code>netstat</code>和<code>ss</code>：检测服务监听的地址是否正确</p><h4 id="网络服务管理-centos"><a href="#网络服务管理-centos" class="headerlink" title="网络服务管理(centos)"></a>网络服务管理(centos)</h4><p>可以分为两种：<code>SysV</code>和<code>systemd</code></p><p>网络配置文件：<code>ifcfg-eth0</code>，会随着网卡的不同文件名也会不同</p><p>比如<code>/etc/sysconfig/network-scripts/ifcfg-ens3</code>，在这个里面可以配置dhcp，ip等信息</p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="调整优先级"><a href="#调整优先级" class="headerlink" title="调整优先级"></a>调整优先级</h4><p><code>nice</code>：范围从-20到19，值越小优先级越高，抢占的资源就越多</p><p><code>renice</code>：重新设置优先级</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在启动前设置某一个程序的优先级</span><span class="token function">nice</span> -n 10 ./a.sh<span class="token comment" spellcheck="true"># 在程序启动后重新设置一个程序的优先级</span><span class="token function">renice</span> -n 15 pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进程的作业控制"><a href="#进程的作业控制" class="headerlink" title="进程的作业控制"></a>进程的作业控制</h4><p><code>&amp;</code>：将任务放到后台执行</p><pre class="line-numbers language-bash"><code class="language-bash">./a.bash <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>jobs</code>:查看后台任务</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">jobs</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将前台任务停止并放到后台</p><p><code>ctrl + z</code></p><p>将后台任务放到前台执行</p><p><code>fg jobsID</code></p><p>将前台任务放到后台执行</p><p><code>bg jobsID</code></p><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><h4 id="查看信号"><a href="#查看信号" class="headerlink" title="查看信号"></a>查看信号</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@848e7f64efd8 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kill -l</span> 1<span class="token punctuation">)</span> SIGHUP     2<span class="token punctuation">)</span> SIGINT     3<span class="token punctuation">)</span> SIGQUIT     4<span class="token punctuation">)</span> SIGILL     5<span class="token punctuation">)</span> SIGTRAP 6<span class="token punctuation">)</span> SIGABRT     7<span class="token punctuation">)</span> SIGBUS     8<span class="token punctuation">)</span> SIGFPE     9<span class="token punctuation">)</span> SIGKILL    10<span class="token punctuation">)</span> SIGUSR111<span class="token punctuation">)</span> SIGSEGV    12<span class="token punctuation">)</span> SIGUSR2    13<span class="token punctuation">)</span> SIGPIPE    14<span class="token punctuation">)</span> SIGALRM    15<span class="token punctuation">)</span> SIGTERM16<span class="token punctuation">)</span> SIGSTKFLT    17<span class="token punctuation">)</span> SIGCHLD    18<span class="token punctuation">)</span> SIGCONT    19<span class="token punctuation">)</span> SIGSTOP    20<span class="token punctuation">)</span> SIGTSTP21<span class="token punctuation">)</span> SIGTTIN    22<span class="token punctuation">)</span> SIGTTOU    23<span class="token punctuation">)</span> SIGURG    24<span class="token punctuation">)</span> SIGXCPU    25<span class="token punctuation">)</span> SIGXFSZ26<span class="token punctuation">)</span> SIGVTALRM    27<span class="token punctuation">)</span> SIGPROF    28<span class="token punctuation">)</span> SIGWINCH    29<span class="token punctuation">)</span> SIGIO    30<span class="token punctuation">)</span> SIGPWR31<span class="token punctuation">)</span> SIGSYS    34<span class="token punctuation">)</span> SIGRTMIN    35<span class="token punctuation">)</span> SIGRTMIN+1    36<span class="token punctuation">)</span> SIGRTMIN+2    37<span class="token punctuation">)</span> SIGRTMIN+338<span class="token punctuation">)</span> SIGRTMIN+4    39<span class="token punctuation">)</span> SIGRTMIN+5    40<span class="token punctuation">)</span> SIGRTMIN+6    41<span class="token punctuation">)</span> SIGRTMIN+7    42<span class="token punctuation">)</span> SIGRTMIN+843<span class="token punctuation">)</span> SIGRTMIN+9    44<span class="token punctuation">)</span> SIGRTMIN+10    45<span class="token punctuation">)</span> SIGRTMIN+11    46<span class="token punctuation">)</span> SIGRTMIN+12    47<span class="token punctuation">)</span> SIGRTMIN+1348<span class="token punctuation">)</span> SIGRTMIN+14    49<span class="token punctuation">)</span> SIGRTMIN+15    50<span class="token punctuation">)</span> SIGRTMAX-14    51<span class="token punctuation">)</span> SIGRTMAX-13    52<span class="token punctuation">)</span> SIGRTMAX-1253<span class="token punctuation">)</span> SIGRTMAX-11    54<span class="token punctuation">)</span> SIGRTMAX-10    55<span class="token punctuation">)</span> SIGRTMAX-9    56<span class="token punctuation">)</span> SIGRTMAX-8    57<span class="token punctuation">)</span> SIGRTMAX-758<span class="token punctuation">)</span> SIGRTMAX-6    59<span class="token punctuation">)</span> SIGRTMAX-5    60<span class="token punctuation">)</span> SIGRTMAX-4    61<span class="token punctuation">)</span> SIGRTMAX-3    62<span class="token punctuation">)</span> SIGRTMAX-2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常用信号"><a href="#常用信号" class="headerlink" title="常用信号"></a>常用信号</h4><pre><code>ctrl + == SIGINT# 立即终止，不收阻塞，信号是SIGKILLkill -9 pid</code></pre><h4 id="守护进程（daemon）"><a href="#守护进程（daemon）" class="headerlink" title="守护进程（daemon）"></a>守护进程（daemon）</h4><p>让程序脱离当前终端执行：</p><ol><li><code>nohup</code></li><li>守护进程</li><li><code>screen</code>或者<code>tmux</code></li></ol><p><code>nohup</code>可以让一个命令脱离终端执行，但他不是守护进程</p><p>随着系统启动而启动，不用用户手动的去执行</p><p>每个进程的依赖的环境都在<code>/proc/pid</code>的文件夹中</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /proc/123<span class="token comment" spellcheck="true"># 进程执行的位置</span><span class="token function">ls</span> -l cwd<span class="token comment" spellcheck="true"># out</span> cwd -<span class="token operator">></span> /<span class="token comment" spellcheck="true"># 进程的输出</span><span class="token function">ls</span> -l fd<span class="token comment" spellcheck="true"># out</span>lrwx------ 1 root root 64 Sep 14 05:15 0 -<span class="token operator">></span> /dev/pts/4lrwx------ 1 root root 64 Sep 14 05:15 1 -<span class="token operator">></span> /dev/pts/4lrwx------ 1 root root 64 Sep 14 05:15 2 -<span class="token operator">></span> /dev/pts/4lrwx------ 1 root root 64 Sep 14 12:32 255 -<span class="token operator">></span> /dev/pts/4<span class="token comment" spellcheck="true"># 0是标准输入</span><span class="token comment" spellcheck="true"># 1,2是标准输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="服务管理工具-systemctl"><a href="#服务管理工具-systemctl" class="headerlink" title="服务管理工具-systemctl"></a>服务管理工具-systemctl</h4><p>常用操作：</p><p><code>systemctl start|stop|restart|reload|enable|disable 服务名称</code></p><h4 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h4><p>安全增强版本的Linux，以前的linux是利用用户和文件的权限来进行安全控制既DAC（自主访问控制）</p><p>MAC（强制访问控制）：会给用户、进程和文件都打上标签，如果三者标签不一致则不允许执行</p><p>SElinux是一个内核模块，也是Linux的一个安全子系统。SELinux可是设置DAC或者是MAC。需要注意的是开启SELinux会消耗服务器的性能，所以一般在生产环境下都是关闭的</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看SELinux状态</span>getenforce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="内存和磁盘管理"><a href="#内存和磁盘管理" class="headerlink" title="内存和磁盘管理"></a>内存和磁盘管理</h3><h4 id="内存和磁盘使用率查看"><a href="#内存和磁盘使用率查看" class="headerlink" title="内存和磁盘使用率查看"></a>内存和磁盘使用率查看</h4><p>内存：</p><ul><li><p><code>free</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop3 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># free -m</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:          64264       51686        2089         140       10488       11807Swap:             0           0           0<span class="token punctuation">[</span>root@hadoop3 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># free -g</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:             62          50           2           0          10          11Swap:             0           0           0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>top</code></p></li></ul><p>磁盘：</p><ul><li><p><code>fdisk</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop3 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk -l</span>Disk /dev/vda: 53.7 GB, 53687091200 bytes, 104857600 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x0009ac89   Device Boot      Start         End      Blocks   Id  System/dev/vda1   *        2048   104857566    52427759+  83  LinuxDisk /dev/vdb: 214.7 GB, 214748364800 bytes, 419430400 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上图所示，共有两个磁盘：/dev/vda、/dev/vdb</p><p>其中/dev/vda是分区了，因为有/dev/vda1</p></li><li><p><code>df</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">df</span> -hFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        50G   16G   32G  34% /devtmpfs         32G     0   32G   0% /devtmpfs            32G   24K   32G   1% /dev/shmtmpfs            32G  1.5M   32G   1% /runtmpfs            32G     0   32G   0% /sys/fs/cgroup/dev/vdb        197G   55G  134G  29% /datatmpfs           6.3G     0  6.3G   0% /run/user/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常常用来查看磁盘是否满了</p></li><li><p><code>du</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop3 elasticsearch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># du -h docker-compose.yaml</span>4.0K    docker-compose.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>du -h</code>和<code>ls -lh</code>区别是，<code>du</code>是实际占用的空间，而<code>ls -lh</code>是包含空洞空间的，其中磁盘有些位置是空的，只是声明了文件存储的位置，并没有实际存储数据</p></li></ul><h4 id="Linux文件系统管理"><a href="#Linux文件系统管理" class="headerlink" title="Linux文件系统管理"></a>Linux文件系统管理</h4><p>Linux常见的文件系统：</p><ul><li>ext4</li><li>xfs</li><li>NTFS（需要安全额外的软件）</li></ul><p><strong>硬链接</strong></p><p>多个文件其实都是链接到同一个数据块，修改一个文件，其余的文件都会同步变化。</p><p>硬链接是不允许跨文件系统的。</p><p>创建硬链接的方式：<code>ln afile bfile</code></p><p><strong>软链接</strong></p><p>克服了硬链接不能跨文件系统的问题。</p><p>但是实现上是不同的，软链接是创建了完全不同的一个文件，当系统读取这个文件时会发现这个文件是个链接文件，所以就会读取它链接的那个原文件。</p><p>对软链接文件设置权限并不会改变该文件的权限，而是改变的是原文件。</p><p>创建软链接的方式：<code>ln -s afile bfile</code></p><h4 id="硬盘分区与挂载"><a href="#硬盘分区与挂载" class="headerlink" title="硬盘分区与挂载"></a>硬盘分区与挂载</h4><p>硬盘分区：<code>fdisk /dev/vdb</code>，如果是2T以上的硬盘需要用<code>parted</code>命令</p><p>格式化设置分区文件系统：<code>mkfs.文件系统 /dev/vdb</code></p><p>分区挂载到目录下：<code>mount /dev/vdb /xx</code></p><p>这样挂载只是将数据写到了内存中，如果想要重启后还是挂载到该目录，需要修改文件 /etc/fstab</p><pre class="line-numbers language-bash"><code class="language-bash">root@max-master:~<span class="token comment" spellcheck="true"># cat /etc/fstab</span>UUID<span class="token operator">=</span>e1d5f0dc-9df2-421e-a87b-f761f5db8947 / ext4 defaults 0 0<span class="token comment" spellcheck="true">###/swap.img    none    swap    sw    0    0</span>max-master:gfs-configs    /var/cache/zoomeye-max    glusterfs    defaults,_netdev    0    0/dev/vdb1 /xx ext4 defaults 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Shell-编程"><a href="#Shell-编程" class="headerlink" title="Shell 编程"></a>Shell 编程</h3><h4 id="Shell-脚本的不同运行方式"><a href="#Shell-脚本的不同运行方式" class="headerlink" title="Shell 脚本的不同运行方式"></a>Shell 脚本的不同运行方式</h4><p>内建命令不需要创建子进程</p><p>内建命令对当前shell生效</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> 1.sh<span class="token comment" spellcheck="true"># 不用给1.sh赋予执行权限，bash脚本执行完后会回到当前目录</span><span class="token comment" spellcheck="true"># 会产生新的子进程</span>./1.sh<span class="token comment" spellcheck="true"># 必须要可执行权限，bash脚本执行完后会回到当前目录</span><span class="token comment" spellcheck="true"># 会产生新的子进程</span><span class="token function">source</span> 1.sh 和 <span class="token keyword">.</span> 1.sh<span class="token comment" spellcheck="true"># 必须要可执行权限，bash脚本执行完后不会回到当前目录</span><span class="token comment" spellcheck="true"># 不会创建新的子进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="管道与重定向"><a href="#管道与重定向" class="headerlink" title="管道与重定向"></a>管道与重定向</h4><p>管道和信号是一样的，也是进程通信的方式之一</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输入重定向</span><span class="token operator">&lt;</span><span class="token comment" spellcheck="true"># 输出重定向</span><span class="token operator">></span><span class="token comment" spellcheck="true"># 追加模式</span><span class="token operator">>></span><span class="token comment" spellcheck="true"># 将a.txt文件内容赋值给变量ss</span><span class="token function">read</span> ss <span class="token operator">&lt;</span> a.txt<span class="token comment" spellcheck="true"># 将ss变量内容写入到文件中</span><span class="token keyword">echo</span> <span class="token variable">$ss</span> <span class="token operator">></span> a.txt<span class="token comment" spellcheck="true"># 将ss变量内容追加到文件中</span><span class="token keyword">echo</span> <span class="token variable">$ss</span> <span class="token operator">>></span> a.txt<span class="token comment" spellcheck="true"># 将错误信息重定向到文件中</span>xxx 2<span class="token operator">></span> a.txt<span class="token comment" spellcheck="true"># 将输出信息全部重定向到文件中</span>xxx <span class="token operator">&amp;</span><span class="token operator">></span> a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h4><p>shell中不区分变量类型</p><p>变量复制等号两边不允许有空格</p><p>将命令的值赋值给变量，使用<code>$()</code>和````</p><pre class="line-numbers language-bash"><code class="language-bash">a<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> -l /etc<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="变量的作用范围"><a href="#变量的作用范围" class="headerlink" title="变量的作用范围"></a>变量的作用范围</h4><p>声明的变量只在当前的shell中生效，在子进程、父进程和<code>bash xx.sh</code>中都是不生效的，要想使得变量在<code>bash xx.sh</code>中生效，需要执行<code>source xx.sh</code>或者<code>. xx.sh</code>，因为这两种方式都不会创建新的子进程</p><p>使用<code>export xx</code>，可以使该变量在子进程中可用</p><p>使用<code>unset xx</code>，删除变量</p><h4 id="环境变量、预定义变量和位置变量"><a href="#环境变量、预定义变量和位置变量" class="headerlink" title="环境变量、预定义变量和位置变量"></a>环境变量、预定义变量和位置变量</h4><ul><li>环境变量：每个shell打开都可以获取到的变量<ul><li><code>env</code>：查看环境变量</li><li><code>set</code>：查看环境变量、预定义变量和位置变量</li><li><code>PATH</code>：该变量定义了命令查找的路径，我们需要添加路径时可以<code>PATH=$PATH:xx</code>，该变量修改后可以在子进程和别的shell中生效，因为被export了</li><li><code>PS1</code>：设置shell中提示</li></ul></li><li>预定义变量<ul><li><code>$?</code>：上一条命令是否执行成功，成功的话返回0</li><li><code>$$</code>：返回当前shell的PID</li><li><code>$0</code>：当前执行的程序</li></ul></li><li>位置变量<ul><li><code>$1</code>….<code>$n</code>：特别注意的是当大于等于10时，必须要写成<code>${10}...${xx}</code></li><li>如果想要给位置变量设置默认值可以用<code>${1-xx}</code>，<code>xx</code>就是设置的默认值</li></ul></li></ul><h4 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h4><p>所有用户都可用的环境变量保存在：</p><ul><li>/etc/profile</li><li>/etc/profile.d</li><li>/etc/bashrc</li></ul><p>用户自定义的环境变量：</p><ul><li>~/.bashrc</li><li>~/.bash_profile</li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li>定义数组<ul><li><code>IPTS=(1 2 3 4)</code></li></ul></li><li>显示所有元素<ul><li><code>echo ${IPTS[@]}</code></li></ul></li><li>显示长度<ul><li><code>echo ${#IPTS[@]}</code></li></ul></li><li>获取第一个元素<ul><li><code>echo ${IPTS[0]}</code></li></ul></li></ul><h4 id="转义与引用"><a href="#转义与引用" class="headerlink" title="转义与引用"></a>转义与引用</h4><p>注意：单引号`是不对特殊字符进行解释，双引号”会对特殊字符进行解释</p><pre class="line-numbers language-bash"><code class="language-bash">➜ <span class="token keyword">echo</span> <span class="token string">'<span class="token variable">$a</span>'</span><span class="token variable">$a</span>➜ <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span>"</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反引号`可以获取命令执行的结果</p><pre class="line-numbers language-bash"><code class="language-bash">➜ num1<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> 4 + 5<span class="token variable">`</span></span>➜ <span class="token keyword">echo</span> <span class="token variable">$num1</span>9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>复制运算符</li><li>算数运算符<ul><li><code>expr 4 + 5</code>：只能支持整数</li><li><code>((4+5))</code>，((a=9))，((a++))：是let的简化方式</li></ul></li></ul><h4 id="特殊符号大全"><a href="#特殊符号大全" class="headerlink" title="特殊符号大全"></a>特殊符号大全</h4><ul><li><p><code>$()</code>和反引号的作用一样，里面包含需要执行的命令</p></li><li><p><code>()</code>会创建一个新的shell</p></li><li><p><code>[]</code>是<code>test</code>命令的简写</p><pre class="line-numbers language-bash"><code class="language-bash">➜ <span class="token punctuation">[</span><span class="token punctuation">[</span> 5 <span class="token operator">&lt;</span> 4 <span class="token punctuation">]</span><span class="token punctuation">]</span>➜ <span class="token keyword">echo</span> <span class="token variable">$?</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>{}输出范围和快速操作</p><pre class="line-numbers language-bash"><code class="language-bash">➜ <span class="token keyword">echo</span> <span class="token punctuation">{</span>0<span class="token punctuation">..</span>9<span class="token punctuation">}</span>0 1 2 3 4 5 6 7 8 9<span class="token comment" spellcheck="true"># mv 1.sh 1.sh.bak</span>➜ <span class="token function">mv</span> 1.sh<span class="token punctuation">{</span>,.bak<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>;会确保上一条命令执行完在执行下一条</p></li><li><p>:类似于python中的pass</p></li></ul><h4 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h4><ul><li>退出程序命令<ul><li>exit：会返回上一条命令的成功与否</li><li>exit 10：返回值10，非0则是不正常退出</li></ul></li><li>test命令可以用来检查文件或者比较值<ul><li>test可以做一下测试<ul><li>文件测试</li><li>整数比较测试</li><li>字符串测试</li></ul></li><li>test测试语句可以简化为[]符号</li><li>[]还有扩展写法[[]]支持&amp;&amp;、||等</li></ul></li></ul><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">==</span> <span class="token string">"start"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> start..."</span><span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">==</span> <span class="token string">"stop"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> stop..."</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Usage: <span class="token variable">$0</span> {start|stop}"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>     <span class="token string">"start"</span> <span class="token operator">|</span> <span class="token string">"START"</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> start..."</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token string">"stop"</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> stop..."</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"Usage: <span class="token variable">$0</span> {start|stop}"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> filename <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> *.mp3<span class="token variable">)</span></span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token function">mv</span> <span class="token variable">$filename</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $filename .mp3<span class="token variable">)</span></span>.mp4<span class="token keyword">done</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">))</span></span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>n<span class="token operator">=</span>1<span class="token comment" spellcheck="true"># [[ $n &lt; 10 ]] 不能用于条件判断</span><span class="token keyword">while</span> <span class="token punctuation">[</span>  <span class="token variable">$n</span> -lt 10 <span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$n</span>    <span class="token variable"><span class="token punctuation">((</span>n<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> filename <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> *.mp4<span class="token variable">)</span></span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -x <span class="token variable">$filename</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token variable">$filename</span> <span class="token punctuation">;</span> <span class="token keyword">break</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环处理位置参数"><a href="#循环处理位置参数" class="headerlink" title="循环处理位置参数"></a>循环处理位置参数</h4><p><code>$#</code>：位置参数的数量</p><p><code>$*</code>：所有的位置参数</p><p><code>$0</code>：脚本名称</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># for</span><span class="token keyword">for</span> args <span class="token keyword">in</span> <span class="token variable">$*</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$args</span>"</span> <span class="token operator">=</span> <span class="token string">"help"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$args</span>"</span> <span class="token string">"<span class="token variable">$args</span>"</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token comment" spellcheck="true"># while</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$#</span>"</span> -ge 1 <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"help"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token string">"<span class="token variable">$1</span>"</span>    <span class="token keyword">fi</span>    <span class="token function">shift</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p><code>local</code>：声明函数内变量</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> checkpid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    local i    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$*</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token punctuation">[</span> -d <span class="token string">"/proc/<span class="token variable">$i</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">return</span> 0    <span class="token keyword">done</span>    <span class="token keyword">return</span> 1<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="脚本控制"><a href="#脚本控制" class="headerlink" title="脚本控制"></a>脚本控制</h4><p>fork炸弹</p><p><code>.(){.|.&amp;};.</code></p><p>普通用户创建的线程数是收到控制的，可以通过<code>ulimit -a</code>控制</p><h4 id="捕获信号"><a href="#捕获信号" class="headerlink" title="捕获信号"></a>捕获信号</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># kill -l</span>1<span class="token punctuation">)</span> SIGHUP     2<span class="token punctuation">)</span> SIGINT     3<span class="token punctuation">)</span> SIGQUIT     4<span class="token punctuation">)</span> SIGILL     5<span class="token punctuation">)</span> SIGTRAP6<span class="token punctuation">)</span> SIGABRT     7<span class="token punctuation">)</span> SIGBUS     8<span class="token punctuation">)</span> SIGFPE     9<span class="token punctuation">)</span> SIGKILL    10<span class="token punctuation">)</span> SIGUSR111<span class="token punctuation">)</span> SIGSEGV    12<span class="token punctuation">)</span> SIGUSR2    13<span class="token punctuation">)</span> SIGPIPE    14<span class="token punctuation">)</span> SIGALRM    15<span class="token punctuation">)</span> SIGTERM16<span class="token punctuation">)</span> SIGSTKFLT    17<span class="token punctuation">)</span> SIGCHLD    18<span class="token punctuation">)</span> SIGCONT    19<span class="token punctuation">)</span> SIGSTOP    20<span class="token punctuation">)</span> SIGTSTP21<span class="token punctuation">)</span> SIGTTIN    22<span class="token punctuation">)</span> SIGTTOU    23<span class="token punctuation">)</span> SIGURG    24<span class="token punctuation">)</span> SIGXCPU    25<span class="token punctuation">)</span> SIGXFSZ26<span class="token punctuation">)</span> SIGVTALRM    27<span class="token punctuation">)</span> SIGPROF    28<span class="token punctuation">)</span> SIGWINCH    29<span class="token punctuation">)</span> SIGIO    30<span class="token punctuation">)</span> SIGPWR31<span class="token punctuation">)</span> SIGSYS    34<span class="token punctuation">)</span> SIGRTMIN    35<span class="token punctuation">)</span> SIGRTMIN+1    36<span class="token punctuation">)</span> SIGRTMIN+2    37<span class="token punctuation">)</span> SIGRTMIN+338<span class="token punctuation">)</span> SIGRTMIN+4    39<span class="token punctuation">)</span> SIGRTMIN+5    40<span class="token punctuation">)</span> SIGRTMIN+6    41<span class="token punctuation">)</span> SIGRTMIN+7    42<span class="token punctuation">)</span> SIGRTMIN+843<span class="token punctuation">)</span> SIGRTMIN+9    44<span class="token punctuation">)</span> SIGRTMIN+10    45<span class="token punctuation">)</span> SIGRTMIN+11    46<span class="token punctuation">)</span> SIGRTMIN+12    47<span class="token punctuation">)</span> SIGRTMIN+1348<span class="token punctuation">)</span> SIGRTMIN+14    49<span class="token punctuation">)</span> SIGRTMIN+15    50<span class="token punctuation">)</span> SIGRTMAX-14    51<span class="token punctuation">)</span> SIGRTMAX-13    52<span class="token punctuation">)</span> SIGRTMAX-1253<span class="token punctuation">)</span> SIGRTMAX-11    54<span class="token punctuation">)</span> SIGRTMAX-10    55<span class="token punctuation">)</span> SIGRTMAX-9    56<span class="token punctuation">)</span> SIGRTMAX-8    57<span class="token punctuation">)</span> SIGRTMAX-758<span class="token punctuation">)</span> SIGRTMAX-6    59<span class="token punctuation">)</span> SIGRTMAX-5    60<span class="token punctuation">)</span> SIGRTMAX-4    61<span class="token punctuation">)</span> SIGRTMAX-3    62<span class="token punctuation">)</span> SIGRTMAX-263<span class="token punctuation">)</span> SIGRTMAX-1    64<span class="token punctuation">)</span> SIGRTMAX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">trap</span> <span class="token string">"echo 15"</span> 15<span class="token keyword">echo</span> $$<span class="token keyword">while</span> <span class="token keyword">:</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">:</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><p>单次任务用<code>at</code>，多次任务用<code>crontab</code></p><h4 id="文件加锁"><a href="#文件加锁" class="headerlink" title="文件加锁"></a>文件加锁</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 加锁</span>flock -xn <span class="token string">"/tmp/f.lock"</span> -c <span class="token string">"/tmp/1.sh"</span><span class="token comment" spellcheck="true"># 另外一个地方执行该脚本时就会直接退出</span>flock -xn <span class="token string">"/tmp/f.lock"</span> -c <span class="token string">"/tmp/1.sh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h3><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><p>grep 后面可以接正则元字符</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> sdf.*$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="find演示"><a href="#find演示" class="headerlink" title="find演示"></a>find演示</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> /etc -name pa*<span class="token function">find</span> /etc -regex .*wd$<span class="token function">find</span> *.txt -exec <span class="token function">rm</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Sed-替换"><a href="#Sed-替换" class="headerlink" title="Sed 替换"></a>Sed 替换</h4><p>sed默认只替换每行的第一个</p><p>sed的基本工作方式：</p><ul><li>将文件按行读取到内存中</li><li>使用sed的每个脚本对该行进行操作</li><li>处理完成后输出改行</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'a/lod/new/'</span> filename<span class="token comment" spellcheck="true"># 如果要替换\，可以使用别的分隔符</span><span class="token function">sed</span> <span class="token string">'s!/!abc!'</span> filename<span class="token comment" spellcheck="true"># 执行多个命令</span><span class="token function">sed</span> -e <span class="token string">'s/a/aa/'</span> -e <span class="token string">'s/aa/bb/'</span> afil<span class="token function">sed</span> <span class="token string">'s/a/aa/;s/aa/bb/'</span> afile<span class="token comment" spellcheck="true"># 将替换后的内容写入到原始文件</span><span class="token function">sed</span> -i <span class="token string">'s/a/aa/;s/aa/bb/'</span> afile<span class="token comment" spellcheck="true"># 支持元字符</span><span class="token function">head</span> -5 /etc/passwd <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/s*bin//'</span><span class="token comment" spellcheck="true"># 支持回调，源文件内容：axyzb</span><span class="token comment" spellcheck="true"># 扩展元字符使用 -r 参数</span>root@4ebe31ff7a18:/tmp<span class="token comment" spellcheck="true"># sed -r 's/(a.*b)/\1:\1/' cfile</span>axyzb:axyzb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sed替换指令加强版"><a href="#sed替换指令加强版" class="headerlink" title="sed替换指令加强版"></a>sed替换指令加强版</h4><p>标志位</p><p>s/old/new/标志位</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 全局替换</span>s/old/new/g<span class="token comment" spellcheck="true"># 替换前两次</span>s/old/new/2<span class="token comment" spellcheck="true"># 只输出替换成功的行, -n 不输出行， p 输出替换成功的行</span><span class="token function">sed</span> -n <span class="token string">'s/root/123/p'</span><span class="token comment" spellcheck="true"># 将替换成功的行写入别的文件</span><span class="token function">sed</span> -n <span class="token string">'s/root/123/w a.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>寻址</p><p>/正则表达式/s/old/new/g</p><p>行号s/old/new/g</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 从1-6行进行替换</span><span class="token function">head</span> -6 /etc/passwd <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'1,6s/games/!!!!!!!!/'</span><span class="token comment" spellcheck="true"># 匹配root行，进行替换</span><span class="token function">head</span> -6 /etc/passwd <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'/root/s/bash/!!!!!!!!/'</span><span class="token comment" spellcheck="true"># 多条命令</span><span class="token function">sed</span> /正则/<span class="token punctuation">{</span>s/old/new/<span class="token punctuation">;</span>s/old/new/<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本文件</p><p>文件里写正常的sed命令</p><pre class="line-numbers language-bahs"><code class="language-bahs">sed -f sedscript filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB复制集群搭建</title>
      <link href="/2020/09/03/mongo-replice/"/>
      <url>/2020/09/03/mongo-replice/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB复制集原理及搭建"><a href="#MongoDB复制集原理及搭建" class="headerlink" title="MongoDB复制集原理及搭建"></a>MongoDB复制集原理及搭建</h2><p>在学习之前先要了解一下，MongoDB的复制集有哪些好处，为什么我们要用到复制集</p><p>复制集群的主要意义是在于实现服务的高可用能够提供不间断的数据支持，MongoDB本身是支持这种特性的。不需要第三方的插件。要实现复制集的高可用，就必须要依赖以下两个功能：</p><ol><li>能够在数据写入时快速的将数据同步到另外的节点</li><li>当写入的节点异常时，集群能够自动选举出一个新的替代节点</li></ol><h3 id="复制集的作用"><a href="#复制集的作用" class="headerlink" title="复制集的作用"></a>复制集的作用</h3><p>复制集群除了能够实现服务的高可用外，还提供了其他的附加作用</p><ol><li>数据分发：将数据从一个地区同步到另外一个地区，每个程序就可以访问就近的数据节点，避免访问异地数据库，减少延迟</li><li>读写分离： 不同类型的操作会在不同的节点上进行，避免单个服务器压力过大</li><li>异地容灾： 能够在数据中心故障的时候切换到异地</li></ol><h3 id="复制集的组成"><a href="#复制集的组成" class="headerlink" title="复制集的组成"></a>复制集的组成</h3><p>一个典型的复制集群至少要有三个以上的节点组成：</p><p><img src="./1.jpg" alt></p><p>主节点：负责写入数据和选举投票</p><p>从节点：复制主节点上的数据和选取投票</p><blockquote><p>MongoDB不在建议使用投票节点</p></blockquote><h3 id="复制集中数据是如何复制的"><a href="#复制集中数据是如何复制的" class="headerlink" title="复制集中数据是如何复制的"></a>复制集中数据是如何复制的</h3><p>在mongo中对数据的操作到达主节点的时候都会被记录下来，这些记录就是<code>oplog</code>。从节点通过在主节点上打开一个tailable游标不断获取主节点上新的<code>oplog</code>，并在自己的节点上进行回放，以此来保持和主节点的数据同步</p><p><img src="./2.jpg" alt></p><h3 id="通过选取完成故障恢复"><a href="#通过选取完成故障恢复" class="headerlink" title="通过选取完成故障恢复"></a>通过选取完成故障恢复</h3><p><img src="./3.jpg" alt></p><p>关于MongoDB的复制集我们要知道一下几点：</p><ol><li>具有投票权的节点两两之间互相发送心跳</li><li>当5次未收到心跳包时判断为节点失联</li><li>如果失联的是主节点，则会进行选举</li><li>如果失联的是从节点，则不会进行选举</li><li>选举基于RAFT一致性算法实现，选举的成功必要条件是大多数节点存活</li><li>复制集最多有50个节点，最多有7个投票节点</li></ol><h3 id="影响选举的主要因素"><a href="#影响选举的主要因素" class="headerlink" title="影响选举的主要因素"></a>影响选举的主要因素</h3><ol><li>必须大多数节点存活</li><li>被选举为主节点的节点必须：<ol><li>能够与大多数节点建立连接</li><li>具有教新的<code>oplog</code></li><li>具有高优先级（如果设置的话）</li></ol></li></ol><h3 id="常见选项"><a href="#常见选项" class="headerlink" title="常见选项"></a>常见选项</h3><ul><li><code>v</code>：是否具有投票权</li><li><code>priority</code>：优先级，优先级越高的节点优先成为主节点，优先级为0则不会成为主节点</li><li><code>hidden</code>：复制数据，对应用不可见。可以拥有投票权，但是优先级必须设置为0</li><li><code>slaveDelay</code>：复制n秒之前的数据，保持与主节点的时间差</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>集群当中的每个机器都需要同样的配置，因为不知道什么时候哪个节点会成为主节点</li><li>每个机器上的软件版本必须一致</li><li>增加节点不会增强写性能</li></ul><h3 id="搭建复制集Demo"><a href="#搭建复制集Demo" class="headerlink" title="搭建复制集Demo"></a>搭建复制集Demo</h3><p>下面在Mac上模拟一个具有三个节点的复制集demo</p><p>先创建三个目录，分别存放三个mongo进程需要的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#  qaf in ~/data [22:31:23]</span>$ <span class="token function">mkdir</span> -p ~/data/db<span class="token punctuation">{</span>1,2,3<span class="token punctuation">}</span><span class="token comment" spellcheck="true">#  qaf in ~/data [22:31:32]</span>$ <span class="token function">ls</span>db1 db2 db3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写配置文件<code>mongod.conf</code>，修改其中的参数，分别放到db1/db2/db3中</p><pre class="line-numbers language-text"><code class="language-text">systemLog:  destination: file  path: /data/db1/mongod.log  logAppend: truestorage:  dbPath: /data/db1net:  bindIp: 0.0.0.0   port: 28017 replication:  replSetName: rs0  # 复制集名processManagement:  fork: true     # 在后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动三个mongo进程</p><pre class="line-numbers language-bash"><code class="language-bash">$ mongod -f db1/mongod.conf2020-03-16T23:24:03.120+0800 I CONTROL  <span class="token punctuation">[</span>main<span class="token punctuation">]</span> Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols <span class="token string">'none'</span>about to fork child process, waiting <span class="token keyword">until</span> server is ready <span class="token keyword">for</span> connections.forked process: 93736child process started successfully, parent exiting<span class="token comment" spellcheck="true">#  qaf in ~/data [23:24:04]</span>$ mongod -f db2/mongod.conf2020-03-16T23:24:09.914+0800 I CONTROL  <span class="token punctuation">[</span>main<span class="token punctuation">]</span> Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols <span class="token string">'none'</span>about to fork child process, waiting <span class="token keyword">until</span> server is ready <span class="token keyword">for</span> connections.forked process: 93767child process started successfully, parent exiting<span class="token comment" spellcheck="true">#  qaf in ~/data [23:24:10]</span>$ mongod -f db3/mongod.conf2020-03-16T23:24:15.917+0800 I CONTROL  <span class="token punctuation">[</span>main<span class="token punctuation">]</span> Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols <span class="token string">'none'</span>about to fork child process, waiting <span class="token keyword">until</span> server is ready <span class="token keyword">for</span> connections.forked process: 93801child process started successfully, parent exiting<span class="token comment" spellcheck="true">#  qaf in ~/data [23:24:16]</span>$ <span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> mongod  501 93736     1   0 11:24PM ??         0:01.06 mongod -f db1/mongod.conf  501 93767     1   0 11:24PM ??         0:00.79 mongod -f db2/mongod.conf  501 93801     1   0 11:24PM ??         0:00.76 mongod -f db3/mongod.conf  501 93852 88919   0 11:25PM ttys005    0:00.00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto --exclude-dir<span class="token operator">=</span>.bzr --exclude-dir<span class="token operator">=</span>CVS --exclude-dir<span class="token operator">=</span>.git --exclude-dir<span class="token operator">=</span>.hg --exclude-dir<span class="token operator">=</span>.svn mongod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在相当于是有了三个运行mongo的节点，但是他们都是独立的并没有形成一个集群，下面就配置一下，然他们成为一个复制集</p><p>初始化</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">></span> rs.initiate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"info2"</span> <span class="token keyword">:</span> <span class="token string">"no configuration specified. Using a default configuration for the set"</span>,    <span class="token string">"me"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28017"</span>,    <span class="token string">"ok"</span> <span class="token keyword">:</span> 1,    <span class="token string">"operationTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372633, 1<span class="token punctuation">)</span>,    <span class="token string">"<span class="token variable">$clusterTime</span>"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"clusterTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372633, 1<span class="token punctuation">)</span>,        <span class="token string">"signature"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"hash"</span> <span class="token keyword">:</span> BinData<span class="token punctuation">(</span>0,<span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>,            <span class="token string">"keyId"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化之后会看到命令行提示符已经变成了 rs0,这是集群的名字，SECONDARY 后按回车会看到 PRIMARY，表示这个节点已经从从节点变为了主节点</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:SECONDARY<span class="token operator">></span>rs0:PRIMARY<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过status命令可以看到整个复制集群的信息，members 中显示只有一个节点</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:PRIMARY<span class="token operator">></span> rs.status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"set"</span> <span class="token keyword">:</span> <span class="token string">"rs0"</span>,    <span class="token string">"date"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:36:31.844Z"</span><span class="token punctuation">)</span>,    <span class="token string">"myState"</span> <span class="token keyword">:</span> 1,    <span class="token string">"term"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>,    <span class="token string">"syncingTo"</span> <span class="token keyword">:</span> <span class="token string">""</span>,    <span class="token string">"syncSourceHost"</span> <span class="token keyword">:</span> <span class="token string">""</span>,    <span class="token string">"syncSourceId"</span> <span class="token keyword">:</span> -1,    <span class="token string">"heartbeatIntervalMillis"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>2000<span class="token punctuation">)</span>,    <span class="token string">"optimes"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"lastCommittedOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>,        <span class="token string">"readConcernMajorityOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>,        <span class="token string">"appliedOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>,        <span class="token string">"durableOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token string">"lastStableCheckpointTimestamp"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372935, 1<span class="token punctuation">)</span>,    <span class="token string">"members"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token keyword">:</span> 0,            <span class="token string">"name"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28017"</span>,            <span class="token string">"health"</span> <span class="token keyword">:</span> 1,            <span class="token string">"state"</span> <span class="token keyword">:</span> 1,            <span class="token string">"stateStr"</span> <span class="token keyword">:</span> <span class="token string">"PRIMARY"</span>,            <span class="token string">"uptime"</span> <span class="token keyword">:</span> 748,            <span class="token string">"optime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,                <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>            <span class="token punctuation">}</span>,            <span class="token string">"optimeDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:36:25Z"</span><span class="token punctuation">)</span>,            <span class="token string">"syncingTo"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"syncSourceHost"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"syncSourceId"</span> <span class="token keyword">:</span> -1,            <span class="token string">"infoMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"electionTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372633, 2<span class="token punctuation">)</span>,            <span class="token string">"electionDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:30:33Z"</span><span class="token punctuation">)</span>,            <span class="token string">"configVersion"</span> <span class="token keyword">:</span> 1,            <span class="token string">"self"</span> <span class="token keyword">:</span> true,            <span class="token string">"lastHeartbeatMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span>,    <span class="token string">"ok"</span> <span class="token keyword">:</span> 1,    <span class="token string">"operationTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,    <span class="token string">"<span class="token variable">$clusterTime</span>"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"clusterTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,        <span class="token string">"signature"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"hash"</span> <span class="token keyword">:</span> BinData<span class="token punctuation">(</span>0,<span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>,            <span class="token string">"keyId"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以下命令，添加其余的两个节点，其中<code>qaf.local</code>是主机名，可以通过<code>hostname</code>获得</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:PRIMARY<span class="token operator">></span> rs.add<span class="token punctuation">(</span><span class="token string">"qaf.local:28018"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"ok"</span> <span class="token keyword">:</span> 1,    <span class="token string">"operationTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373330, 1<span class="token punctuation">)</span>,    <span class="token string">"<span class="token variable">$clusterTime</span>"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"clusterTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373330, 1<span class="token punctuation">)</span>,        <span class="token string">"signature"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"hash"</span> <span class="token keyword">:</span> BinData<span class="token punctuation">(</span>0,<span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>,            <span class="token string">"keyId"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>rs0:PRIMARY<span class="token operator">></span> rs.add<span class="token punctuation">(</span><span class="token string">"qaf.local:28019"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"ok"</span> <span class="token keyword">:</span> 1,    <span class="token string">"operationTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373335, 1<span class="token punctuation">)</span>,    <span class="token string">"<span class="token variable">$clusterTime</span>"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"clusterTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373335, 1<span class="token punctuation">)</span>,        <span class="token string">"signature"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"hash"</span> <span class="token keyword">:</span> BinData<span class="token punctuation">(</span>0,<span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>,            <span class="token string">"keyId"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在查看当前集群状态，就可以看到其余两个节点也加入进来了</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:PRIMARY<span class="token operator">></span> rs.status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"set"</span> <span class="token keyword">:</span> <span class="token string">"rs0"</span>,    <span class="token string">"date"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:39.164Z"</span><span class="token punctuation">)</span>,    <span class="token string">"myState"</span> <span class="token keyword">:</span> 1,    <span class="token string">"term"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>,    <span class="token string">"syncingTo"</span> <span class="token keyword">:</span> <span class="token string">""</span>,    <span class="token string">"syncSourceHost"</span> <span class="token keyword">:</span> <span class="token string">""</span>,    <span class="token string">"syncSourceId"</span> <span class="token keyword">:</span> -1,    <span class="token string">"heartbeatIntervalMillis"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>2000<span class="token punctuation">)</span>,    <span class="token string">"optimes"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"lastCommittedOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>,        <span class="token string">"readConcernMajorityOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>,        <span class="token string">"appliedOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>,        <span class="token string">"durableOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token string">"lastStableCheckpointTimestamp"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,    <span class="token string">"members"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token keyword">:</span> 0,            <span class="token string">"name"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28017"</span>,            <span class="token string">"health"</span> <span class="token keyword">:</span> 1,            <span class="token string">"state"</span> <span class="token keyword">:</span> 1,            <span class="token string">"stateStr"</span> <span class="token keyword">:</span> <span class="token string">"PRIMARY"</span>,            <span class="token string">"uptime"</span> <span class="token keyword">:</span> 1176,            <span class="token string">"optime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,                <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>            <span class="token punctuation">}</span>,            <span class="token string">"optimeDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:36Z"</span><span class="token punctuation">)</span>,            <span class="token string">"syncingTo"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"syncSourceHost"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"syncSourceId"</span> <span class="token keyword">:</span> -1,            <span class="token string">"infoMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"electionTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372633, 2<span class="token punctuation">)</span>,            <span class="token string">"electionDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:30:33Z"</span><span class="token punctuation">)</span>,            <span class="token string">"configVersion"</span> <span class="token keyword">:</span> 3,            <span class="token string">"self"</span> <span class="token keyword">:</span> true,            <span class="token string">"lastHeartbeatMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token keyword">:</span> 1,            <span class="token string">"name"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28018"</span>,            <span class="token string">"health"</span> <span class="token keyword">:</span> 1,            <span class="token string">"state"</span> <span class="token keyword">:</span> 2,            <span class="token string">"stateStr"</span> <span class="token keyword">:</span> <span class="token string">"SECONDARY"</span>,            <span class="token string">"uptime"</span> <span class="token keyword">:</span> 88,            <span class="token string">"optime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,                <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>            <span class="token punctuation">}</span>,            <span class="token string">"optimeDurable"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,                <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>            <span class="token punctuation">}</span>,            <span class="token string">"optimeDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:36Z"</span><span class="token punctuation">)</span>,            <span class="token string">"optimeDurableDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:36Z"</span><span class="token punctuation">)</span>,            <span class="token string">"lastHeartbeat"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:38.104Z"</span><span class="token punctuation">)</span>,            <span class="token string">"lastHeartbeatRecv"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:38.135Z"</span><span class="token punctuation">)</span>,            <span class="token string">"pingMs"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>,            <span class="token string">"lastHeartbeatMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"syncingTo"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28017"</span>,            <span class="token string">"syncSourceHost"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28017"</span>,            <span class="token string">"syncSourceId"</span> <span class="token keyword">:</span> 0,            <span class="token string">"infoMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"configVersion"</span> <span class="token keyword">:</span> 3        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token keyword">:</span> 2,            <span class="token string">"name"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28019"</span>,            <span class="token string">"health"</span> <span class="token keyword">:</span> 1,            <span class="token string">"state"</span> <span class="token keyword">:</span> 2,            <span class="token string">"stateStr"</span> <span class="token keyword">:</span> <span class="token string">"SECONDARY"</span>,            <span class="token string">"uptime"</span> <span class="token keyword">:</span> 83,            <span class="token string">"optime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,                <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>            <span class="token punctuation">}</span>,            <span class="token string">"optimeDurable"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,                <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>            <span class="token punctuation">}</span>,            <span class="token string">"optimeDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:36Z"</span><span class="token punctuation">)</span>,            <span class="token string">"optimeDurableDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:36Z"</span><span class="token punctuation">)</span>,            <span class="token string">"lastHeartbeat"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:38.104Z"</span><span class="token punctuation">)</span>,            <span class="token string">"lastHeartbeatRecv"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:38.882Z"</span><span class="token punctuation">)</span>,            <span class="token string">"pingMs"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>,            <span class="token string">"lastHeartbeatMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"syncingTo"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28018"</span>,            <span class="token string">"syncSourceHost"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28018"</span>,            <span class="token string">"syncSourceId"</span> <span class="token keyword">:</span> 1,            <span class="token string">"infoMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"configVersion"</span> <span class="token keyword">:</span> 3        <span class="token punctuation">}</span>    <span class="token punctuation">]</span>,    <span class="token string">"ok"</span> <span class="token keyword">:</span> 1,    <span class="token string">"operationTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,    <span class="token string">"<span class="token variable">$clusterTime</span>"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"clusterTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,        <span class="token string">"signature"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"hash"</span> <span class="token keyword">:</span> BinData<span class="token punctuation">(</span>0,<span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>,            <span class="token string">"keyId"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面通过在master节点上写数据，在从节点上读数据来验证下集群的功能</p><p>首先在master节点上写入一条数据</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:PRIMARY<span class="token operator">></span> use <span class="token function">test</span>switched to db <span class="token function">test</span>rs0:PRIMARY<span class="token operator">></span> db.user.insertOne<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"user"</span><span class="token keyword">:</span><span class="token string">"LiMi"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"acknowledged"</span> <span class="token keyword">:</span> true,    <span class="token string">"insertedId"</span> <span class="token keyword">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"5e6f9f85fe71466240a3ee45"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在从节点上读数据</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mongo --port 28019</span>rs0:SECONDARY<span class="token operator">></span> db.test.find<span class="token punctuation">(</span><span class="token punctuation">)</span>Error: error: <span class="token punctuation">{</span>    <span class="token string">"operationTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373686, 1<span class="token punctuation">)</span>,    <span class="token string">"ok"</span> <span class="token keyword">:</span> 0,    <span class="token string">"errmsg"</span> <span class="token keyword">:</span> <span class="token string">"not master and slaveOk=false"</span>,    <span class="token string">"code"</span> <span class="token keyword">:</span> 13435,    <span class="token string">"codeName"</span> <span class="token keyword">:</span> <span class="token string">"NotMasterNoSlaveOk"</span>,    <span class="token string">"<span class="token variable">$clusterTime</span>"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"clusterTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373686, 1<span class="token punctuation">)</span>,        <span class="token string">"signature"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"hash"</span> <span class="token keyword">:</span> BinData<span class="token punctuation">(</span>0,<span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>,            <span class="token string">"keyId"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会发现报错了。这是因为从节点默认是不能读取数据的，我们设置从节点可以读取数据</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:SECONDARY<span class="token operator">></span> rs.slaveOk<span class="token punctuation">(</span><span class="token punctuation">)</span>rs0:SECONDARY<span class="token operator">></span> db.user.find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token keyword">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"5e6fa04bfe71466240a3ee46"</span><span class="token punctuation">)</span>, <span class="token string">"user"</span> <span class="token keyword">:</span> <span class="token string">"LiMi"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从节点会从主节点产生的<code>oplog</code>中进行回放，把数据同步到从节点。所以也能从从节点中读取数据了</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><code>oplog</code>是一个capped collection，是有大小上限的，如果超过了上限，就会删除旧的数据，增加新的数据</p><blockquote><p>在MongoDB 4.0+中，oplog会超过设定的大小，避免删除未被从节点回放的oplog</p></blockquote><p><code>oplog</code>是幂等性的，既一条记录不管被重放多少次，数据库中的数据是不会变的</p><p>查看<code>oplog</code>的信息</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:PRIMARY<span class="token operator">></span> rs.printReplicationInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>configured oplog size:   192MBlog length start to end: 80450secs <span class="token punctuation">(</span>22.35hrs<span class="token punctuation">)</span>oplog first event time:  Mon Mar 16 2020 23:30:33 GMT+0800 <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>oplog last event time:   Tue Mar 17 2020 21:51:23 GMT+0800 <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>now:                     Tue Mar 17 2020 21:51:27 GMT+0800 <span class="token punctuation">(</span>CST<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>oplog</code>回放的情况</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:PRIMARY<span class="token operator">></span> db.printSlaveReplicationInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>source: qaf.local:28018    syncedTo: Tue Mar 17 2020 21:52:33 GMT+0800 <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>    0 secs <span class="token punctuation">(</span>0 hrs<span class="token punctuation">)</span> behind the primarysource: qaf.local:28019    syncedTo: Tue Mar 17 2020 21:52:33 GMT+0800 <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>    0 secs <span class="token punctuation">(</span>0 hrs<span class="token punctuation">)</span> behind the primary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://time.geekbang.org/course/intro/100040001" target="_blank" rel="noopener">https://time.geekbang.org/course/intro/100040001</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsync 学习</title>
      <link href="/2020/09/02/rsync/"/>
      <url>/2020/09/02/rsync/</url>
      
        <content type="html"><![CDATA[<h2 id="rsync-的一些常用用法"><a href="#rsync-的一些常用用法" class="headerlink" title="rsync 的一些常用用法"></a>rsync 的一些常用用法</h2><p>rsync是Linux里常用的一个用于文件同步的命令。</p><p>可以替代<code>mv</code>和<code>cp</code>命令，也可以和远端主机同步文件（rsync的全称是 remote sync）。最主要的特性就是每次只会传输文件变动的部分，而不是每次都全量同步。</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><h4 id="a-参数"><a href="#a-参数" class="headerlink" title="-a 参数"></a>-a 参数</h4><p><code>-a</code>参数有两个功能：</p><ul><li>会遍历源文件，将包含子目录</li><li>会拷贝文件的元信息，比如文件大小，修改时间等</li></ul><p>rsync默认是通过文件大小和修改时间判断文件是否进行过修改</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -a <span class="token function">source</span> destination<span class="token function">rsync</span> -a source/ destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面这两个命令的不同之处是在于，第二条命令会把source下面的文件拷贝到destionation中，而不是将source目录拷贝到destination中</p><h4 id="n-参数"><a href="#n-参数" class="headerlink" title="-n 参数"></a>-n 参数</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -anv <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-n</code> 并不会真正的执行命令，而是模拟执行的结果</p><p><code>-v</code>会把模拟执行的结果输出到终端</p><h4 id="–delete-参数"><a href="#–delete-参数" class="headerlink" title="–delete 参数"></a>–delete 参数</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av --delete <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下，rsync只确保将源目录中的所有内容拷贝到目标目录中，并不会要求两个目录的文件完全相同。</p><p><code>--delete</code>参数会确保两个目录中的内容相同，如果目标目录中有多余的文件则会删除</p><h4 id="–exclude-参数"><a href="#–exclude-参数" class="headerlink" title="–exclude 参数"></a>–exclude 参数</h4><p><code>--exclude</code>支持同步文件时排除某些文件</p><ol><li><p>不同步<code>txt</code>文件</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">rsync</span> -av --exclude<span class="token operator">=</span><span class="token string">"*.txt"</span> <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>rsync默认会同步<code>.</code>开头的文件，下面的命令可以排除以<code>.</code>开头的文件</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">rsync</span> -av --exclude<span class="token operator">=</span><span class="token string">".*"</span> <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>多个文件需要排除</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">rsync</span> -av --exclude<span class="token operator">=</span><span class="token string">".*"</span> --exclude<span class="token operator">=</span><span class="token string">"*.txt"</span> <span class="token function">source</span> destination <span class="token function">rsync</span> -av --exclude<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'.*'</span>, <span class="token string">'*.txt'</span><span class="token punctuation">}</span> <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果需要排除某个目录下的所有文件，而保留目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av --exclude<span class="token operator">=</span><span class="token string">"dir1/*"</span> <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="–include-参数"><a href="#–include-参数" class="headerlink" title="–include 参数"></a>–include 参数</h4><p><code>--include</code>指定必须要同步的文件</p><p>通常和<code>--exclude</code>参数同时使用</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av --include<span class="token operator">=</span><span class="token string">"*.txt"</span> --exclude<span class="token operator">=</span><span class="token string">"*"</span> <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="–link-dest-参数"><a href="#–link-dest-参数" class="headerlink" title="–link-dest 参数"></a>–link-dest 参数</h4><p><code>--link-dest</code>用来指定同步文件时的基准目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av --delete --link-dest<span class="token operator">=</span><span class="token punctuation">..</span>/path source/ destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果基准目录相对路径，并且和source、destination目录是同一级的，需要在目录名前加上<code>../</code></p><p>source目录中的文件会和path中的文件进行比较，只会把更新了的文件拷贝到destination目录中，那些没有更新的文件则会和path中的文件生成硬链接</p><h4 id="–append-参数"><a href="#–append-参数" class="headerlink" title="–append 参数"></a>–append 参数</h4><p><code>--append</code>参数接着文件上次中断的地方继续传输</p><h4 id="–append-verify-参数"><a href="#–append-verify-参数" class="headerlink" title="–append-verify 参数"></a>–append-verify 参数</h4><p>在传输完成时会对文件进行一次校验，如果校验失败，则会重新传输</p><h4 id="–checksum-参数"><a href="#–checksum-参数" class="headerlink" title="–checksum 参数"></a>–checksum 参数</h4><p>默认情况下rsync在文件传输完成后只进行文件大小和修改时间的判断，使用该参数后将使用文件内容的校验和</p><h4 id="m-参数"><a href="#m-参数" class="headerlink" title="-m 参数"></a>-m 参数</h4><p>不同步空目录</p><h4 id="P-参数"><a href="#P-参数" class="headerlink" title="-P 参数"></a>-P 参数</h4><p>是<code>--partial</code>和<code>--progress</code>的结合</p><p>rsync在中途传输失败时，默认会删除已经传输完成的文件。<code>--partial</code>则不会删除文件，下次同步时会再次恢复中断的传输</p><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><ol><li><h4 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av <span class="token function">source</span> username@remote_host:destination<span class="token function">rsync</span> -av username@remote_host:source destination<span class="token function">rsync</span> -av -e <span class="token string">"ssh -o 2222"</span> username@remote_host:source destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果ssh需要有附加的命令需要用<code>-e</code>参数</p></li></ol><p>参考链接：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2020/08/weekly-issue-122.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2020/08/weekly-issue-122.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现无重复数字</title>
      <link href="/2020/07/13/python-random/"/>
      <url>/2020/07/13/python-random/</url>
      
        <content type="html"><![CDATA[<h1 id="Python实现无重复数字"><a href="#Python实现无重复数字" class="headerlink" title="Python实现无重复数字"></a>Python实现无重复数字</h1><p>当我们想要取的一些不重复的数字时，通常我们会想到<code>random.sample</code>方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [5, 1, 0, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是这样只能保证每次运行这行代码时的数字是不重复的，如果要多次运行上面的代码就会有重复的数字出现。</p><p>最先想到的方法就是将每次取到数字都放在一个set内，每次产生新的随机数字时，先判断它是否在这个set内</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> functools<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">scale_time</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    functools<span class="token punctuation">.</span>wraps<span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{end_time - start_time}"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> wrapper@scale_time<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result_set <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>result_set<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">9999</span><span class="token punctuation">:</span>        _data <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        result_set <span class="token operator">=</span> result_set <span class="token operator">|</span> set<span class="token punctuation">(</span>_data<span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6.2531819343566895</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面代码可以看到，这种方式效率是比较低的，越到后面，产生不重复随机数的概率就会越来越低，就需要重试更多的次数</p><p>有没有优化的方式呢？那就是下面要讲的，利用列表来取不重复的随机数，每次取出来的随机数都能保证和之前取出来的不重复</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> functools<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">scale_time</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    functools<span class="token punctuation">.</span>wraps<span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{end_time - start_time}"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> wrapper@scale_time<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result_set <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>result_set<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">9999</span><span class="token punctuation">:</span>        _data <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        result_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>data<span class="token punctuation">[</span>_data<span class="token punctuation">]</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>_data<span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0.027987957000732422</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码会pop原来数组的值，如果要继续优化，可以不pop，而是修改元素的位置</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> functools<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">scale_time</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    functools<span class="token punctuation">.</span>wraps<span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{end_time - start_time}"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> wrapper@scale_time<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result_set <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    _index <span class="token operator">=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>result_set<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">9999</span><span class="token punctuation">:</span>        _data <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _index<span class="token punctuation">)</span>        result_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>data<span class="token punctuation">[</span>_data<span class="token punctuation">]</span><span class="token punctuation">)</span>        _index <span class="token operator">-=</span> <span class="token number">1</span>        data<span class="token punctuation">[</span><span class="token operator">-</span>len<span class="token punctuation">(</span>result_set<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>_data<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>_data<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token operator">-</span>len<span class="token punctuation">(</span>result_set<span class="token punctuation">)</span><span class="token punctuation">]</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0.02704787254333496</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Python3 面向对象编程》笔记 - 第4章 异常捕获</title>
      <link href="/2020/07/02/python-object-4/"/>
      <url>/2020/07/02/python-object-4/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3-面向对象编程笔记"><a href="#Python3-面向对象编程笔记" class="headerlink" title="Python3 面向对象编程笔记"></a>Python3 面向对象编程笔记</h1><h2 id="第4章-异常捕获"><a href="#第4章-异常捕获" class="headerlink" title="第4章 异常捕获"></a>第4章 异常捕获</h2><p>在本章中将学习异常，特殊的错误对象只有在合理的时候才需要特别处理，将会学习：</p><ol><li>如何找到异常出现的原因</li><li>遇到异常时如何恢复</li><li>如何以不同的方式处理不同的异常</li><li>遇到异常时如何清理</li><li>创建新的异常类型</li><li>在控制流中使用异常语法</li></ol><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p>本质上，异常只是一个对象，有很多不同的异常类，但是他们都继承子同一个异常类BaseException。一些常见的异常：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>ZeroDivisionError                         Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-1</span><span class="token operator">-</span><span class="token number">663c7a933a87</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span>ZeroDivisionError<span class="token punctuation">:</span> division by zeroIn <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>IndexError                                Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-3</span><span class="token operator">-</span><span class="token number">7a094246b9ab</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>IndexError<span class="token punctuation">:</span> list index out of rangeIn <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError                                 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-4</span><span class="token operator">-</span>ffe4e6e220bf<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> lst <span class="token operator">+</span> <span class="token number">2</span>TypeError<span class="token punctuation">:</span> can only concatenate list <span class="token punctuation">(</span><span class="token operator">not</span> <span class="token string">"int"</span><span class="token punctuation">)</span> to listIn <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst<span class="token punctuation">.</span>add<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>AttributeError                            Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-5</span><span class="token operator">-</span><span class="token number">50e4efd52cad</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> lst<span class="token punctuation">.</span>addAttributeError<span class="token punctuation">:</span> <span class="token string">'list'</span> object has no attribute <span class="token string">'add'</span>In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token string">'b'</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d<span class="token punctuation">[</span><span class="token string">'df'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>KeyError                                  Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-7</span><span class="token operator">-</span><span class="token number">4b3d04097323</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> d<span class="token punctuation">[</span><span class="token string">'df'</span><span class="token punctuation">]</span>KeyError<span class="token punctuation">:</span> <span class="token string">'df'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python中大部分的错误类都继承自 Exception（它又继承自 BaseException ）</p><h3 id="抛出一个异常"><a href="#抛出一个异常" class="headerlink" title="抛出一个异常"></a>抛出一个异常</h3><p>当我们的程序比如遇到不合法的输入时，需要抛出异常可以像下面这样，利用 raise</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">EvenOnly</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> integer<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>integer<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>             <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"Only integers can be added"</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> integer <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>             <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Only even numbers can be added"</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>integer<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> e <span class="token operator">=</span> EvenOnly<span class="token punctuation">(</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> e<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"a string"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError                                 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-4</span><span class="token operator">-</span><span class="token number">9cff98c34dae</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> e<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"a string"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-2</span><span class="token operator">-</span><span class="token number">7af07cf6ebb7</span><span class="token operator">></span> <span class="token keyword">in</span> append<span class="token punctuation">(</span>self<span class="token punctuation">,</span> integer<span class="token punctuation">)</span>      <span class="token number">3</span>     <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> integer<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token number">4</span>         <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>integer<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span>             <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"Only integers can be added"</span><span class="token punctuation">)</span>      <span class="token number">6</span>         <span class="token keyword">if</span> integer <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token number">7</span>             <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Only even numbers can be added"</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> Only integers can be addedIn <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> e<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>ValueError                                Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-5</span><span class="token operator">-</span>d9ea7f347873<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> e<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-2</span><span class="token operator">-</span><span class="token number">7af07cf6ebb7</span><span class="token operator">></span> <span class="token keyword">in</span> append<span class="token punctuation">(</span>self<span class="token punctuation">,</span> integer<span class="token punctuation">)</span>      <span class="token number">5</span>             <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"Only integers can be added"</span><span class="token punctuation">)</span>      <span class="token number">6</span>         <span class="token keyword">if</span> integer <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">7</span>             <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Only even numbers can be added"</span><span class="token punctuation">)</span>      <span class="token number">8</span>         super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>integer<span class="token punctuation">)</span>      <span class="token number">9</span>ValueError<span class="token punctuation">:</span> Only even numbers can be added<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常的作用"><a href="#异常的作用" class="headerlink" title="异常的作用"></a>异常的作用</h3><p>当抛出一个异常时，该异常后面所有的代码都将不会执行</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">no_return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am about to raise an exception"</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"This is always raised"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This line will never execute"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">call_exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"call_exception starts here..."</span><span class="token punctuation">)</span>    no_return<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"an exception was raised..."</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    call_exception<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># call_exception starts here...</span><span class="token comment" spellcheck="true"># I am about to raise an exception</span><span class="token comment" spellcheck="true"># Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 15, in &lt; module ></span><span class="token comment" spellcheck="true">#   call_exception()</span><span class="token comment" spellcheck="true">#   File "test.py", line 10, in call_exception</span><span class="token comment" spellcheck="true">#   no_return()</span><span class="token comment" spellcheck="true">#   File "test.py", line 4, in no_return</span><span class="token comment" spellcheck="true">#   raise Exception("This is always raised")</span><span class="token comment" spellcheck="true"># Exception: This is always raised</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>当我们需要处理一个异常时，可以像下面这样：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">funy_division2</span><span class="token punctuation">(</span>anumber<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> anumber <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"13 is an unlucky number"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">100</span> <span class="token operator">/</span> anumber    <span class="token keyword">except</span> <span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">,</span> TypeError<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Enter a number other than zero"</span><span class="token keyword">for</span> val <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print end设定尾部的符号</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Testiong {val}"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>funy_division2<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Testiong 0 Enter a number other than zero</span><span class="token comment" spellcheck="true"># Testiong hello Enter a number other than zero</span><span class="token comment" spellcheck="true"># Testiong 50.0 2.0</span><span class="token comment" spellcheck="true"># Testiong 13 Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 13, in &lt; module ></span><span class="token comment" spellcheck="true">#   print(funy_division2(val))</span><span class="token comment" spellcheck="true">#   File "test.py", line 4, in funy_division2</span><span class="token comment" spellcheck="true">#   raise ValueError("13 is an unlucky number")</span><span class="token comment" spellcheck="true"># ValueError: 13 is an unlucky number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们知道了如何处理异常，但是想要对不同的异常作出不同的反应，或者想要针对某种异常执行某些操作之后传递给上层函数，就像从来没有处理过一样，解决办法分别就是利用<code>except</code>和<code>raise</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">funy_division2</span><span class="token punctuation">(</span>anumber<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> anumber <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"13 is an unlucky number"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">100</span> <span class="token operator">/</span> anumber    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Enter a number other than zero"</span>    <span class="token keyword">except</span> TypeError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Enter a numberical value"</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No, No, not 13!"</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span><span class="token keyword">for</span> val <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print end设定尾部的符号</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Testiong {val}"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>funy_division2<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Testiong 0 Enter a number other than zero</span><span class="token comment" spellcheck="true"># Testiong hello Enter a numberical value</span><span class="token comment" spellcheck="true"># Testiong 50.0 2.0</span><span class="token comment" spellcheck="true"># Testiong 13 No, No, not 13!</span><span class="token comment" spellcheck="true"># Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 18, in &lt; module ></span><span class="token comment" spellcheck="true">#   print(funy_division2(val))</span><span class="token comment" spellcheck="true">#   File "test.py", line 4, in funy_division2</span><span class="token comment" spellcheck="true">#   raise ValueError("13 is an unlucky number")</span><span class="token comment" spellcheck="true"># ValueError: 13 is an unlucky number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果我们在捕获TypeError之前，捕获了Exception，那么就只有捕获Exception的代码执行。</p><p>利用上述的特性，我们可以在处理完一个特殊的异常后，最后统一用Exception捕获其余的异常。</p></blockquote><p>通常和捕获异常使用的还有<code>as</code>，<code>else</code>，<code>finally</code></p><p><code>finally</code>下的代码无论在什么条件下都会执行，如果我们需要在代码执行完成后执行特定的任务将非常有用，一些常见的例子：</p><ol><li>清楚打开的数据库连接</li><li>关闭打开的文件</li><li>向网络发送一次关闭握手</li></ol><blockquote><p><code>finally</code>语句对于我们在try中执行return语句也非常重要，finally中的代码任然会在返回值之前执行</p></blockquote><p>比如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10/0'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally exec'</span><span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0</span><span class="token comment" spellcheck="true"># finally exec</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常的层级"><a href="#异常的层级" class="headerlink" title="异常的层级"></a>异常的层级</h3><p>大部分的异常类都继承自Exception，但是除了下面这两个异常类：</p><ol><li>SystemExit，在程序自然退出时抛出，通常是在代码中调用了sys.exit函数，设计这个异常的目的是，在程序最终退出之前完成清理工作</li><li>KeyboardInterrupt，常见于命令行程序，通常是ctrl + c</li></ol><p>异常之间的层级关系：</p><p><img src="./%E7%AC%AC4%E7%AB%A0-%E5%BC%82%E5%B8%B8%E5%B1%82%E7%BA%A7.png" alt="第4章-异常层级"></p><p>当我们用except:从句而不添加任何类型的异常时，将会捕获所有BaseException的子类，也就是会捕获所有异常</p><h3 id="定义我们的异常"><a href="#定义我们的异常" class="headerlink" title="定义我们的异常"></a>定义我们的异常</h3><p>异常类的名字通常用于说明发生了什么错误，而且可以先初始化函数中传入任何参数来提供额外的信息</p><p>通常我们自定义的异常类继承Exception，而不是BaseException，因为BaseException无法被except Exception从句捕获</p><p><code>Exception.__init__</code>方法设计成接受任意参数并将它们作为一个元组保存在一个名为args的属性当中，这使得我们可以更容易的定义新的异常，而不需要重写<code>__init__</code>方法</p><p>比如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">InvalidWithdrawal</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> balance<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>f<span class="token string">"account doesn't have {amount}"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> balance        self<span class="token punctuation">.</span>amount <span class="token operator">=</span> amount    <span class="token keyword">def</span> <span class="token function">overage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>amount <span class="token operator">-</span> self<span class="token punctuation">.</span>balance<span class="token keyword">print</span><span class="token punctuation">(</span>InvalidWithdrawal<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ("account doesn't have 20",)</span><span class="token keyword">raise</span> InvalidWithdrawal<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 13, in &lt; module ></span><span class="token comment" spellcheck="true">#   raise InvalidWithdrawal(25, 20)</span><span class="token comment" spellcheck="true"># __main__.InvalidWithdrawal: account doesn't have 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们需要处理异常时可以这样：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">InvalidWithdrawal</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> balance<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>f<span class="token string">"account doesn't have {amount}"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> balance        self<span class="token punctuation">.</span>amount <span class="token operator">=</span> amount    <span class="token keyword">def</span> <span class="token function">overage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>amount <span class="token operator">-</span> self<span class="token punctuation">.</span>balance<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> InvalidWithdrawal<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">except</span> InvalidWithdrawal <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"catch err {e.overage()}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以像对待其他对象一样对待异常类，可以为他添加属性和方法</p><p>使用自定义异常的真正优势在于创建供他人使用的框架、库或者API上</p><p>Python程序员倾向于追随“请求谅解，而不是许可”的原则，也就是说，他们先执行代码，然后解决错误。认为没有必要去花费cpu资源去检查一些很少才会出现的情况。比如下面的两段代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">divide_with_exception</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        number <span class="token operator">/</span> divisor    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can't divide by zero"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">divide_with_if</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> divisor <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can't divide by zero"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        number <span class="token operator">/</span> divisor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两段代码都是可以执行的，但是Python程序员应该更倾向于写第一种方式的代码</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>password <span class="token operator">=</span> self<span class="token punctuation">.</span>_encrypt_pw<span class="token punctuation">(</span>password<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>is_logged_in <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">_encrypt_pw</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        hash_string <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>username <span class="token operator">+</span> password<span class="token punctuation">)</span>        hash_string <span class="token operator">=</span> hash_string<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>hash_string<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        encrypted <span class="token operator">=</span> self<span class="token punctuation">.</span>_encrypt_pw<span class="token punctuation">(</span>password<span class="token punctuation">)</span>        <span class="token keyword">return</span> encrypted <span class="token operator">==</span> self<span class="token punctuation">.</span>password<span class="token keyword">class</span> <span class="token class-name">AuthException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> user<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>username<span class="token punctuation">,</span> user<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token keyword">class</span> <span class="token class-name">UsernameAlreadyExists</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">PasswordTooShort</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Authenticator</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">add_user</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> username <span class="token keyword">in</span> self<span class="token punctuation">.</span>users<span class="token punctuation">:</span>            <span class="token keyword">raise</span> UsernameAlreadyExists<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> PasswordTooShort<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>users<span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            user <span class="token operator">=</span> self<span class="token punctuation">.</span>users<span class="token punctuation">[</span>username<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> InvalidUsername<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> InvalidPassword<span class="token punctuation">(</span>username<span class="token punctuation">,</span> user<span class="token punctuation">)</span>        user<span class="token punctuation">.</span>is_logged_in <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">is_logged_in</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> username <span class="token keyword">in</span> self<span class="token punctuation">.</span>users<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>users<span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">.</span>is_logged_in        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">class</span> <span class="token class-name">InvalidUsername</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">InvalidPassword</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Authorizor</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> authenticator<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>authenticator <span class="token operator">=</span> authenticator        self<span class="token punctuation">.</span>permissions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">add_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> perm_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            perm_set <span class="token operator">=</span> self<span class="token punctuation">.</span>permissions<span class="token punctuation">[</span>perm_name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>permissions<span class="token punctuation">[</span>perm_name<span class="token punctuation">]</span> <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> PermissionError<span class="token punctuation">(</span><span class="token string">"Permission Exists"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">permit_user</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> perm_name<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            perm_set <span class="token operator">=</span> self<span class="token punctuation">.</span>permissions<span class="token punctuation">[</span>perm_name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> PermissionError<span class="token punctuation">(</span><span class="token string">"Permission does not exist"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> username <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>authenticator<span class="token punctuation">.</span>users<span class="token punctuation">:</span>                <span class="token keyword">raise</span> InvalidUsername<span class="token punctuation">(</span>username<span class="token punctuation">)</span>            perm_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> perm_name<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>authenticator<span class="token punctuation">.</span>is_logged_in<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> NotLoggedInError<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            perm_set <span class="token operator">=</span> self<span class="token punctuation">.</span>permissions<span class="token punctuation">[</span>perm_name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> PermissionError<span class="token punctuation">(</span><span class="token string">"Permission does not exist"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> username <span class="token operator">not</span> <span class="token keyword">in</span> perm_set<span class="token punctuation">:</span>                <span class="token keyword">raise</span> NotPermittedError<span class="token punctuation">(</span>username<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">PermissionError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">NotLoggedInError</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">NotPermittedError</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>authenticator <span class="token operator">=</span> Authenticator<span class="token punctuation">(</span><span class="token punctuation">)</span>authorizor <span class="token operator">=</span> Authorizor<span class="token punctuation">(</span>authenticator<span class="token punctuation">)</span>authenticator<span class="token punctuation">.</span>add_user<span class="token punctuation">(</span><span class="token string">"joe"</span><span class="token punctuation">,</span> <span class="token string">"joepassword"</span><span class="token punctuation">)</span>authorizor<span class="token punctuation">.</span>add_permission<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">)</span>authorizor<span class="token punctuation">.</span>check_permission<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 129, in &lt;module></span><span class="token comment" spellcheck="true">#     authorizor.check_permission("paint", "joe")</span><span class="token comment" spellcheck="true">#   File "test.py", line 101, in check_permission</span><span class="token comment" spellcheck="true">#     raise NotLoggedInError(username)</span><span class="token comment" spellcheck="true"># __main__.NotLoggedInError: ('joe', None)</span><span class="token keyword">print</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span>is_logged_in<span class="token punctuation">(</span><span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token string">"joe"</span><span class="token punctuation">,</span> <span class="token string">"joepassword"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>authorizor<span class="token punctuation">.</span>check_permission<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 145, in &lt;module></span><span class="token comment" spellcheck="true">#     authorizor.check_permission("paint", "joe")</span><span class="token comment" spellcheck="true">#   File "test.py", line 108, in check_permission</span><span class="token comment" spellcheck="true">#     raise NotPermittedError(username)</span><span class="token comment" spellcheck="true"># __main__.NotPermittedError: ('joe', None)</span>authorizor<span class="token punctuation">.</span>check_permission<span class="token punctuation">(</span><span class="token string">"mix"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 103, in check_permission</span><span class="token comment" spellcheck="true">#     perm_set = self.permissions[perm_name]</span><span class="token comment" spellcheck="true"># KeyError: 'mix'</span><span class="token comment" spellcheck="true"># During handling of the above exception, another exception occurred:</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 153, in &lt;module></span><span class="token comment" spellcheck="true">#     authorizor.check_permission("mix", "joe")</span><span class="token comment" spellcheck="true">#   File "test.py", line 105, in check_permission</span><span class="token comment" spellcheck="true">#     raise PermissionError("Permission does not exist")</span><span class="token comment" spellcheck="true"># __main__.PermissionError: Permission does not exist</span>authorizor<span class="token punctuation">.</span>permit_user<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>authorizor<span class="token punctuation">.</span>check_permission<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Git tags Explained》翻译</title>
      <link href="/2020/07/01/fanyi-git-tag/"/>
      <url>/2020/07/01/fanyi-git-tag/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mohitkhare.me/blog/git-tags-explained/" target="_blank" rel="noopener">原文链接</a></p><h2 id="Git-tags-简明教程"><a href="#Git-tags-简明教程" class="headerlink" title="Git tags 简明教程"></a>Git tags 简明教程</h2><p><img src="./git-tags.png" alt="git-tags"></p><p><code>Git</code>对于开发者来说是个非常必要的工具，它能非常方便的维护多人共享的代码库</p><p><code>Git-scm</code>简单的定义：</p><blockquote><p><code>Git</code>是一个开源的分布式版本控制系统，设计用来快速有效的管理各种小项目和大项目</p></blockquote><p>如果你还不知道<code>Git</code>，我推荐你首先学习一些基础知识</p><ul><li><a href="https://try.github.io/" target="_blank" rel="noopener">https://try.github.io/</a></li><li><a href="https://www.vogella.com/tutorials/Git/article.html" target="_blank" rel="noopener">https://www.vogella.com/tutorials/Git/article.html</a></li></ul><p>在这篇文章中，我们将学习到什么是<code>git tag</code>，为什么要使用它和什么时候以及怎么使用它。这因该足够让你在你的项目使用它了</p><p>让我们开始吧</p><h3 id="什么是git-tag"><a href="#什么是git-tag" class="headerlink" title="什么是git tag"></a>什么是<code>git tag</code></h3><p><code>git tag</code>实际上是指向了Git history 中的一个commit，它可以标记git history中某个的commit，以后可以方便的找到它</p><p>你可以将 tag 看做是一个不变的分支</p><p>Tag 代表某个特定分支在一定时刻的版本。所以，tag 本质上是开发者在程序中做的一个标记</p><h3 id="为什么和什么时候使用git-tag"><a href="#为什么和什么时候使用git-tag" class="headerlink" title="为什么和什么时候使用git tag"></a>为什么和什么时候使用<code>git tag</code></h3><p>你肯定看到过<code>v1.0.0</code>这样的标记。它表示一个产品的版本号。通常，当产品有重大的更新并且需要推送给用户时，就会创建一个tag。</p><p>tag 通常用户标记一个里程碑，例如可以发布给用户或者企业的新功能或一些bug修复</p><p>你肯定不希望每次修复Bug都要推送给客户，Tag 可以确保用户使用的是某个特定时刻的版本，而不需要每次代码的新提交都推送给客户。</p><h3 id="怎么使用git-tag"><a href="#怎么使用git-tag" class="headerlink" title="怎么使用git tag"></a>怎么使用<code>git tag</code></h3><p>现在你已经知道了tag的应用场景，下面就开始看看怎么使用它</p><h4 id="创建tag"><a href="#创建tag" class="headerlink" title="创建tag"></a>创建<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>// Eg. <span class="token function">git</span> tag v1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这条命令会将最新的commit打上tag，<code>tag_name</code>就是你要起得tag 名字，通常是类似v1.0.1这种。当然你也可以命名任何你喜欢的名字</p><p>通常 tag name 是：</p><pre class="line-numbers language-bash"><code class="language-bash">v<span class="token operator">&lt;</span>major<span class="token operator">></span>.<span class="token operator">&lt;</span>minor<span class="token operator">></span>.<span class="token operator">&lt;</span>patch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>major:重大修改</li><li>minor: 版本与先前版本兼容</li><li>patch: bug 修复</li></ul><p>创建了tag之后，可以push到远端代码库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以为tag添加描述信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag -a <span class="token operator">&lt;</span>tag_name<span class="token operator">></span> -m <span class="token string">"message"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-a</code>是什么意思呢？下面来看看</p><h4 id="tag类型"><a href="#tag类型" class="headerlink" title="tag类型"></a><code>tag</code>类型</h4><p>一共有两种<code>tag</code>类型：</p><ul><li>附注标签（Annonated）</li><li>轻量标签（Lightweight）</li></ul><h5 id="附注标签"><a href="#附注标签" class="headerlink" title="附注标签"></a>附注标签</h5><p>附注标签存储一个额外的信息，比如作者、发行说明、tag 信息存储为Git仓库中完整的数据，这些数据对于一个公开的项目是非常重要的</p><p><code>-a</code>表示该tag是附注标签</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag -a v1.0.1 -m <span class="token string">"First release"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="轻量标签"><a href="#轻量标签" class="headerlink" title="轻量标签"></a>轻量标签</h5><p>轻量标签时最简单的打tag的方式，它只存储tag name和关联的commit的hash值，不包含额外的信息，就类似于一个书签</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag v2.1-lw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>lw</code>表示轻量级标签，在tag name中加<code>lw</code>是为了更好的可读性</p><h4 id="为一个特殊的commit打tag"><a href="#为一个特殊的commit打tag" class="headerlink" title="为一个特殊的commit打tag"></a>为一个特殊的commit打tag</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token operator">&lt;</span>tag_name<span class="token operator">></span> <span class="token operator">&lt;</span>commit_sha<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令可以让你为一些老的commit打tag</p><h4 id="查看所有tag"><a href="#查看所有tag" class="headerlink" title="查看所有tag"></a>查看所有<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令将会展示所有存在的tag</p><p>输出可能是这样：</p><pre class="line-numbers language-bash"><code class="language-bash">1.0.01.0.11.0.21.0.32.0.02.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以使用<code>-l</code>或者<code>--list</code>选项利用正则表达式进行过滤</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag -l <span class="token string">"1.0*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash"><code class="language-bash">1.0.01.0.11.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="查看tag信息"><a href="#查看tag信息" class="headerlink" title="查看tag信息"></a>查看<code>tag</code>信息</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> show <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>// Eg. <span class="token function">git</span> show v1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将会展示作者、tag 信息、commit信息等其他信息</p><h4 id="删除tag"><a href="#删除tag" class="headerlink" title="删除tag"></a>删除<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag -d <span class="token operator">&lt;</span>tag_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="推送tag"><a href="#推送tag" class="headerlink" title="推送tag"></a>推送<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push origin <span class="token operator">&lt;</span>branch<span class="token operator">></span> --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将会把本地<code>tag</code>推送到远程仓库</p><h4 id="拉取tag"><a href="#拉取tag" class="headerlink" title="拉取tag"></a>拉取<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> fetch --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将会把远程仓库<code>tag</code>拉取到本地</p><h4 id="切换tag"><a href="#切换tag" class="headerlink" title="切换tag"></a>切换<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>// Eg. <span class="token function">git</span> checkout v1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你可以用这条命名，将代码回退到打某个<code>tag</code>的时候</p><p>你现在已经掌握了<code>Git tag</code>，开始在你的项目中应用起来吧😁</p><p>更多学习资源：</p><ul><li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">Excellent book to learn git</a></li><li><a href="https://softwareengineering.stackexchange.com/questions/165725/git-branching-and-tagging-best-practices" target="_blank" rel="noopener">Best git tag practices</a></li><li><a href="https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-tag" target="_blank" rel="noopener">On tagging by atlassian</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文章翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Python3 面向对象编程》笔记 - 第3章 对象相似时</title>
      <link href="/2020/06/29/python-object-3/"/>
      <url>/2020/06/29/python-object-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3-面向对象编程笔记"><a href="#Python3-面向对象编程笔记" class="headerlink" title="Python3 面向对象编程笔记"></a>Python3 面向对象编程笔记</h1><h2 id="第3章-对象相似时"><a href="#第3章-对象相似时" class="headerlink" title="第3章 对象相似时"></a>第3章 对象相似时</h2><p>在编程的世界中，重复的代码被认为是邪恶的。这一章主要学习继承。既将共有的逻辑抽象到超类并在子类中控制具体的细节。这一章主要学习：</p><ol><li>基本的基础</li><li>从内置类型基础</li><li>多重基础</li><li>多态与鸭子类型</li></ol><h3 id="基本的基础"><a href="#基本的基础" class="headerlink" title="基本的基础"></a>基本的基础</h3><p>严格来说，在Python中，我们都是用到了基础。所有的Python类都可以看做是继承了<code>object</code>类的子类</p><p>我们声明一个类时可以显示的声明基础的类是什么，如果隐藏了父类，那么默认就是继承的<code>object</code>类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyTest</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">MyTest2</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两种其实都是一样的。</p><p>在实践中使用继承关系，最简单的就是为已经存在的类添加功能，先写一个实例</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span>test1 <span class="token operator">=</span> Contact<span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span> <span class="token string">"name@qq.com"</span><span class="token punctuation">)</span>test2 <span class="token operator">=</span> Contact<span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"name2@qq.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span>all_contacts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [ &lt; __main__.Contact object at 0x103b3afd0 > , &lt; __main__.Contact object at 0x103b42048 > ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中有个概念<strong>类变量</strong>，代码中的<code>all_contacts</code>就是类变量，他可以被该类的所有实例共享。在子类中可以通过<code>self.all_contacts</code>获取该类变量，如果在这一对象中找不到该变量名，将会从类中找到。如果你用了<code>self.all_contacts</code>设定了这一变量。实际上只是设定了该对象的这以变量，并不会影响类变量，还是可以通过<code>Contacts.all_contacts</code>访问到</p><p>上面的例子是一个联系人的类，其中有名字和邮箱。我们需要从这些联系人中下订单，需要新加一个类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Supplier</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里会自动调用父类的__init__方法</span>    <span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>            f<span class="token string">"If this were a real system we would send {order} to {self.name}"</span><span class="token punctuation">)</span>c <span class="token operator">=</span> Contact<span class="token punctuation">(</span><span class="token string">"Some Body"</span><span class="token punctuation">,</span> <span class="token string">"somebody@example.net"</span><span class="token punctuation">)</span>s <span class="token operator">=</span> Supplier<span class="token punctuation">(</span><span class="token string">"sup Plier"</span><span class="token punctuation">,</span> <span class="token string">"supplier@example.net"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>all_contacts<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [&lt;__main__.Contact object at 0x1073f9f60>, &lt;__main__.Supplier object at 0x1073f9fd0>]</span><span class="token comment" spellcheck="true"># c.order("I need pliers") 会报错</span>s<span class="token punctuation">.</span>order<span class="token punctuation">(</span><span class="token string">"I need pliers"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># If this were a real system we would send I need pliers to sup Plier</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>Supplier</code>能够做<code>Contact</code>能做的所有事（加入<code>all_contacts</code>），而且还有自己的方法。</p><h3 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h3><p>继承关系中有一种有趣的应用就是为内置类型添加新的功能，比如前面的例子中保存了联系人，如果想查找联系人就可以添加一个新的类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ContactList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        matching_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> contact <span class="token keyword">in</span> self<span class="token punctuation">:</span>            <span class="token keyword">if</span> name <span class="token keyword">in</span> contact<span class="token punctuation">.</span>name<span class="token punctuation">:</span>                matching_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>contact<span class="token punctuation">)</span>        <span class="token keyword">return</span> matching_contacts<span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> ContactList<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Supplier</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里会自动调用父类的__init__方法</span>    <span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>            f<span class="token string">"If this were a real system we would send {order} to {self.name}"</span><span class="token punctuation">)</span>c <span class="token operator">=</span> Contact<span class="token punctuation">(</span><span class="token string">"Some Body"</span><span class="token punctuation">,</span> <span class="token string">"somebody@example.net"</span><span class="token punctuation">)</span>s <span class="token operator">=</span> Supplier<span class="token punctuation">(</span><span class="token string">"sup Plier"</span><span class="token punctuation">,</span> <span class="token string">"supplier@example.net"</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Supplier<span class="token punctuation">(</span><span class="token string">"sup Body"</span><span class="token punctuation">,</span> <span class="token string">"supplier2@example.net"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>contact<span class="token punctuation">.</span>name <span class="token keyword">for</span> contact <span class="token keyword">in</span> Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"Body"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['Some Body', 'sup Body']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大多数的内置对象都可以通过这种方式进行扩展。通常会扩展的内置类型有：<code>object</code>、<code>list</code>、<code>set</code>、<code>dict</code>、<code>file</code>、<code>str</code></p><p>比如扩展<code>dict</code>类型</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestDict</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longest_key</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        longest <span class="token operator">=</span> None        <span class="token keyword">for</span> key <span class="token keyword">in</span> self<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> longest <span class="token operator">or</span> len<span class="token punctuation">(</span>longest<span class="token punctuation">)</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>                longest <span class="token operator">=</span> key        <span class="token keyword">return</span> longestlongest_keys <span class="token operator">=</span> TestDict<span class="token punctuation">(</span><span class="token punctuation">)</span>longest_keys<span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>longest_keys<span class="token punctuation">[</span><span class="token string">"hello world"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>longest_keys<span class="token punctuation">[</span><span class="token string">"xx"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>longest_keys<span class="token punctuation">.</span>longest_key<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># hello world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重写和super"><a href="#重写和super" class="headerlink" title="重写和super"></a>重写和super</h3><p>继承关系很适合向已经存在的类中添加新的行为，如果需要修改某些行为，就要重写父类的某些方法。当一个子类重写了父类的一个方法，在调用该方法时会调用子类的方法。而不是父类的方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，我们重写了<code>__init__</code>方法。但是会有重复的代码，而且我们还必须手动加入<code>Contact.all_contacts</code>中。</p><blockquote><p>任何方法都可以被重写</p></blockquote><p>我们真正需要做的是执行Contact类上的<code>__init__</code>方法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们调用了<code>super()</code>函数获取父类对象的实例，然后调用他的<code>__init__</code>方法</p><blockquote><p>可以在任何方法内调用<code>super()</code>获取父类对象实例</p></blockquote><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>多重继承：继承自多个父类的子类可以获取所有父类的功能。</p><p>多重继承最简单的形式被称为混入（mixin），关于混入可以参考<a href="http://30daydo.com/article/480" target="_blank" rel="noopener">http://30daydo.com/article/480</a></p><p>其中利用混入实现多重继承比较重要的就是：</p><ol><li>首先它表示一个功能，而不是一个对象或者物品</li><li>必须职责单一，如果有多个功能，就要写多个minin类</li><li>不依赖于子类的实现</li><li>即使子类没有继承该类，也可以正常运行。只不过没有该方法</li></ol><p>比如在联系人当中，我们要给某个人发邮件，发邮件这个功能可以利用混入的方式实现多重继承</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MailSender</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">send_mail</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"send email to {self.email}"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">EmailableContact</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> MailSender<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>e <span class="token operator">=</span> EmailableContact<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"test@example.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>all_contacts<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [&lt;__main__.EmailableContact object at 0x109cdde48>]</span>e<span class="token punctuation">.</span>send_mail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># send email to test@example.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多重继承在混合不同类的方法时不会有问题，但是当调用父类的方法时就会变得很混乱</p><p>为了讨论更复杂的情况，我们在<code>Friend</code>类中加入家庭住址。应该更好的方法是利用组合的方式，创建一个<code>Address</code>类，在<code>Friend</code>中的地址指向<code>Address</code>类的实例。但是在这里采用继承的方式。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AddressHolder</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>street <span class="token operator">=</span> street        self<span class="token punctuation">.</span>city <span class="token operator">=</span> city        self<span class="token punctuation">.</span>state <span class="token operator">=</span> state        self<span class="token punctuation">.</span>code <span class="token operator">=</span> code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="钻石型继承问题"><a href="#钻石型继承问题" class="headerlink" title="钻石型继承问题"></a>钻石型继承问题</h3><p>首先可以用多重继承的方式为已有的<code>Friend</code>类添加父类，但是现在有了两个父类，需要初始化两个父类。先从一个简单的方法开始</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AddressHolder</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>street <span class="token operator">=</span> street        self<span class="token punctuation">.</span>city <span class="token operator">=</span> city        self<span class="token punctuation">.</span>state <span class="token operator">=</span> state        self<span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token keyword">class</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> AddressHolder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        Contact<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">)</span>        AddressHolder<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> code<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子是可以正常运行的，但是会有两个问题</p><ol><li>如果忘记了初始化父类，就会出现问题</li><li>可能会导致超类被多次调用</li></ol><p>下面是整个初始化的流程：</p><img src="./钻石继承问题1.png"><p>从图中可以看出分别在初始化<code>Contact</code>和<code>AddressHolder</code>时都初始化了<code>object</code>，既<code>object</code>被初始化了两次。</p><p>为了更加清楚的阐述这个问题，让我们看另外一个虚构的例子。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token punctuation">:</span>    num_base_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Base Class"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_base_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">LeftSubclass</span><span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_left_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        BaseClass<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Left Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_left_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">RightSubclass</span><span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_right_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        BaseClass<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Right Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_right_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">Subclass</span><span class="token punctuation">(</span>LeftSubclass<span class="token punctuation">,</span> RightSubclass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_sub_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        LeftSubclass<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        RightSubclass<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_sub_call <span class="token operator">+=</span> <span class="token number">1</span>s <span class="token operator">=</span> Subclass<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Calling method on Base Class</span><span class="token comment" spellcheck="true"># Calling method on Left Subclass</span><span class="token comment" spellcheck="true"># Calling method on Base Class</span><span class="token comment" spellcheck="true"># Calling method on Right Subclass</span><span class="token comment" spellcheck="true"># Calling method on Subclass</span><span class="token keyword">print</span><span class="token punctuation">(</span>f"num_sub_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_sub_call<span class="token punctuation">}</span>\nnum_left_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_left_call<span class="token punctuation">}</span>\n\num_right_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_right_call<span class="token punctuation">}</span>\nnum_base_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_base_call<span class="token punctuation">}</span>\n"<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># num_sub_call: 1</span><span class="token comment" spellcheck="true"># num_left_call: 1</span><span class="token comment" spellcheck="true"># num_right_call: 1</span><span class="token comment" spellcheck="true"># num_base_call: 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是整个流程图：</p><p><img src="./%E9%92%BB%E7%9F%B3%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%982.png" alt="钻石继承问题2"></p><p>整个调用流程看起来像是钻石，因此也叫做钻石继承问题</p><p>从输出可以看到<code>BaseClass</code>的<code>call_me</code>方法被调用了两次。关于多重继承需要记住，我们只想调用类层级中的“下一个”方法，而不是“父类”方法。实际上下一个方法可能不属于该类的父类或者更早的祖先。super关键字再次拯救了我们</p><p>修改后的代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token punctuation">:</span>    num_base_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Base Class"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_base_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">LeftSubclass</span><span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_left_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Left Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_left_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">RightSubclass</span><span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_right_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Right Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_right_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">Subclass</span><span class="token punctuation">(</span>LeftSubclass<span class="token punctuation">,</span> RightSubclass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_sub_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_sub_call <span class="token operator">+=</span> <span class="token number">1</span>s <span class="token operator">=</span> Subclass<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Calling method on Base Class</span><span class="token comment" spellcheck="true"># Calling method on Right Subclass</span><span class="token comment" spellcheck="true"># Calling method on Left Subclass</span><span class="token comment" spellcheck="true"># Calling method on Subclass</span><span class="token keyword">print</span><span class="token punctuation">(</span>f"num_sub_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_sub_call<span class="token punctuation">}</span>\nnum_left_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_left_call<span class="token punctuation">}</span>\n\num_right_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_right_call<span class="token punctuation">}</span>\nnum_base_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_base_call<span class="token punctuation">}</span>\n"<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># num_sub_call: 1</span><span class="token comment" spellcheck="true"># num_left_call: 1</span><span class="token comment" spellcheck="true"># num_right_call: 1</span><span class="token comment" spellcheck="true"># num_base_call: 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出结果可以看到<code>BaseClass</code>的<code>call_me</code>方法只被调用了一次。</p><p>从流程中看到，<code>Subclass</code>的<code>call_me</code>方法调用<code>super().calll_me()</code>，指向了<code>LeftSubclass.call_me()</code>，然后<code>LeftSubclass.call_me()</code>调用了<code>super().call_me()</code>，但是这里<code>super()</code>指向的是<code>RightSubclass.call_me()</code>，而不是他父类<code>BaseClass.call_me()</code>。然后<code>RightSubclass</code>在调用<code>BaseClass</code></p><p>特别注意的就是<code>LeftSubclass</code>中的<code>super()</code>指向的并不是他的父类，这样就实现了调用下一个方法而不是父类的方法。通过使用<code>super</code>可以确保类层级中的每一个方法都被调用一次</p><p>从上面的例子可以看到<code>super</code>的两个作用：</p><ol><li>调用父类方法，通常用来初始化父类</li><li>解决钻石继承问题，防止祖先类方法被调用多次</li></ol><h3 id="不同集合的参数"><a href="#不同集合的参数" class="headerlink" title="不同集合的参数"></a>不同集合的参数</h3><p>之前遇到继承的例子里，父类都是不需要参数初始化的。如果在多重继承下有这样的场景，每个父类都需要不同的参数初始化，那该怎样做呢？可惜的是，解决这个问题的唯一办法就是从头开始计划，我们不得不将基类的参数列表设计成接受任意关键字参数，而且这些参数对于所有子类的实现都是可选的。最后，我们必须确保能够接受不需要的参数并将其传递给自己的<code>super</code>方法，以防他们在后续继承顺序的方法中会用到</p><p>修改后的代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token keyword">class</span> <span class="token class-name">AddressHolder</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> street<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> state<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>street <span class="token operator">=</span> street        self<span class="token punctuation">.</span>city <span class="token operator">=</span> city        self<span class="token punctuation">.</span>state <span class="token operator">=</span> state        self<span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token keyword">class</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> AddressHolder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> phone<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能够初始化不同参数的父类了</p><p>但是，如果子类和父类都需要同一个参数呢？比如Friend和Contact都需要phone参数呢？总共有下面几种方法：</p><ol><li>不要将phone作为关键字参数，而是放在<code>**kwargs</code>中，需要改参数的可以通过<code>kwargs[&#39;phone&#39;]</code>获取</li><li>将phone作为关键字参数，在Friend类中再将phone加入到<code>kwargs</code>中，<code>kwargs[&#39;phone&#39;]=value</code></li><li>将phone作为关键字参数，在Friend类中再将phone加入到<code>kwargs</code>中，使用<code>update</code>方法，该方法适用于更新多个字段到<code>kwargs</code>中</li><li>将phone作为关键字参数，在Friend类中<code>super(phone=phone,**kwargs)</code>这种方式传递给父类</li></ol><p>建议：在实际中尽量多用组合的方式，少用多重继承</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态：由于所用子类不同而产生不同的行为，而不需要明确知道用的是哪个子类。</p><p>在很多情况下，多态是使用继承关系最重要的一个原因之一</p><p>举个例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Animal is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dog is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Cat is running...'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_twice</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>run_twice<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Animal is running...</span>run_twice<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Dog is running...</span>run_twice<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Cat is running...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>run_twice</code>函数只管调用传递进来的<code>run</code>方法，而不关心具体是Animal的哪个子类，因为所有的子类都会有<code>run</code>方法，最基本的就是Animal的<code>run</code>方法。可以随便为Animal增加子类，但是<code>run_twice</code>不用改动。这就是多态真正的威力：调用方只管调用，不管细节</p><p>在静态语言中，<code>run_twice</code>的参数必须是Animal或者他的子类，但是在python中有鸭子类型，既：一个对象如果“看起来像是鸭子，走路像鸭子”，那么他就是鸭子。所以<code>run_twice</code>可以接受不是Animal子类的类，只要他有<code>run</code>方法即可。例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Animal is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dog is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Cat is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Test is running..."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_twice</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>run_twice<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Animal is running...</span>run_twice<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Dog is running...</span>run_twice<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Cat is running...</span>run_twice<span class="token punctuation">(</span>Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Test is running...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>run_twice(Test())</code>也是可以正常调用的。</p><p>鸭子类型主要的一个作用：不需要提供所需对象的完整接口，而只需满足实际被访问的接口。</p><p>可能在有些场景下，会调用一些官方库的方法，但他对参数是有要求的，比如必须实现某个方法等。利用鸭子类型，我们就可以只实现参数要求的那个方法，而不必实现参数对象所有的方法才去调用这个官方库方法。</p><h3 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h3><p>虽然鸭子类型很有用，但是要想事先知道这个类是否满足全部的需要并不是一件容易的事。因此，Python引入了抽象基类的概念，抽象基类（Abstract base class），或者是ABCs，定义一组必须被类的鸭子实例实现的方法和属性</p><h4 id="使用抽象基类"><a href="#使用抽象基类" class="headerlink" title="使用抽象基类"></a>使用抽象基类</h4><p>先来看一个例子：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">from</span> rich <span class="token keyword">import</span> <span class="token keyword">print</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">from</span> collections <span class="token keyword">import</span> ContainerIn <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> help<span class="token punctuation">(</span>Container<span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>__abstractmethods__<span class="token punctuation">)</span>frozenset<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'__contains__'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Container类只需要实现一个抽象方法<code>__contains__</code>。</p><p><code>List</code>,<code>str</code>和<code>dict</code>都实现了这个方法，用以表明给的值是否存在于这一数据结构中，我们自定义一个类：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Container<span class="token keyword">class</span> <span class="token class-name">OddContainer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__contains__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token operator">not</span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">TestContainer</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>OddContainer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>OddContainer<span class="token punctuation">,</span> Container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>TestContainer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Flase</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>TestContainer<span class="token punctuation">,</span> Container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于Container类规定了鸭子类型实例必须要实现<code>__contains__</code>方法，所以OddContainer可以被认为是Container的子类，而TestContainer不可以</p><p>这就是鸭子类型币传统的多态更棒的原因，我们可以不用继承关系（或者更坏的情况）就能创建一个“是一个”的关系。</p><p>有趣的是Container的子类都可以使用in关键字。实际上in只是<code>__contains__</code>的语法糖。</p><h4 id="创建抽象基类"><a href="#创建抽象基类" class="headerlink" title="创建抽象基类"></a>创建抽象基类</h4><p>Container类其实就是一个抽象基类，下面自己创建一个抽象基类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> abc<span class="token keyword">class</span> <span class="token class-name">MediaLoader</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>abc<span class="token punctuation">.</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 子类必须实现该方法 </span>    @abc<span class="token punctuation">.</span>abstractclassmethod    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># * 子类必须提供这一属性</span>    @abc<span class="token punctuation">.</span>abstractproperty    <span class="token keyword">def</span> <span class="token function">ext</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># * 该方法可用类直接调用，而不必用到实例</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">__subclasshook__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"MediaLoader __subclasshook"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> cls <span class="token keyword">is</span> MediaLoader<span class="token punctuation">:</span>            attrs <span class="token operator">=</span> set<span class="token punctuation">(</span>dir<span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> set<span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__abstractmethods__<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> attrs<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">class</span> <span class="token class-name">Wav</span><span class="token punctuation">(</span>MediaLoader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Ogg</span><span class="token punctuation">(</span>MediaLoader<span class="token punctuation">)</span><span class="token punctuation">:</span>    ext <span class="token operator">=</span> <span class="token string">".ogg"</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">TestABCs</span><span class="token punctuation">:</span>    ext <span class="token operator">=</span> <span class="token string">".testABCs"</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># x = Wav()</span><span class="token comment" spellcheck="true"># Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 26, in &lt; module ></span><span class="token comment" spellcheck="true">#   x = Wav()</span><span class="token comment" spellcheck="true"># TypeError: Can't instantiate abstract class Wav with abstract methods ext, play</span>o <span class="token operator">=</span> Ogg<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>ext<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># .ogg</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>Ogg<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MediaLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># MediaLoader __subclasshook</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>TestABCs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MediaLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># MediaLoader __subclasshook</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>Ogg<span class="token punctuation">,</span> MediaLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>TestABCs<span class="token punctuation">,</span> MediaLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果继承了抽象基类，但是不实现规定的方法和属性，则会报错</p><h3 id="案例学习"><a href="#案例学习" class="headerlink" title="案例学习"></a>案例学习</h3><p>下面将简单实现一个房屋租赁系统</p><p>继承关系：</p><p><img src="./%E7%AC%AC3%E7%AB%A0-%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0.png" alt="第3章-案例学习"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_valid_input</span><span class="token punctuation">(</span>input_string<span class="token punctuation">,</span> valid_options<span class="token punctuation">)</span><span class="token punctuation">:</span>    input_string <span class="token operator">=</span> f<span class="token string">"{input_string} {', '.join(valid_options)}\n"</span>    response <span class="token operator">=</span> input<span class="token punctuation">(</span>input_string<span class="token punctuation">)</span>    <span class="token keyword">while</span> response <span class="token operator">not</span> <span class="token keyword">in</span> valid_options<span class="token punctuation">:</span>        response <span class="token operator">=</span> input<span class="token punctuation">(</span>input_string<span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token comment" spellcheck="true"># 房屋和公寓的父类，提供一些共有的参数</span><span class="token keyword">class</span> <span class="token class-name">Property</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> square_feet<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> beds<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> baths<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 防止它不是在继承链的最后一层调用</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>square_feet <span class="token operator">=</span> square_feet        self<span class="token punctuation">.</span>num_bedrooms <span class="token operator">=</span> beds        self<span class="token punctuation">.</span>num_baths <span class="token operator">=</span> baths    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"PROPERTY DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"square footage: {self.square_feet}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"bedrooms: {self.num_bedrooms}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"bathrooms: {self.num_bedrooms}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># * 静态方法，可直接通过类调用，也可以通过实例调用</span>    <span class="token comment" spellcheck="true"># * 静态方法与实例无关，所以没有self参数，同样不能使用super关键字</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> dict<span class="token punctuation">(</span>            square_feet<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"Enter the square feet: "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            beds<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"Enter number of bedrooms: "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            baths<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"Enter number of baths: "</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 公寓</span><span class="token keyword">class</span> <span class="token class-name">Apartment</span><span class="token punctuation">(</span>Property<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 洗衣机</span>    valid_laundries <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"coin"</span><span class="token punctuation">,</span> <span class="token string">"ensuite"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 阳台</span>    valid_balconies <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"solarium"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> balcony<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> laundry<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>balcony <span class="token operator">=</span> balcony        self<span class="token punctuation">.</span>laundry <span class="token operator">=</span> laundry    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"APARTMENT DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"laundry: {self.laundry}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"has balcony: {self.balcony}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        parent_init <span class="token operator">=</span> Property<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        laundry <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"What laundry facilities does the property have? "</span><span class="token punctuation">,</span> Apartment<span class="token punctuation">.</span>valid_laundries<span class="token punctuation">)</span>        balcony <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"Does the property have a balcony? "</span><span class="token punctuation">,</span> Apartment<span class="token punctuation">.</span>valid_balconies<span class="token punctuation">)</span>        parent_init<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"laundry"</span><span class="token punctuation">:</span> laundry<span class="token punctuation">,</span>            <span class="token string">"balcony"</span><span class="token punctuation">:</span> balcony        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> parent_init<span class="token comment" spellcheck="true"># 房屋</span><span class="token keyword">class</span> <span class="token class-name">House</span><span class="token punctuation">(</span>Property<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 车库</span>    valid_garage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"attached"</span><span class="token punctuation">,</span> <span class="token string">"detached"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 围栏</span>    valid_fenced <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_stories<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> garage<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> fenced<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>garage <span class="token operator">=</span> garage        self<span class="token punctuation">.</span>fenced <span class="token operator">=</span> fenced        self<span class="token punctuation">.</span>num_stories <span class="token operator">=</span> num_stories    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"HOUSE DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"# of stories: {self.num_stories}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"garage: {self.garage}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"fenced yard: {self.fenced}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        parent_init <span class="token operator">=</span> Property<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        fenced <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"Is the yard fenced? "</span><span class="token punctuation">,</span> House<span class="token punctuation">.</span>valid_fenced<span class="token punctuation">)</span>        garage <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"Is there a garage? "</span><span class="token punctuation">,</span> House<span class="token punctuation">.</span>valid_garage<span class="token punctuation">)</span>        num_stories <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"How many stories? "</span><span class="token punctuation">)</span>        parent_init<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"fenced"</span><span class="token punctuation">:</span> fenced<span class="token punctuation">,</span>            <span class="token string">"garage"</span><span class="token punctuation">:</span> garage<span class="token punctuation">,</span>            <span class="token string">"num_stories"</span><span class="token punctuation">:</span> num_stories        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> parent_init<span class="token comment" spellcheck="true"># 购买</span><span class="token keyword">class</span> <span class="token class-name">Purchase</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> taxes<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price        self<span class="token punctuation">.</span>taxes <span class="token operator">=</span> taxes    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"PURCHASE DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"selling price: {self.price}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"estimated taxes: {self.taxes}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> dict<span class="token punctuation">(</span>            price<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"What is the selling price? "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            taxes<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"What are the estimated taxes? "</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 租房</span><span class="token keyword">class</span> <span class="token class-name">Rental</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> furnished<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> utilities<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> rent<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>furnished <span class="token operator">=</span> furnished        self<span class="token punctuation">.</span>utilities <span class="token operator">=</span> utilities        self<span class="token punctuation">.</span>rent <span class="token operator">=</span> rent    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RENTAL DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"rent: {self.rent}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"estimated utilities: {self.utilities}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"furnished: {self.furnished}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> dict<span class="token punctuation">(</span>            rent<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"What is the monthly rent? "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            utilities<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"What are the estimated utilities? "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            furnished<span class="token operator">=</span>get_valid_input<span class="token punctuation">(</span>                <span class="token string">"Is the property furnished? "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 租房子</span><span class="token keyword">class</span> <span class="token class-name">HouseRental</span><span class="token punctuation">(</span>Rental<span class="token punctuation">,</span> House<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init <span class="token operator">=</span> House<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        init<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Rental<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> initinit <span class="token operator">=</span> HouseRental<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>house <span class="token operator">=</span> HouseRental<span class="token punctuation">(</span><span class="token operator">**</span>init<span class="token punctuation">)</span>house<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Enter the square feet: 1Enter number of bedrooms: 2Enter number of baths: 3Is the yard fenced?  yes, noyesIs there a garage?  attached, detached, noneattachedHow many stories? 3What is the monthly rent? 12What are the estimated utilities? 100Is the property furnished?  yes, noyesPROPERTY DETAILS==========square footage: 1bedrooms: 2bathrooms: 2HOUSE DETAILS# of stories: 3garage: attachedfenced yard: yesRENTAL DETAILSrent: 12estimated utilities: 100furnished: yes'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在前面的例子中如果我们将HouseRental继承顺序改为<code>(House, Rental)</code>，将不会触发<code>Rental.display()</code>方法。因为当调用<code>House.display</code>方式时，会调用<code>Property.display</code>方法。但是<code>Property.display()</code>中没有调用<code>super</code>，所以调用不了<code>Rental.display</code>方法。如果在Property中调用<code>super().display()</code>方法则不行，因为<code>object</code>对象没有<code>display</code>方法。可行的方式是Rental也继承Property，就成了之前讲到的钻石继承问题了。<code>super()</code>能轻松的解决。</p></blockquote><p>继续编写剩余代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 租公寓</span><span class="token keyword">class</span> <span class="token class-name">ApartmentRental</span><span class="token punctuation">(</span>Rental<span class="token punctuation">,</span> Apartment<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init <span class="token operator">=</span> Apartment<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        init<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Rental<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> init<span class="token comment" spellcheck="true"># 买公寓</span><span class="token keyword">class</span> <span class="token class-name">ApartmentPurchase</span><span class="token punctuation">(</span>Purchase<span class="token punctuation">,</span> Apartment<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init <span class="token operator">=</span> Purchase<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        init<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Rental<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> init<span class="token comment" spellcheck="true"># 买房子</span><span class="token keyword">class</span> <span class="token class-name">HousePurchase</span><span class="token punctuation">(</span>Purchase<span class="token punctuation">,</span> House<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init <span class="token operator">=</span> House<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        init<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Purchase<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> init<span class="token keyword">class</span> <span class="token class-name">Agent</span><span class="token punctuation">:</span>    type_map <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token string">"house"</span><span class="token punctuation">,</span> <span class="token string">"rental"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> HouseRental<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"house"</span><span class="token punctuation">,</span> <span class="token string">"purchase"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> HousePurchase<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"apartment"</span><span class="token punctuation">,</span> <span class="token string">"rental"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ApartmentRental<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"apartment"</span><span class="token punctuation">,</span> <span class="token string">"purchase"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ApartmentPurchase    <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>property_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">display_properties</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> property <span class="token keyword">in</span> self<span class="token punctuation">.</span>property_list<span class="token punctuation">:</span>            property<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_property</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        property_type <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"What type of property? "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"house"</span><span class="token punctuation">,</span> <span class="token string">"apartment"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        payment_type <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"What payment type? "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"purchase"</span><span class="token punctuation">,</span> <span class="token string">"rental"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        PropertyClass <span class="token operator">=</span> self<span class="token punctuation">.</span>type_map<span class="token punctuation">[</span><span class="token punctuation">(</span>property_type<span class="token punctuation">,</span> payment_type<span class="token punctuation">)</span><span class="token punctuation">]</span>        init_args <span class="token operator">=</span> PropertyClass<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>property_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>PropertyClass<span class="token punctuation">(</span><span class="token operator">**</span>init_args<span class="token punctuation">)</span><span class="token punctuation">)</span>agent <span class="token operator">=</span> Agent<span class="token punctuation">(</span><span class="token punctuation">)</span>agent<span class="token punctuation">.</span>add_property<span class="token punctuation">(</span><span class="token punctuation">)</span>agent<span class="token punctuation">.</span>add_property<span class="token punctuation">(</span><span class="token punctuation">)</span>agent<span class="token punctuation">.</span>display_properties<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># What type of property?  house, apartment</span><span class="token comment" spellcheck="true"># house</span><span class="token comment" spellcheck="true"># What payment type?  purchase, rental</span><span class="token comment" spellcheck="true"># purchase</span><span class="token comment" spellcheck="true"># Enter the square feet: 1</span><span class="token comment" spellcheck="true"># Enter number of bedrooms: 2</span><span class="token comment" spellcheck="true"># Enter number of baths: 3</span><span class="token comment" spellcheck="true"># Is the yard fenced?  yes, no</span><span class="token comment" spellcheck="true"># yes</span><span class="token comment" spellcheck="true"># Is there a garage?  attached, detached, none</span><span class="token comment" spellcheck="true"># none</span><span class="token comment" spellcheck="true"># How many stories? 4</span><span class="token comment" spellcheck="true"># What is the selling price? 12</span><span class="token comment" spellcheck="true"># What are the estimated taxes? 23</span><span class="token comment" spellcheck="true"># What type of property?  house, apartment</span><span class="token comment" spellcheck="true"># house</span><span class="token comment" spellcheck="true"># What payment type?  purchase, rental</span><span class="token comment" spellcheck="true"># rental</span><span class="token comment" spellcheck="true"># Enter the square feet: 2</span><span class="token comment" spellcheck="true"># Enter number of bedrooms: 3</span><span class="token comment" spellcheck="true"># Enter number of baths: 4</span><span class="token comment" spellcheck="true"># Is the yard fenced?  yes, no</span><span class="token comment" spellcheck="true"># no</span><span class="token comment" spellcheck="true"># Is there a garage?  attached, detached, none</span><span class="token comment" spellcheck="true"># none</span><span class="token comment" spellcheck="true"># How many stories? 6</span><span class="token comment" spellcheck="true"># What is the monthly rent? 12</span><span class="token comment" spellcheck="true"># What are the estimated utilities? 4</span><span class="token comment" spellcheck="true"># Is the property furnished?  yes, no</span><span class="token comment" spellcheck="true"># no</span><span class="token comment" spellcheck="true"># PROPERTY DETAILS</span><span class="token comment" spellcheck="true"># == == == == ==</span><span class="token comment" spellcheck="true"># square footage: 1</span><span class="token comment" spellcheck="true"># bedrooms: 2</span><span class="token comment" spellcheck="true"># bathrooms: 2</span><span class="token comment" spellcheck="true"># HOUSE DETAILS</span><span class="token comment" spellcheck="true"># # of stories: 4</span><span class="token comment" spellcheck="true"># garage: none</span><span class="token comment" spellcheck="true"># fenced yard: yes</span><span class="token comment" spellcheck="true"># PURCHASE DETAILS</span><span class="token comment" spellcheck="true"># selling price: 12</span><span class="token comment" spellcheck="true"># estimated taxes: 23</span><span class="token comment" spellcheck="true"># PROPERTY DETAILS</span><span class="token comment" spellcheck="true"># == == == == ==</span><span class="token comment" spellcheck="true"># square footage: 2</span><span class="token comment" spellcheck="true"># bedrooms: 3</span><span class="token comment" spellcheck="true"># bathrooms: 3</span><span class="token comment" spellcheck="true"># HOUSE DETAILS</span><span class="token comment" spellcheck="true"># # of stories: 6</span><span class="token comment" spellcheck="true"># garage: none</span><span class="token comment" spellcheck="true"># fenced yard: no</span><span class="token comment" spellcheck="true"># RENTAL DETAILS</span><span class="token comment" spellcheck="true"># rent: 12</span><span class="token comment" spellcheck="true"># estimated utilities: 4</span><span class="token comment" spellcheck="true"># furnished: no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API</title>
      <link href="/2020/06/27/restfule-api/"/>
      <url>/2020/06/27/restfule-api/</url>
      
        <content type="html"><![CDATA[<h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>​    最近在项目中单独负责一个组件的开发，这个组件的输出是通过api的方式输出。虽然接口不多，也就15个api左右，但是越往后写就越感觉不太对劲。在和同时联调沟通的时候也发现了很多的问题。一直都想要好好总结下，趁着今天下班早有时间就反思一下吧。</p><p>​    我总结了目前我发现的这个项目的一些问题</p><ol><li>API风格混乱</li><li>API设计不好，不能更加友好的支持API升级</li><li>返回状态码的滥用</li><li>接口返回数据结构不一致</li><li>接口太碎片化</li><li>由于是go语言写的，基本每个接口都用到了defer</li></ol><p>​    站在现在的角度来看，其实这个组件的api是想当失败，可以说是不忍直视。当然有一小部分原因是项目紧急的缘故。但是不可否认的是主要还是因为我的原因才导致了这样的结果。所以我决定新开一个分支，在下班时间重构这个组件的API。虽然这个新重构后的API上线的可能性不大（因为好多项目已经集成了该组件，改动起来花费的资源很大）。但也算是对自己的一个交代吧。</p><p>​    自己算了算之前也参与过三个项目相关业务API的开发。但是都是在别人的基础上进行开发，看到别人没有过多的去关注这些东西。所以自己也就自然而然的没有过多的去思考，就顺着那种思路开发下去了。总之该来的还是会来的。这次的更改可能对这个组件起不了多大的作用。但是希望能够给自己敲响警钟，避免下次出现同样的问题。</p><h3 id="REST-API的一些规范"><a href="#REST-API的一些规范" class="headerlink" title="REST API的一些规范"></a>REST API的一些规范</h3><p>实现REST API标准比较好的例子就是<a href="https://developer.github.com/v3/#current-version" target="_blank" rel="noopener">https://developer.github.com/v3/#current-version</a></p><ol><li><p>在API中指定版本</p><p>一种是可以放在url中，另外一种就是将版本放在HTTP请求头中。还是放在url中比较方便</p></li><li><p>url中不能出现动词，名词也应该使用复数</p><p>因为RESTful面向的都是资源，所以在url中不能包含动词。</p></li><li><p>对资源的操作都是用HTTP动词</p><p>常用到的HTTP动词</p><table><thead><tr><th>动词</th><th>作用</th><th>返回结果</th></tr></thead><tbody><tr><td>GET</td><td>从服务器获取资源</td><td>获取单个资源对象或者资源对象数组</td></tr><tr><td>POST</td><td>新建资源</td><td>新生成的资源对象</td></tr><tr><td>PUT</td><td>更新整个对象，需要客户端提供完整的对象</td><td>更新后的资源对象</td></tr><tr><td>PATCH</td><td>更新对象的某个部分，需要客户端提供更新的部分</td><td>更新后的资源对象</td></tr><tr><td>DELETE</td><td>删除整个对象</td><td>返回一个空文档</td></tr></tbody></table></li></ol><p>一些例子</p><pre><code>```bashGET /zoos：列出所有动物园POST /zoos：新建一个动物园GET /zoos/ID：获取某个指定动物园的信息PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）DELETE /zoos/ID：删除某个动物园GET /zoos/ID/animals：列出某个指定动物园的所有动物DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物```</code></pre><ol start="4"><li><p>过滤信息</p><p>一些例子</p><pre class="line-numbers language-bash"><code class="language-bash">?limit<span class="token operator">=</span>10：指定返回记录的数量?offset<span class="token operator">=</span>10：指定返回记录的开始位置。?page<span class="token operator">=</span>2<span class="token operator">&amp;</span>per_page<span class="token operator">=</span>100：指定第几页，以及每页的记录数。?sortby<span class="token operator">=</span>name<span class="token operator">&amp;</span>order<span class="token operator">=</span>asc：指定返回结果按照哪个属性排序，以及排序顺序。?animal_type_id<span class="token operator">=</span>1：指定筛选条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 GET /zoo/ID/animals 与 GET /animals?zoo=ID都是REST的风格。一直都以为只有第一种才是</p></li><li><p>状态码</p><pre class="line-numbers language-bash"><code class="language-bash">200 OK - <span class="token punctuation">[</span>GET<span class="token punctuation">]</span>：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。201 CREATED - <span class="token punctuation">[</span>POST/PUT/PATCH<span class="token punctuation">]</span>：用户新建或修改数据成功。202 Accepted - <span class="token punctuation">[</span>*<span class="token punctuation">]</span>：表示一个请求已经进入后台排队（异步任务）204 NO CONTENT - <span class="token punctuation">[</span>DELETE<span class="token punctuation">]</span>：用户删除数据成功。400 INVALID REQUEST - <span class="token punctuation">[</span>POST/PUT/PATCH<span class="token punctuation">]</span>：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。401 Unauthorized - <span class="token punctuation">[</span>*<span class="token punctuation">]</span>：表示用户没有权限（令牌、用户名、密码错误）。403 Forbidden - <span class="token punctuation">[</span>*<span class="token punctuation">]</span> 表示用户得到授权（与401错误相对），但是访问是被禁止的。404 NOT FOUND - <span class="token punctuation">[</span>*<span class="token punctuation">]</span>：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。406 Not Acceptable - <span class="token punctuation">[</span>GET<span class="token punctuation">]</span>：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。410 Gone -<span class="token punctuation">[</span>GET<span class="token punctuation">]</span>：用户请求的资源被永久删除，且不会再得到的。422 Unprocesable entity - <span class="token punctuation">[</span>POST/PUT/PATCH<span class="token punctuation">]</span> 当创建一个对象时，发生一个验证错误。500 INTERNAL SERVER ERROR - <span class="token punctuation">[</span>*<span class="token punctuation">]</span>：服务器发生错误，用户将无法判断发出的请求是否成功。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>返回结果</p><pre class="line-numbers language-bash"><code class="language-bash">GET /collection：返回资源对象的列表（数组）GET /collection/resource：返回单个资源对象POST /collection：返回新生成的资源对象PUT /collection/resource：返回完整的资源对象PATCH /collection/resource：返回完整的资源对象DELETE /collection/resource：返回一个空文档<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Hypermedia API</p><p>个人认为这个在公司这种项目中是可以省略的，毕竟公司项目中的API都是面向特定的用户，而且有安全限制，不会把所有的API都暴露出去。</p></li><li><p>API的用户认证使用OAuth 2.0框架</p><p>这个单独拿出来写一写</p></li></ol><p>其实RESTful规范也不多，在实际中除非有特殊情况，都要尽量的遵守规范。</p><p>参考链接：</p><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p><p><a href="https://docs.microsoft.com/zh-cn/azure/architecture/best-practices/api-design" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/azure/architecture/best-practices/api-design</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python可变对象和不可变对象</title>
      <link href="/2020/06/27/python-mutable/"/>
      <url>/2020/06/27/python-mutable/</url>
      
        <content type="html"><![CDATA[<p>在Python中所有的一切都是对象，都是继承同一个对象<code>object</code>。</p><blockquote><p><code>object</code>是所有对象的基类，<code>type</code>也是继承<code>object</code></p></blockquote><blockquote><p><code>type</code>是一切type的类型</p></blockquote><p>借用<a href="https://colinoftroy.wordpress.com/2012/12/03/differences-between-python-types-and-objects/" target="_blank" rel="noopener">某博客里的一张图片</a>，他们的关系应该是这样的（蓝色表示继承，红色表示类型）</p><p><img src="./python.jpg" alt="img"></p><h3 id="可变和不可变对象的区别"><a href="#可变和不可变对象的区别" class="headerlink" title="可变和不可变对象的区别"></a>可变和不可变对象的区别</h3><p>Python中的数据结构也可以分为可变对象和不可变对象两类</p><ul><li>可变对象：<code>list</code>,<code>set</code>,<code>dict</code></li><li>不可变对象：<code>tuple</code>,<code>int</code>,<code>float</code>,<code>string</code>,<code>bool</code></li></ul><p><strong>这里说的可变和不可变都是基于内存地址中的数据来区分的</strong>，看个例子</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里a和b都指向了同一个内存地址，因为是<code>list</code>，所以b能够修改内存地址当中的数据，所以打印a时就会输出内存地址当中修改后的数据。</p><p>下面看看不可变对象的例子</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError       Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-17</span><span class="token operator">-</span><span class="token number">62bbbc50f611</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> object does <span class="token operator">not</span> support item assignment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>tuple</code>是不可变对象，既内存中记录的数据是不可以修改的，所以当我们修改数据时就出现了错误。</p><p>可能会有人疑问，不可变对象也是可以改变内存地址内容的，比如</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">"test"</span>In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">"hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其实这并不是修改了内存地址中的数据，而是将a重新指向了另外一个内存地址，如果我们在打印输出b，就会发现b还是”test”。</strong></p><p>从内存地址中更容易理解</p><blockquote><p><code>id()</code>方法可以查看内存地址，其实是不是内存地址，而是逻辑地址</p></blockquote><p>可变对象：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4370511024</span>In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4370511024</span>In <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4370511024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到a和b指向的内存地址并没有发生变化</p><p>不可变对象：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">"test"</span>In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4343187248</span>In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> <span class="token string">"hello"</span>In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4343187248</span>In <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4372234608</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到其实是b指向的内存地址变化了，并不是内存地址当中的数据发生变化了</p><h3 id="可变对象和不可变对象的应用"><a href="#可变对象和不可变对象的应用" class="headerlink" title="可变对象和不可变对象的应用"></a>可变对象和不可变对象的应用</h3><p><strong>我们在实际工作中应该避免使用可变对象作为函数参数传入，除非你明确的知道会发生什么。</strong></p><p>这么做的原因是因为在Python当中是传递参数都是引用传递而不是值传递。关于引用传递可以简单的用下面的例子证明：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> id<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>    args <span class="token operator">+=</span> <span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> id<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> id<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>    test<span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> id<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash"><code class="language-bash">1 45175108321 451751083211 45175111521 4517510832<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在<code>test</code>函数中，<code>args</code>和在函数外的<code>args</code>的内存地址都是相同的，所以证明了Python中是传递参数是引用传递。但是最后并没有改变函数外<code>args</code>的值，是因为<code>int</code>类型是不可变对象。如果是可变对象就会改变值。</p><h4 id="可变对象作为函数参数的正向作用"><a href="#可变对象作为函数参数的正向作用" class="headerlink" title="可变对象作为函数参数的正向作用"></a>可变对象作为函数参数的正向作用</h4><p>在有些情况下，可变对象作为函数参数还是非常有用的。</p><p>比如要实现一个生产者-消费者模式</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"producet put a message {i}"</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"consumer get a message {data}"</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    producer <span class="token operator">=</span> Producer<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    consumer <span class="token operator">=</span> Consumer<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    thread <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>producer<span class="token punctuation">.</span>run<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>consumer<span class="token punctuation">.</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash"><code class="language-bash">producet put a message 0consumer get a message 0producet put a message 1consumer get a message 1producet put a message 2consumer get a message 2producet put a message 3consumer get a message 3producet put a message 4consumer get a message 4producet put a message 5consumer get a message 5producet put a message 6consumer get a message 6producet put a message 7consumer get a message 7producet put a message 8consumer get a message 8producet put a message 9consumer get a message 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过可变对象，能够方便的在两个函数中进行通信，不必每次改变数据都去通知对方。</p><h4 id="可变对象作为函数参数的负向作用"><a href="#可变对象作为函数参数的负向作用" class="headerlink" title="可变对象作为函数参数的负向作用"></a>可变对象作为函数参数的负向作用</h4><p>看下面的例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'world'</span>, <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'world'</span>, <span class="token string">'world'</span>, <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'world'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>会出现这个问题的原因主要有两个</p><ul><li><strong>默认参数的值只会在函数定义的时候赋值一次</strong></li><li><strong>a变量指向了一个可变对象</strong></li></ul><p>当不给test函数传递参数时，a变量就会修改<code>test(a=[])</code>中的[]的内存地址，而且因为<strong>默认参数的值只会在函数定义的时候赋值一次</strong>，所以后面再次不给test函数传递参数时，a变量还是会指向<code>test(a=[])</code>中的[]的内存地址，所以就出现了上面的结果</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>需要将默认值改为不可变对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> a<span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是改成这样还是有个问题，就是有时候函数传递进来的是比如说false、空字符串等。会把这些输入当做没有输入</p><p>优化：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token keyword">is</span> None<span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你的目标是检测函数调用时是否传递了默认值，而不是提供默认值那么会有一个更好的方式</p><p>改进：将<code>None</code>替换为一个独一无二的，用户不可能传入的类型，<code>object</code>是个好的选择</p><pre class="line-numbers language-python"><code class="language-python">_no_value <span class="token operator">=</span> object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">=</span>_no_value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token keyword">is</span> _no_value<span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样即使函数的参数是<code>None</code>，也会判断为传递进来了参数</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERC20代币批量转账实现和解析(一)</title>
      <link href="/2018/12/27/erc20-dai-bi-pi-liang-zhuan-zhang-shi-xian-he-jie-xi-yi/"/>
      <url>/2018/12/27/erc20-dai-bi-pi-liang-zhuan-zhang-shi-xian-he-jie-xi-yi/</url>
      
        <content type="html"><![CDATA[<p>如果你对区块链和ERC20代币没有概念，请先阅读入门知识</p><ol><li><a href="https://learnblockchain.cn/2017/11/20/whatiseth/" target="_blank" rel="noopener">以太坊是什么</a></li><li><a href="https://ethfans.org/posts/block-chain-technology-smart-contracts-and-ethereum" target="_blank" rel="noopener">区块链技术-智能合约-以太坊</a></li></ol><p>批量转账，指的是在一笔 ETH 交易中转多笔代币到不同的账户，一般用于 ERC20 代币项目启动时对用户进行空投。</p><p>批量空投的好处主要有两个，一是省 GAS 费，但事实上省得不多；二是省时间，这是最主要目的。以太坊是以交易为粒度打包，如果转账只能单对单，即使一次发起多笔单对单的交易，等待这些交易被打包的时间也非常漫长，而且还有笔数上限限制。将多笔转账放到同一个交易中，被打包确认的速度就会非常快。一般 ERC20 代币项目启动时都会大撒币，空投地址动辄都是几万几十万，批量空投接口对效率会有上百倍的提升。</p><p>文章主要内容</p><ol><li>在本机部署ETH私有链</li><li>在ETH私有链上发布ERC20代币</li><li>三种批量转账方式的原理</li><li>三种批量转账方式的实现</li><li>如何解析批量转账</li></ol><blockquote><p>由于文章较长，所以这里分为两篇，本篇主要讲前两个部署环境的部分，熟悉部署的同学可以跳过本章</p></blockquote><h2 id="在本机部署ETH私有链"><a href="#在本机部署ETH私有链" class="headerlink" title="在本机部署ETH私有链"></a>在本机部署ETH私有链</h2><p>本机默认是在Mac OS X上进行安装，别的系统的安装可以在github上查看<a href="https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum" target="_blank" rel="noopener">Ethereum Installation Instructions</a></p><h3 id="geth安装"><a href="#geth安装" class="headerlink" title="geth安装"></a>geth安装</h3><p>推荐使用Homebrew进行安装，简单快捷</p><blockquote><p>brew 是 Mac 下的包管理工具，和Ubuntu里的apt-get类似</p></blockquote><pre><code>brew tap ethereum/ethereumbrew install ethereum</code></pre><h3 id="创建私有链"><a href="#创建私有链" class="headerlink" title="创建私有链"></a>创建私有链</h3><p>首先新建一个文件目录，例如<code>ethprivate</code></p><p>要搭建私有链必须有一个创世区块，创世区块的信息写在一个json文件中，例如genesis.json文件，在<code>ethprivate/genesis.json</code>中写入下面的内容</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"chainID"</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token property">"homesteadBlock"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"eip155Block"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"eip158Block"</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"alloc"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"coinbase"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"difficulty"</span><span class="token operator">:</span> <span class="token string">"0x400"</span><span class="token punctuation">,</span>  <span class="token property">"extraData"</span><span class="token operator">:</span> <span class="token string">"0x"</span><span class="token punctuation">,</span>  <span class="token property">"gasLimit"</span><span class="token operator">:</span> <span class="token string">"0x84c060"</span><span class="token punctuation">,</span>  <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"0xdeadbeefdeadbeef"</span><span class="token punctuation">,</span>  <span class="token property">"mixhash"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"parentHash"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token string">"0x00"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里将gasLimit设置大一点，防止后面部署合约的时候报<code>Error: exceeds block gas limit undefined</code>的错误信息，这是因为合约所需的gas超过了区块的最大gas</p></blockquote><p>创建好创世区块后，我们需要利用该创世区块去初始化区块链，需要新建一个<code>data0</code>目录存放区块信息</p><p>接着在主目录下，执行初始化区块链的命令</p><pre><code>geth --datadir data0 init genesis.json</code></pre><p>看到如下信息则表明初始化成功</p><p><img src="./167f01019e73ace1.png" alt></p><h3 id="启动私有链"><a href="#启动私有链" class="headerlink" title="启动私有链"></a>启动私有链</h3><pre><code>geth --datadir &#39;data0&#39; --identity &#39;my_block&#39; --port &#39;30304&#39; console 2&gt;&gt;eth_output.log</code></pre><p>参数含义</p><pre><code>–identity：指定节点 ID；–rpc：表示开启 HTTP-RPC 服务；–rpcport：指定 HTTP-RPC 服务监听端口号（默认为 8545）；–datadir：指定区块链数据的存储位置；–port：指定和其他节点连接所用的端口号（默认为 30303）；–networkid： 指定私有链网络号；–nodiscover：关闭节点发现机制，防止加入有同样初始配置的陌生节点。</code></pre><p>看到下面的信息表示私有链成功启动</p><p><img src="./167f01127c85c035.png" alt></p><h3 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h3><p>现在刚启动还没有任何账户</p><p><img src="./167f012330806b6e.png" alt></p><p>我们利用<code>personal</code>创建账户</p><pre><code>personal.newAccount()</code></pre><p><img src="./167f012c9ee11b9f.png" alt></p><blockquote><p>Passphrase 就是密码，连续输入两次密码便可以创建一个账户</p></blockquote><p>除了<code>personal</code>，geth命令行中还包含了另外的对象</p><pre><code>eth：包含一些跟操作区块链相关的方法net：包含以下查看p2p网络状态的方法admin：包含一些与管理节点相关的方法miner：包含启动&amp;停止挖矿的一些方法personal：主要包含一些管理账户的方法txpool：包含一些查看交易内存池的方法web3：包含了以上对象，还包含一些单位换算的方法</code></pre><p>按照这中方式可以多创建几个账户，在后面使用</p><h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><p>我们刚开始还没有进行挖矿，所以<code>eth.accounts[0]</code>中的余额为0</p><pre><code>eth.getBalance(eth.accounts[0])</code></pre><p><img src="./167f0138351b2ac0.png" alt></p><blockquote><p>挖矿所得的ETH会默认存在<code>eth.accounts[0]</code>的账户当中</p></blockquote><p>通过<code>miner.start()</code>来启动挖矿，利用<code>miner.stop()</code>停止挖矿</p><p><img src="./167f014193d7c98a.png" alt></p><blockquote><p><code>miner.start()</code>会返回<code>null</code>，推荐使用<code>tail -f eth_output.log</code>查看日志，这样就可以看到挖矿的信息</p></blockquote><p><img src="./167f0147e0208eb4.png" alt><br>现在我们查看账户的余额就不在是0了</p><p><img src="./167f014d7ecf3475.png" alt></p><p>每挖到一个区块会奖励5个以太币，日志中可以看到到目前为止挖到了5个区块，那么就应该是20个以太币，可是查看的余额却不是这样，这是因为这里默认的单位是Wei，有关单位可以去移步<a href="https://zhuanlan.zhihu.com/p/28994731" target="_blank" rel="noopener">以太币(Ether)单位</a></p><p>可以利用下面的命令转换单位</p><p><img src="./167f01539958ff40.png" alt></p><p>这里只做简单的介绍，其余的命令大家有感兴趣的可以自行查找</p><h2 id="在ETH私有链上发布ERC20代币"><a href="#在ETH私有链上发布ERC20代币" class="headerlink" title="在ETH私有链上发布ERC20代币"></a>在ETH私有链上发布ERC20代币</h2><p>ERC20是Fabian Vogelsteller在2015年末提出的以太坊改进建议，它是许多流行的合约都在遵循的标准。 </p><p>ERC20使通证智能合约的行为非常类似于传统的加密货币，例如在不同账户之间发送和接收、查看通证总供应量或者查看某个地址可用的通证余额，就像比特币或以太币一样。这类似于用以太坊钱包 发送和接收以太币、查看流通中的以太币总量、查看特定钱包的货币余额等。</p><p>ERC20规定了一些标准的接口</p><pre><code>contract ERC20Interface {    string public constant name = &quot;Token Name&quot;;    string public constant symbol = &quot;SYM&quot;;    uint8 public constant decimals = 18;  // 18 is the most common number of decimal places    function totalSupply() public constant returns (uint);    function balanceOf(address tokenOwner) public constant returns (uint balance);    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);    function transfer(address to, uint tokens) public returns (bool success);    function approve(address spender, uint tokens) public returns (bool success);    function transferFrom(address from, address to, uint tokens) public returns (bool success);    event Transfer(address indexed from, address indexed to, uint tokens);    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);}</code></pre><p>简单的介绍一下，更加详细的介绍可以在<a href="https://github.com/ethereum/EIPs/issues/20" target="_blank" rel="noopener">github</a>查看</p><pre><code>name ： 代币名称symbol： 代币符号decimals： 代币小数点位数，代币的最小单位totalSupply() : 发行代币总量。balanceOf(): 查看对应账号的代币余额。transfer(): 实现代币交易，用于给用户发送代币（从我们的账户里）transferFrom(): 实现代币用户之间的交易allowance(): 控制代币的交易，如可交易账号及资产approve(): 允许用户可花费的代币数</code></pre><h2 id="在ETH私有链上发布ERC20代币-1"><a href="#在ETH私有链上发布ERC20代币-1" class="headerlink" title="在ETH私有链上发布ERC20代币"></a>在ETH私有链上发布ERC20代币</h2><p>ERC20是Fabian Vogelsteller在2015年末提出的以太坊改进建议，它是许多流行的合约都在遵循的标准。 </p><p>ERC20使通证智能合约的行为非常类似于传统的加密货币，例如在不同账户之间发送和接收、查看通证总供应量或者查看某个地址可用的通证余额，就像比特币或以太币一样。这类似于用以太坊钱包 发送和接收以太币、查看流通中的以太币总量、查看特定钱包的货币余额等。</p><p>ERC20规定了一些标准的接口</p><pre><code>contract ERC20Interface {    string public constant name = &quot;Token Name&quot;;    string public constant symbol = &quot;SYM&quot;;    uint8 public constant decimals = 18;  // 18 is the most common number of decimal places    function totalSupply() public constant returns (uint);    function balanceOf(address tokenOwner) public constant returns (uint balance);    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);    function transfer(address to, uint tokens) public returns (bool success);    function approve(address spender, uint tokens) public returns (bool success);    function transferFrom(address from, address to, uint tokens) public returns (bool success);    event Transfer(address indexed from, address indexed to, uint tokens);    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);}</code></pre><p>简单的介绍一下，更加详细的介绍可以在<a href="https://github.com/ethereum/EIPs/issues/20" target="_blank" rel="noopener">github</a>查看</p><pre><code>name ： 代币名称symbol： 代币符号decimals： 代币小数点位数，代币的最小单位totalSupply() : 发行代币总量。balanceOf(): 查看对应账号的代币余额。transfer(): 实现代币交易，用于给用户发送代币（从我们的账户里）transferFrom(): 实现代币用户之间的交易allowance(): 控制代币的交易，如可交易账号及资产approve(): 允许用户可花费的代币数</code></pre><h3 id="编写合约代码"><a href="#编写合约代码" class="headerlink" title="编写合约代码"></a>编写合约代码</h3><p>先编写一个符合ERC20标准的代码</p><pre><code>pragma solidity ^0.4.16;interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }contract TokenERC20 {    string public name;    string public symbol;    uint8 public decimals = 18;  // 18 是建议的默认值    uint256 public totalSupply;    mapping (address =&gt; uint256) public balanceOf;  //     mapping (address =&gt; mapping (address =&gt; uint256)) public allowance;    event Transfer(address indexed from, address indexed to, uint256 value);    event Burn(address indexed from, uint256 value);    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {        totalSupply = initialSupply * 10 ** uint256(decimals);        balanceOf[msg.sender] = totalSupply;        name = tokenName;        symbol = tokenSymbol;    }    function _transfer(address _from, address _to, uint _value) internal {        require(_to != 0x0);        require(balanceOf[_from] &gt;= _value);        require(balanceOf[_to] + _value &gt; balanceOf[_to]);        uint previousBalances = balanceOf[_from] + balanceOf[_to];        balanceOf[_from] -= _value;        balanceOf[_to] += _value;        Transfer(_from, _to, _value);        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);    }    function transfer(address _to, uint256 _value) public {        _transfer(msg.sender, _to, _value);    }    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {        require(_value &lt;= allowance[_from][msg.sender]);     // Check allowance        allowance[_from][msg.sender] -= _value;        _transfer(_from, _to, _value);        return true;    }    function approve(address _spender, uint256 _value) public        returns (bool success) {        allowance[msg.sender][_spender] = _value;        return true;    }    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {        tokenRecipient spender = tokenRecipient(_spender);        if (approve(_spender, _value)) {            spender.receiveApproval(msg.sender, _value, this, _extraData);            return true;        }    }    function burn(uint256 _value) public returns (bool success) {        require(balanceOf[msg.sender] &gt;= _value);        balanceOf[msg.sender] -= _value;        totalSupply -= _value;        Burn(msg.sender, _value);        return true;    }    function burnFrom(address _from, uint256 _value) public returns (bool success) {        require(balanceOf[_from] &gt;= _value);        require(_value &lt;= allowance[_from][msg.sender]);        balanceOf[_from] -= _value;        allowance[_from][msg.sender] -= _value;        totalSupply -= _value;        Burn(_from, _value);        return true;    }}</code></pre><p>然后把这段代码拷贝到<a href="http://remix.ethereum.org/#optimize=false&version=soljson-v0.4.25+commit.59dbf8f1.js" target="_blank" rel="noopener">Solidity</a>，点击旁边的Details获取部署代码</p><p><img src="./167f01705994d26b.png" alt></p><p>然后在弹出层中复制WEB3DEPLOY中的代码到编辑器中</p><p><img src="./167f01767fa2c531.png" alt></p><p>修改代码如图中所示</p><p><img src="./167f017c752a3787.png" alt></p><p>然后将代码复制到geth命令行中，按回车。然后执行<code>miner.start()</code>，如果出现以下信息则表明代币部署成功</p><p><img src="./167f0182236e5734.png" alt></p><blockquote><p>如果出现<code>Error: authentication needed: password or unlock undefined</code>错误，是因为账户没有被解锁，执行<code>personal.unlockAccount(eth.accounts[0])</code>然后输入密码解锁账户</p></blockquote><p>接着我们在命令行中输入<code>tokenerc20</code>则可以看到返回的接口信息</p><p><img src="./167f01899ff07a80.png" alt></p><blockquote><p>address，表示合约地址</p></blockquote><p>可以利用<code>balanceOf</code>函数查看地址的代币余额</p><p><img src="./167f018f235589e1.png" alt></p><p>至此，合约部署完毕</p><p>下一篇文章说说ERC20空投合约的三种实现方式</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
