<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docer镜像原理-overlayfs</title>
      <link href="/2020/11/25/docer-jing-xiang-yuan-li-overlayfs/"/>
      <url>/2020/11/25/docer-jing-xiang-yuan-li-overlayfs/</url>
      
        <content type="html"><![CDATA[<h3 id="Docker镜像原理-OverlayFS"><a href="#Docker镜像原理-OverlayFS" class="headerlink" title="Docker镜像原理-OverlayFS"></a>Docker镜像原理-OverlayFS</h3><p>Docker之所以流行的一个原因就是它发明了“层”的概念，一个镜像是由很多个层组成的。试想如果没有层，当我们要修改一个基础镜像时，就要重新打包一个基础镜像，打包之后的镜像和修改之前的镜像之间就没有了联系。当时间长了之后，会有越来越多这样的镜像，他们之间毫无联系。而当有了层的概念后，我们修改镜像时只需要在最上层对数据进行修改，屏蔽底层的原数据。这样修改后的镜像都是以基础镜像为基础的。</p><p>实现这种层会使用一种叫做联合文件系统，比如：<code>OverlayFS</code>、<code>AUFS</code>和<code>zfs</code>等，<code>OverlayFS</code>要更快、更简单。docker现在是推荐使用<code>OverlayFS</code>，对应的驱动推荐<code>overlay2</code>。每个驱动都有相应的宿主机文件系统要求：</p><table><thead><tr><th><strong>Storage driver</strong></th><th><strong>Supported backing filesystems</strong></th></tr></thead><tbody><tr><td><code>overlay2</code>, <code>overlay</code></td><td><code>xfs</code> with ftype=1, <code>ext4</code></td></tr><tr><td><code>aufs</code></td><td><code>xfs</code>, <code>ext4</code></td></tr><tr><td><code>devicemapper</code></td><td><code>direct-lvm</code></td></tr><tr><td><code>btrfs</code></td><td><code>btrfs</code></td></tr><tr><td><code>zfs</code></td><td><code>zfs</code></td></tr><tr><td><code>vfs</code></td><td>any filesystem</td></tr></tbody></table><p>可以通过<code>docker info</code>查看使用的驱动是什么</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker info</span>Client: Debug Mode: <span class="token boolean">false</span>Server: Containers: 5  Running: 0  Paused: 0  Stopped: 5 Images: 1 Server Version: 19.03.13 Storage Driver: overlay2  Backing Filesystem: extfs  Supports d_type: <span class="token boolean">true</span>  Native Overlay Diff: <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="OverlayFS"><a href="#OverlayFS" class="headerlink" title="OverlayFS"></a>OverlayFS</h4><p><code>OverlayFS</code>是要基于其他文件系统，并不实际参与磁盘划分，仅仅是对源文件目录的合并和隐藏，然后最终展现给用户，这就是联合挂载技术。</p><p><code>OverlayFS</code>实现基于三个目录：lower、upper、work和merge目录，具体的工作方式如下：</p><p><img src="./1.jpeg" alt="1"></p><p>从图中看到，最后合并后的文件会统一在merge层展示，在lower和upper中会存在文件覆盖，但这其实不是真的覆盖，而是优先展示上层的文件</p><h5 id="mount挂载一个OverlayFS系统"><a href="#mount挂载一个OverlayFS系统" class="headerlink" title="mount挂载一个OverlayFS系统"></a><code>mount</code>挂载一个<code>OverlayFS</code>系统</h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mount</span> -t overlay overlay -o lowerdir<span class="token operator">=</span>lower1:lower2:lower3,upperdir<span class="token operator">=</span>upper,workdir<span class="token operator">=</span>work merged<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>lowerdir</code>：指定挂载的lower层目录，可以挂载多个，通过<code>:</code>分隔，在这里例子中优先级：<code>lower1 &gt; lower2 &gt; lower3</code></li><li><code>lowerdir</code>：指定挂载的upper层目录，在该层负责对lower层目录的读写复制</li><li><code>workdir</code>：指定文件系统的工作基础目录，在使用过程中对用户不可见</li></ul><p>下面实际操作下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mkdir -p low1 low2 upper work merged</span><span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "low1" > ./low1/a</span><span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "low1" > ./low1/b</span><span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo "low2" > ./low2/a</span><span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tree</span><span class="token keyword">.</span>├── low1│   ├── a│   └── b├── low2│   └── a├── merged├── upper└── work5 directories, 3 files<span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount -t overlay overlay -o lowerdir=low1:low2,upperdir=upper,workdir=work merged</span><span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># tree</span><span class="token keyword">.</span>├── low1│   ├── a│   └── b├── low2│   └── a├── merged│   ├── a│   └── b├── upper└── work    └── work6 directories, 5 files<span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat merged/a</span>low1<span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat merged/b</span>low1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在lower层中的文件都合并到了merged文件夹中，因为low1的优先级高于low2，所以在merged文件夹中都显示的是low1中的文件</p><p>可以通过<code>mount</code>命令查看挂载情况</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># mount -l | grep overlay</span>overlay on /tmp/oo/merged <span class="token function">type</span> overlay <span class="token punctuation">(</span>rw,relatime,lowerdir<span class="token operator">=</span>low1:low2,upperdir<span class="token operator">=</span>upper,workdir<span class="token operator">=</span>work<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="OverlayFS的特性和限制"><a href="#OverlayFS的特性和限制" class="headerlink" title="OverlayFS的特性和限制"></a><code>OverlayFS</code>的特性和限制</h5><ul><li>可以不指定upperdir和workdir，同时保证lowder&gt;=2，此时为只读挂载（实现只读挂载的唯一方式）。</li><li>upperdir和workdir必须是可写的，而且不能是父子关系</li><li>pperdir所在的文件不能是<code>gfs</code>、<code>nfs</code>这种远程文件系统，而lowdir因为是只读的，所以没有这种限制</li><li>用户指定的lowdir最多可支持500层</li></ul><h5 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h5><p><strong>删除只存在于upperdir的文件</strong></p><p>这种情况比较简单，因为在upperdir中是可写的，所以直接删除</p><p><strong>删除的文件存在于lowerdir层，upperdir中不存在覆盖文件</strong></p><p>由于lowerdir是可读的，所以采用了without文件，就是当删除时，会创建一个月删除文件同名的without文件，在merge层执行<code>ls</code>时会自动过滤掉与without同名的lowerdir文件，利用障眼法进行了“删除”，实际上lowerdir中的文件并没有删除。without文件并非一个普通文件，它的主次设备号都为0，可以通过<code>mknod xx c 0 0</code>手动创建一个without文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm merged/a</span><span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd upper/; ls -l</span>total 0<span class="token comment" spellcheck="true"># a 文件为 without 文件</span>c--------- 1 root root 0, 0 Nov 30 22:59 a<span class="token comment" spellcheck="true"># lowerdir中的原文件并没有删除</span><span class="token punctuation">[</span>root@VM-0-16-centos oo<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat low1/a</span>low1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除的文件是upperdir覆盖lowerdir的</strong></p><p>这种情况就是上述两种方式的结合，首先会删除upper中的文件，在创建和lowerdir中同名的without文件。</p><h5 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h5><p><strong>创建一个全新的文件</strong></p><p>新创建的文件在lowerdir和upperdir都没有同名的文件，则直接在upperdir创建</p><p><strong>创建一个在lowerdir中有，但是在upperdir中有without同名文件</strong></p><p>这种情况会先删除upperdir中的without同名文件，然后在uppperdir中创建新的文件</p><p><strong>创建一个在lowerdir中有，但是在upperdir中有without同名的目录</strong></p><p>这种与上面的情况不同的是，文件变成了目录，如果按照上述的方式，新建一个目录覆盖同名的without目录，由于上下层合并的原因，这样就会使lowerdir中的文件显示出来。<code>OverlayFS</code>引入了一种属性：Opaque，它是通过在upper层对应的目录上设置”trusted.overlay.opaque”扩展属性值为”y”来实现</p><h5 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h5><p>修改文件最主要的就是<code>copy_up（写时复制）</code>特性，就是当修改lowerdir中的文件或者目录时，由于lowerdir是只读的所以就会触发<code>copy_up</code>，会先将lowerdir中的文件拷贝出来一份，然后在拷贝出来的文件上进行修改。如果修改uppperdir中的文件，则会直接修改并不触发<code>copy_up</code>特性</p><h5 id="原子性保证"><a href="#原子性保证" class="headerlink" title="原子性保证"></a>原子性保证</h5><p>之前都没有介绍到workdir目录，这个目录主要的作用就是进行一些中间操作，比如原子性就是在这个文件夹中保证的，比如在删除一个uppperdir覆盖了lowerdir的文件时，怎样防止在删除了upperdir中的文件，而没有创建同名的without文件呢？这就是workdir的作用了。在删除文件时，首先会在workdir目录中创建一个同名的without文件，然后在与uppperdir中的文件进行rename操作，操作成功之后在删除workdir中的without文件</p><h4 id="OverlayFs在docker中的应用"><a href="#OverlayFs在docker中的应用" class="headerlink" title="OverlayFs在docker中的应用"></a>OverlayFs在docker中的应用</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-16-centos overlay2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker images</span>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZEubuntu              18.04               56def654ec22        2 months ago        63.2MB<span class="token punctuation">[</span>root@VM-0-16-centos overlay2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># docker inspect 56def654ec22</span> <span class="token string">"GraphDriver"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Data"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"LowerDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/a63fdd66f58791c3f414b63208267b2476d001633c93ccc371ffe960437a7577/diff:/var/lib/docker/overlay2/4c3fed8b54b91f7608ab666ab126ed36481aa97b091b1a51f80692810fe61a67/diff"</span>,                <span class="token string">"MergedDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/11648f0c30e578e7e8836708e6723ebf528d13425327b710ef1d06d18ff83371/merged"</span>,                <span class="token string">"UpperDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/11648f0c30e578e7e8836708e6723ebf528d13425327b710ef1d06d18ff83371/diff"</span>,                <span class="token string">"WorkDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/11648f0c30e578e7e8836708e6723ebf528d13425327b710ef1d06d18ff83371/work"</span>            <span class="token punctuation">}</span>,            <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"overlay2"</span>        <span class="token punctuation">}</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们使用<code>docker inspect</code>命令就可以查看到该镜像对应各个目录</p><p>docker会将拉取到的文件存放在<code>/var/lib/docker/overlay2</code>目录下</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-16-centos overlay2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pwd</span>/var/lib/docker/overlay2<span class="token punctuation">[</span>root@VM-0-16-centos overlay2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>11648f0c30e578e7e8836708e6723ebf528d13425327b710ef1d06d18ff833711f8f36ae9c74e96a6a97b54173cd79746638a6ecc7d19c4805af8a5c5587a8bd1f8f36ae9c74e96a6a97b54173cd79746638a6ecc7d19c4805af8a5c5587a8bd-init4c0e4ced5e0bbc00799b7a5e5d959a5e3a3b977020e26389be4d2fd6ff30b9ca4c0e4ced5e0bbc00799b7a5e5d959a5e3a3b977020e26389be4d2fd6ff30b9ca-init4c3fed8b54b91f7608ab666ab126ed36481aa97b091b1a51f80692810fe61a675727168d99cd3519bce44e1d7c088f09070bc3f3eceb577dce55a7db494a3d345727168d99cd3519bce44e1d7c088f09070bc3f3eceb577dce55a7db494a3d34-init583c41e944e3295f9381029c747e82c7ac84d9ae1a87858b0117313445cdda4f583c41e944e3295f9381029c747e82c7ac84d9ae1a87858b0117313445cdda4f-inita63fdd66f58791c3f414b63208267b2476d001633c93ccc371ffe960437a7577fab2db742104dd81cac5320de2fc48ef84aec258f3ab883bb1ab311482e2adfafab2db742104dd81cac5320de2fc48ef84aec258f3ab883bb1ab311482e2adfa-init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这就是最原始的镜像文件，我们在查看<code>l</code>目录，它里面都是硬链接</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-16-centos overlay2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -li l</span>total 5232831 lrwxrwxrwx 1 root root 72 Nov 19 14:35 3R56BVMBIF225OGKEMAQIFUVUZ -<span class="token operator">></span> <span class="token punctuation">..</span>/11648f0c30e578e7e8836708e6723ebf528d13425327b710ef1d06d18ff83371/diff34993 lrwxrwxrwx 1 root root 72 Nov 21 20:56 67HAUO6BXOTJHXOSC6ICAFVHPY -<span class="token operator">></span> <span class="token punctuation">..</span>/fab2db742104dd81cac5320de2fc48ef84aec258f3ab883bb1ab311482e2adfa/diff34997 lrwxrwxrwx 1 root root 72 Nov 21 20:57 FDGIZNQ3EKOPQKJANNK6GH4OIZ -<span class="token operator">></span> <span class="token punctuation">..</span>/5727168d99cd3519bce44e1d7c088f09070bc3f3eceb577dce55a7db494a3d34/diff34994 lrwxrwxrwx 1 root root 77 Nov 21 20:57 GCU24DFW64JCDH3RTJRTQA56SF -<span class="token operator">></span> <span class="token punctuation">..</span>/5727168d99cd3519bce44e1d7c088f09070bc3f3eceb577dce55a7db494a3d34-init/diff34990 lrwxrwxrwx 1 root root 72 Nov 19 14:35 GHRFXFKUOD3FX6JHQEVP73DO4B -<span class="token operator">></span> <span class="token punctuation">..</span>/a63fdd66f58791c3f414b63208267b2476d001633c93ccc371ffe960437a7577/diff32769 lrwxrwxrwx 1 root root 77 Nov 21 21:12 IHMBLFPSCBWMRH2TOE5DN5JR6H -<span class="token operator">></span> <span class="token punctuation">..</span>/1f8f36ae9c74e96a6a97b54173cd79746638a6ecc7d19c4805af8a5c5587a8bd-init/diff34996 lrwxrwxrwx 1 root root 72 Nov 19 14:59 JELF2EVIM5Z6YEU5PRDKGGPIDR -<span class="token operator">></span> <span class="token punctuation">..</span>/4c0e4ced5e0bbc00799b7a5e5d959a5e3a3b977020e26389be4d2fd6ff30b9ca/diff32773 lrwxrwxrwx 1 root root 72 Nov 21 21:12 N6NNKJ6WNRXZTTXMMOMU4H7DNZ -<span class="token operator">></span> <span class="token punctuation">..</span>/1f8f36ae9c74e96a6a97b54173cd79746638a6ecc7d19c4805af8a5c5587a8bd/diff34998 lrwxrwxrwx 1 root root 77 Nov 22 23:27 QBFJRGTIVSX4J5FFW2ELZXD732 -<span class="token operator">></span> <span class="token punctuation">..</span>/583c41e944e3295f9381029c747e82c7ac84d9ae1a87858b0117313445cdda4f-init/diff34992 lrwxrwxrwx 1 root root 77 Nov 21 20:56 RWKSWEW3BV22DU3GK4JL3XJIQZ -<span class="token operator">></span> <span class="token punctuation">..</span>/fab2db742104dd81cac5320de2fc48ef84aec258f3ab883bb1ab311482e2adfa-init/diff32835 lrwxrwxrwx 1 root root 72 Nov 19 14:35 SPZRGHFYA5BWO3HWZG37NZNMHQ -<span class="token operator">></span> <span class="token punctuation">..</span>/4c3fed8b54b91f7608ab666ab126ed36481aa97b091b1a51f80692810fe61a67/diff34999 lrwxrwxrwx 1 root root 72 Nov 22 23:27 T3JTRBFZIMJFZ2X3BFHNQILFEF -<span class="token operator">></span> <span class="token punctuation">..</span>/583c41e944e3295f9381029c747e82c7ac84d9ae1a87858b0117313445cdda4f/diff34995 lrwxrwxrwx 1 root root 77 Nov 19 14:59 YA5XAAG2B26GQXUWU6SI3MUYZM -<span class="token operator">></span> <span class="token punctuation">..</span>/4c0e4ced5e0bbc00799b7a5e5d959a5e3a3b977020e26389be4d2fd6ff30b9ca-init/diff<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入到<code>docker inspect</code>中的镜像目录，就可以在<code>lower</code>目录中查看到这些硬链接，他和<code>docker inspect</code>中查看到的Lowerdir是对应的</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-16-centos overlay2<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cd 11648f0c30e578e7e8836708e6723ebf528d13425327b710ef1d06d18ff83371/</span><span class="token punctuation">[</span>root@VM-0-16-centos 11648f0c30e578e7e8836708e6723ebf528d13425327b710ef1d06d18ff83371<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls</span>committed  <span class="token function">diff</span>  <span class="token function">link</span>  lower  work<span class="token punctuation">[</span>root@VM-0-16-centos 11648f0c30e578e7e8836708e6723ebf528d13425327b710ef1d06d18ff83371<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat lower</span>l/GHRFXFKUOD3FX6JHQEVP73DO4B:l/SPZRGHFYA5BWO3HWZG37NZNMHQ<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当运行一个容器时也可以利用<code>docker inspect</code>查看容器运行时的文件挂载情况</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token string">"GraphDriver"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"Data"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"LowerDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/2a3171e9238eb75cd2831f59eab7b43f61de7d09674aae0a01f4072da86b3aeb-init/diff:/var/lib/docker/overlay2/11648f0c30e578e7e8836708e6723ebf528d13425327b710ef1d06d18ff83371/diff:/var/lib/docker/overlay2/a63fdd66f58791c3f414b63208267b2476d001633c93ccc371ffe960437a7577/diff:/var/lib/docker/overlay2/4c3fed8b54b91f7608ab666ab126ed36481aa97b091b1a51f80692810fe61a67/diff"</span>,                <span class="token string">"MergedDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/2a3171e9238eb75cd2831f59eab7b43f61de7d09674aae0a01f4072da86b3aeb/merged"</span>,                <span class="token string">"UpperDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/2a3171e9238eb75cd2831f59eab7b43f61de7d09674aae0a01f4072da86b3aeb/diff"</span>,                <span class="token string">"WorkDir"</span><span class="token keyword">:</span> <span class="token string">"/var/lib/docker/overlay2/2a3171e9238eb75cd2831f59eab7b43f61de7d09674aae0a01f4072da86b3aeb/work"</span>            <span class="token punctuation">}</span>,            <span class="token string">"Name"</span><span class="token keyword">:</span> <span class="token string">"overlay2"</span>        <span class="token punctuation">}</span>,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在容器中的文件其实都是这些文件联合挂载的结果，同样在容器中修改文件也会按照之前OverlayFS的方式同样的体现在这些文件中</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker中的Namespace和Cgroups</title>
      <link href="/2020/11/08/docker-zhong-de-namespace-he-cgroups/"/>
      <url>/2020/11/08/docker-zhong-de-namespace-he-cgroups/</url>
      
        <content type="html"><![CDATA[<h3 id="docker中的Namespace和Cgroups"><a href="#docker中的Namespace和Cgroups" class="headerlink" title="docker中的Namespace和Cgroups"></a>docker中的Namespace和Cgroups</h3><p>docker内部用到的技术其实很早就出现了，也应用到了很多的场景当中，尤其在PaaS中用到的特别多。</p><p>docker之所以流行是因为如下几个原因：</p><ul><li>他发明了“镜像”的概念，解决了PaaS中要为不同用户不同服务打压缩包繁琐的过程</li><li>把一个完全纯后端的概念，通过非常好的封装能够让广大的开发者容易上手，比如前端工程师可以经过简单的学习就能独立部署自己的项目</li></ul><p>docker容器采用了Namespace和Cgroups实现环境隔离。</p><p>Namespace技术实际上修改了应用进程看待整个计算机的视图，既它的“视线”被操作系统做了限制，只能看到某些指定的内容。对于宿主机来说，这些被“隔离”了的进程和其他进程并没有太大区别。这也是和虚拟机根本区别的地方，它并没有单独划分出硬件，在划分的硬件上再启动一个系统。而只是对进程进行了“隔离”。具体的Namespace都有：<code>Mount</code>、<code>UTS</code>、<code>IPC</code>、<code>Network</code>和<code>User</code>docker。</p><p>其实每一个容器都是docker daemon下的子进程</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看容器内部进程</span>z@master:~$ <span class="token function">sudo</span> docker <span class="token function">top</span> 7cf736989611UID                 PID                 PPID                C                   STIME               TTY                 TIME                CMDroot                35890               35772               0                   Nov05               ?                   00:00:33            /root/xx<span class="token comment" spellcheck="true"># 查看35772的父进程</span>z@master:~$ <span class="token function">ps</span> -le <span class="token operator">|</span> <span class="token function">grep</span> 357724 S     0  35772   2165  0  80   0 -  2491 -      ?        00:01:07 docker-containe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>容器内新启动的进程也是docker daemon下的子进程</p><p><strong>所以说，容器，其实是一种特殊的进程</strong></p><p><img src="./d1bb34cda8744514ba4c233435bf4e96.jpg" alt="img"></p><p>上面的图是虚拟机和docker对比不太准确的一个图，<code>Docker Engine</code>是不能和<code>Hypervisor</code>放到同一级的，并不会像Hypervisor一样将虚拟机的指令转换成宿主机的指令，在<code>Docker</code>中，是宿主机直接管理进程的</p><p>因为没有Hypervisor和Guest OS，容器相较于虚拟机有更高的性能，更小的资源消耗。当然有利也有弊，基于Namespace隔离就会隔离不彻底，容器就是宿主机上的一种进程，那么容器之间就是共享宿主机操作系统内核的。这就意味着在windows上不能运行Linux容器，或者在低版本的Linux宿主机上运行高版本的Linux是行不通的。第二个就是有些资源是不能被Namespace隔离的，比如：时间。</p><p>容器在通过Namespace技术隔离后，还有另外一个重要的技术就是Cgroups，<strong>Cgroups的全称是Linux Control Group 。它最重要的作用，就是限制一个进程组能够使用的资源，包括CPU、内存、磁盘、网络带宽等</strong></p><p>Cgroups也有它自己的不足，比如<code>/proc</code>文件系统，<code>/proc</code>文件下存储的是当前内核运行状态的一系列特殊文件，用户可以通过访问这些文件查看系统以及它正在运行的进程的信息，这也是<code>top</code>指令最主要的数据来源。</p><p>但是，你如果在容器里执行<code>top</code>指令，就会发现他显示的是宿主机的数据，而不是当前容器的数据，原因是，<code>/proc</code>文件系统并不了解Cgroups的存在，不知道Cgroups对这个容器做了什么样的限制</p><p>下面说一下Mount Namespace，我们在每个容器内部都只能看到该容器的文件系统而不是宿主机的文件系统就是得益于该技术，而Mount Namespace技术就是基于<code>chroot</code>开发出来的。<code>chroot</code>命令用于设置一个进程的根目录。而这个挂载在容器根目录上、用来为容器提供隔离后执行环境的文件系统，就是所谓的“容器镜像”，有个更加专业的名字：<code>rootfs（根文件系统）</code>。</p><p>需要注意的是<code>rootfs</code>只是规定了操作系统的文件、目录和结构等，只是一个框架，并不包含内核，容器用的是宿主机的内核。正是由于<code>rootfs</code>才有了容器中最为重要的<strong>一致性</strong>，在打镜像的时候会将整个操作系统的文件系统进行打包，这样就避免了需要在不同环境上运行程序的各种适配问题。</p><p>到这里，我们就知道了docker他最核心的原理就是为创建的进程：</p><ol><li>启用Linux Namespace配置</li><li>设置指定的Cgroups参数</li><li>切换进程的根目录</li></ol><p>docker在<code>rootfs</code>的基础上创新了“层”的概念，通过联合文件系统（Union File System）实现。</p><p>想一下如果没有层的概念，我们要对一个基础镜像修改时，每个人都得执行下制作整个镜像的过程，而且制作后的镜像他们完全没有关联。</p><p>如果有了层的概念，我们只需要在基础镜像上进行修改，每个人都用同一个基础镜像，制作后的的镜像都是基于同一个基础镜像。</p><p>docker中的层可以分为三层（以aufs为例）：</p><p><img src="./8a7b5cfabaab2d877a1d4566961edd5f.png" alt="img"></p><ol><li><p><strong>只读层</strong></p><p>包含了操作系统最基础的一部分</p></li><li><p><strong>init层</strong></p><p>专门用来存放/etc/hosts、/etc/resolv.conf等信息。这一层的作用就是可以让用户修改一些和本容器强相关的配置，比如hostname、指定的域名解析等。这些修改都只针对该容器，不同容器会有不同配置。而这些修改是不会被<code>docker commit</code>制作到镜像当中</p></li><li><p><strong>可读写层</strong></p><p>在这个层可以对操作系统中的文件进行修改，而进行的修改，比如删除、修改等。都是将只读层的文件拷贝出来，重新写一个文件。删除操作也是，并不会实际删除文件，比如删除<code>test</code>文件，在读写层会新写一个<code>.wh.test</code>文件，标识该<code>test</code>文件已经被删除</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Go语言实战》笔记</title>
      <link href="/2020/11/04/go-yu-yan-shi-zhan-bi-ji/"/>
      <url>/2020/11/04/go-yu-yan-shi-zhan-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="第一章-关于Go语言的介绍"><a href="#第一章-关于Go语言的介绍" class="headerlink" title="第一章 关于Go语言的介绍"></a>第一章 关于Go语言的介绍</h3><h4 id="1-1-用-Go-解决现代编程难题"><a href="#1-1-用-Go-解决现代编程难题" class="headerlink" title="1.1 用 Go 解决现代编程难题"></a>1.1 用 Go 解决现代编程难题</h4><h5 id="1-1-2-并发"><a href="#1-1-2-并发" class="headerlink" title="1.1.2 并发"></a>1.1.2 并发</h5><p>需要注意的是，如果在通道中传递的是指向数据的指针，而且读和写是在不同的<code>goroutine</code>完成的，则会出现问题，需要加锁进行控制</p><p>在Golang中对于并发问题的控制，优先要用通道的解决办法，这是语言设计的思想，在用通道实现比较麻烦的情况下可以用锁来实现</p><p>比如：</p><pre class="line-numbers language-go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"sync"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 利用通道</span>    done <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"你好, 世界"</span><span class="token punctuation">)</span>        done <span class="token operator">&lt;-</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token operator">&lt;-</span>done    <span class="token comment" spellcheck="true">// 利用锁</span>    <span class="token keyword">var</span> lock sync<span class="token punctuation">.</span>Mutex    lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">go</span> <span class="token keyword">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>        lock<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    lock<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="1-1-3-Go-语言的类型系统"><a href="#1-1-3-Go-语言的类型系统" class="headerlink" title="1.1.3 Go 语言的类型系统"></a>1.1.3 Go 语言的类型系统</h5><p>Go语言也同样支持面向对象开发，但是采用的思路是组合而不是继承</p><p><img src="%E3%80%8AGo%E8%AF%AD%E8%A8%80%E5%AE%9E%E6%88%98%E3%80%8B%E7%AC%94%E8%AE%B0/image-20201104154409620.png" alt="image-20201104154409620"></p><h3 id="第3章-打3包和工具链"><a href="#第3章-打3包和工具链" class="headerlink" title="第3章 打3包和工具链"></a>第3章 打3包和工具链</h3><h4 id="3-1-包"><a href="#3-1-包" class="headerlink" title="3.1 包"></a>3.1 包</h4><h5 id="3-1-1-包名惯例"><a href="#3-1-1-包名惯例" class="headerlink" title="3.1.1 包名惯例"></a>3.1.1 包名惯例</h5><p>包名一般和目录同名，小写</p><h5 id="3-1-2-main-包"><a href="#3-1-2-main-包" class="headerlink" title="3.1.2 main 包"></a>3.1.2 main 包</h5><p>go语言程序中必须有一个main的包，go语言编译的时候会把这个包编译为可执行的二进制文件</p><h4 id="3-5-进一步介绍-Go-开发工具"><a href="#3-5-进一步介绍-Go-开发工具" class="headerlink" title="3.5 进一步介绍 Go 开发工具"></a>3.5 进一步介绍 Go 开发工具</h4><h5 id="3-5-1-go-vet"><a href="#3-5-1-go-vet" class="headerlink" title="3.5.1 go vet"></a>3.5.1 go vet</h5><p>vet 命令会检测代码的常见错误</p><h5 id="3-5-2-Go-代码格式化"><a href="#3-5-2-Go-代码格式化" class="headerlink" title="3.5.2 Go 代码格式化"></a>3.5.2 Go 代码格式化</h5><p>要多使用 <code>go fmt</code></p><h4 id="3-6-与其他Go开发者合作"><a href="#3-6-与其他Go开发者合作" class="headerlink" title="3.6 与其他Go开发者合作"></a>3.6 与其他Go开发者合作</h4><ol><li>包应该在代码库的根目录中。golang的包最好不要嵌套文件目录，都全部放在项目根目录下，因为导入一个包是需要导入全路径的，如果嵌套的多，那么导入的路径就会很长。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP笔记</title>
      <link href="/2020/11/04/http-bi-ji/"/>
      <url>/2020/11/04/http-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="01-时势与英雄：HTTP的前世今生"><a href="#01-时势与英雄：HTTP的前世今生" class="headerlink" title="01 | 时势与英雄：HTTP的前世今生"></a>01 | 时势与英雄：HTTP的前世今生</h1><h4 id="HTTP-0-9"><a href="#HTTP-0-9" class="headerlink" title="HTTP/0.9"></a>HTTP/0.9</h4><p>1、20世纪90年代初，HTTP/0.9诞生，只有GET请求，并且传输的是文本</p><h4 id="HTTP-1-0"><a href="#HTTP-1-0" class="headerlink" title="HTTP/1.0"></a>HTTP/1.0</h4><p>因为增加了图片，音频等，所以需要支持更多的内容，在1996年发布，只是一个版本</p><ol><li>增加了HEAD、POST等新方法</li><li>增加了响应码</li><li>增加了协议版本号</li><li>引入了HTTP Header的概念</li><li>支持传输的不在仅限于文本</li></ol><h4 id="HTTP-1-1"><a href="#HTTP-1-1" class="headerlink" title="HTTP/1.1"></a>HTTP/1.1</h4><p>该版本只是对1.0的小幅度修改，但是他是一个标准</p><ol><li>增加了PUT、DELETE方法</li><li>增加了缓存机制</li><li>明确了连接管理，允许持久连接</li><li>允许响应数据分块，利于传输大文件</li><li>强制要求Host头</li></ol><h4 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP/2.0"></a>HTTP/2.0</h4><p>2015年诞生，基于Google的SPDY协议</p><ol><li>二进制协议，不再是纯文本</li><li>可以发起多个请求</li><li>使用专用算法，压缩头部</li><li>允许服务器主动向客户端推送数据</li><li>增强了安全性，要求通信加密</li></ol><h4 id="HTTP-3-0"><a href="#HTTP-3-0" class="headerlink" title="HTTP/3.0"></a>HTTP/3.0</h4><p>基于Google的QUIC协议，2018年开始制定标准，还未诞生</p><h1 id="02-HTTP是什么？HTTP又不是什么"><a href="#02-HTTP是什么？HTTP又不是什么" class="headerlink" title="02 | HTTP是什么？HTTP又不是什么"></a>02 | HTTP是什么？HTTP又不是什么</h1><h4 id="HTTP是什么"><a href="#HTTP是什么" class="headerlink" title="HTTP是什么"></a>HTTP是什么</h4><p>是超文本传输协议</p><p><strong>协议</strong>：计算机之间沟通交流的一个规范<br><strong>传输</strong>：计算机世界里两个点之间传输数据的约定和规范<br><strong>超文本</strong>:这里的文本指的不是传文本，而是图片、视屏、音频等都可以算作是文本，而超文本，就是这种文本的混合体，关键的是含有超链接，能够从一个文本跳跃到另外一个文本<br>HTTP是计算机世界中用户两点之间传输视屏、文本、图片等数据的一个约定和规范</p><h4 id="HTTP不是什么"><a href="#HTTP不是什么" class="headerlink" title="HTTP不是什么"></a>HTTP不是什么</h4><p>只是一个种协议，和FTP、SMTP协议一样</p><p>HTTP不是一个孤立的协议，通常跑在TCP/IP协议栈上,依靠IP协议实现寻址和路由、TCP协议实现可靠传输、DNS协议实现域名查找、SSL/TLS协议实现安全通信</p><h1 id="03-HTTP世界全览（上）：与HTTP相关的各种概念"><a href="#03-HTTP世界全览（上）：与HTTP相关的各种概念" class="headerlink" title="03 | HTTP世界全览（上）：与HTTP相关的各种概念"></a>03 | HTTP世界全览（上）：与HTTP相关的各种概念</h1><h4 id="网络世界"><a href="#网络世界" class="headerlink" title="网络世界"></a>网络世界</h4><p>我们通常说的上网其实是万维网，他只是网络世界中的一个子集。万维网是基于HTTP实现的，传输超文本资源。能力也就被限制在HTTP协议之内。</p><p>除了万维网还有很多其他的资源，例如FTP网络下载，SSH安全登录、各种即时通信等</p><p>但是HTTP协议非常灵活，易于扩展，而且超文本表述能力很强，可以把原本不属于超文本的资源包装成HTTP来访问。例如微信网页版、邮箱网页版等</p><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><p>浏览器也被成为用户代理</p><h4 id="web服务器"><a href="#web服务器" class="headerlink" title="web服务器"></a>web服务器</h4><p>比较有名的是Apache和Nginx</p><h4 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h4><p>CDN:”Content Delivery Network”，既内容分发网络。利用了HTTP的缓存和代理技术。可以不用直接访问源网站就可以得到数据</p><p>CDN的功能不止基本的网络加速功能，还提供负载均衡，安全防护，跨运营商网络等功能</p><h4 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h4><p>据估计，网络中50%的流量都是由爬虫产生的</p><h1 id="04-HTTP世界全览（下）：与HTTP相关的各种协议"><a href="#04-HTTP世界全览（下）：与HTTP相关的各种协议" class="headerlink" title="04 | HTTP世界全览（下）：与HTTP相关的各种协议"></a>04 | HTTP世界全览（下）：与HTTP相关的各种协议</h1><h4 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h4><p>IP协议主要解决的是寻址和路由的问题，IP协议使用IP地址标识和定位互联网上的每一台计算机</p><p>TCP协议，位于IP协议之上，基于IP协议提供可靠的、字节流形式的通信</p><h4 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h4><p>将域名解析为IP，域名最右边的为顶级域名，例如com、cn、edu</p><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>其实URL是URI的一个子集，但是现在不怎么区分了，主要有三个部分组成：协议名、主机名、路径</p><h4 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h4><p>加密通信</p><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><ol><li><p>匿名代理：完全隐藏了被代理的机器，外界看到的知识代理服务器</p></li><li><p>透明代理：外界既知道代理，也知道客户端</p></li><li><p>正向代理：靠近客户端，代表客户端向服务器发送请求（VPN翻墙）</p></li><li><p>反向代理：靠近服务端，代表服务器响应客户端的请求</p></li></ol><p>可以做很多的事情：</p><ol><li>负载均衡</li><li>内容缓存</li><li>安全防护</li><li>数据处理</li></ol><h1 id="05-常说的“四层”和“七层”到底是什么？“五层”“六层”哪去了？"><a href="#05-常说的“四层”和“七层”到底是什么？“五层”“六层”哪去了？" class="headerlink" title="05 | 常说的“四层”和“七层”到底是什么？“五层”“六层”哪去了？"></a>05 | 常说的“四层”和“七层”到底是什么？“五层”“六层”哪去了？</h1><h3 id="TCP-IP-网络分层模型"><a href="#TCP-IP-网络分层模型" class="headerlink" title="TCP/IP 网络分层模型"></a>TCP/IP 网络分层模型</h3><p>TCP/IP设计者非常有前瞻性，采用了分层设计，每个层都分配不同的职责。将一个大问题分成了许多个小问题。</p><img src="./TCP:IP .png" alt="TCP:IP " style="zoom:30%;"><ol><li><p>链路层，负责在以太网和WIFI上发送数据，是工作在网卡上的，利用MAC地址标识每个计算机，传输单位是帧</p></li><li><p>网络互连层，IP协议工作的地方，在这一层将MAC地址转为IP地址，或者是将IP地址转成MAC地址，传输单位是包</p></li><li><p>传输层，TCP协议工作的地方，负责互联网中两个点之间的可靠的，字节流的传输数据，传输单位是段</p><p>TCP是可靠的传输，不会丢失数据，不会发送重复数据，发出和接受的包是有顺序的，并且需要先建立连接才可以通信</p><p>UDP是不可靠的传输，不会保证数据不丢失不重复，发包是顺序的，收包是杂乱的。不需要建立连接就直接发送数据</p></li><li><p>应用层，各种面向具体应用的协议。比如HTTP,FTP等等，传输单位是报文</p></li></ol><h3 id="OSI网络分层模型"><a href="#OSI网络分层模型" class="headerlink" title="OSI网络分层模型"></a>OSI网络分层模型</h3><img src="./OSI.png" alt="OSI" style="zoom:30%;"><ol><li>物理层：网络的物理形式，比如光纤、电缆、网卡等</li><li>链路层：相当于TCP/IP的链路层</li><li>网络层：相当于TCP/IP的网络连接层</li><li>传输层：相当于TCP/IP的传输层</li><li>会话层：维持网络中的会话状态，既保持会话保持和同步</li><li>表示层：将数据转换为合适的、可理解的格式</li><li>应用层：面向具体的应用传输数据</li></ol><h3 id="两个分层模型的映射关系"><a href="#两个分层模型的映射关系" class="headerlink" title="两个分层模型的映射关系"></a>两个分层模型的映射关系</h3><img src="./TCP:IP2OSI.png" alt="OSI" style="zoom:30%;"><h3 id="TCP-IP-协议栈的工作方式"><a href="#TCP-IP-协议栈的工作方式" class="headerlink" title="TCP/IP 协议栈的工作方式"></a>TCP/IP 协议栈的工作方式</h3><p>![TCP:IP work](./TCP:IP work.png)</p><h1 id="06-域名里有哪些门道？"><a href="#06-域名里有哪些门道？" class="headerlink" title="06 | 域名里有哪些门道？"></a>06 | 域名里有哪些门道？</h1><h3 id="域名的形式"><a href="#域名的形式" class="headerlink" title="域名的形式"></a>域名的形式</h3><p>格式：主机名.二级域名.顶级域名</p><h3 id="域名的解析"><a href="#域名的解析" class="headerlink" title="域名的解析"></a>域名的解析</h3><img src="./DNS.png" alt="DNS" style="zoom:30%;"><ol><li>根域名服务器：管理顶级域名服务器，返回例如com、net、cn等顶级域名服务器的IP地址</li><li>顶级域名服务器：管理权威服务器，比如，com顶级域名服务器会返回apple.com服务器的地址</li><li>权威域名服务器：管理自己域名下的主机IP地址，比如<a href="http://www.apple.com的地址" target="_blank" rel="noopener">www.apple.com的地址</a></li></ol><p>目前全世界只有13个根服务器，全世界有很多非权威服务器。会缓存DNS解析记录，如果有缓存就不会去访问DNS根服务器。比较有名的是Google的8.8.8.8。</p><p>个人电脑的DNS解析过程：浏览器缓存-&gt;操作系统缓存-&gt;Hosts文件-&gt;非权威域名服务器-&gt;根域名服务器-&gt;顶级域名服务器-&gt;权威域名服务器</p><h1 id="08-键入网址再按下回车，后面究竟发生了什么？"><a href="#08-键入网址再按下回车，后面究竟发生了什么？" class="headerlink" title="08 | 键入网址再按下回车，后面究竟发生了什么？"></a>08 | 键入网址再按下回车，后面究竟发生了什么？</h1><h1 id="09-HTTP报文是什么样子的？"><a href="#09-HTTP报文是什么样子的？" class="headerlink" title="09 | HTTP报文是什么样子的？"></a>09 | HTTP报文是什么样子的？</h1><h3 id="报文结构"><a href="#报文结构" class="headerlink" title="报文结构"></a>报文结构</h3><img src="./TCP结构.png" alt="TCP结构" style="zoom:30%;"><p>HTTP结构和TCP结构相同，都需要在数据上添加很多额外的信息，比如端口和序号等。只有这些数据，tcp包才能正确的送到目的地。HTTP有一个部分不同的是，传输的数据都是ASCII的文本，很容易用肉眼阅读</p><p>HTTP结构有三部分构成：</p><ol><li>起始行：描述请求或者响应</li><li>头部字段集合：使用Key-value的形式说明报文</li><li>消息正文：实际传输的数据</li></ol><p>HTTP报文中必须有header,可以没有body，但是header后必须要有一个“空行”，也就是“CRLF”，十六进制的“0D0A”</p><p>完整的报文格式：</p><p><img src="./HTTP%E7%BB%93%E6%9E%84.png" alt="HTTP结构"></p><p><img src alt></p><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>在请求报文中，起始行也叫做请求行，描述了客户端想要如何操作服务端的资源</p><p>请求行由三部分组成：</p><ol><li>请求方法：例如GET</li><li>请求目标：是一个URI</li><li>版本号：表示报文使用的HTTP协议版本号</li></ol><p>三个组成部分由空格分割，最后由“CRLF”换行表示结束</p><p><img src="./%E8%AF%B7%E6%B1%82%E8%A1%8C.png" alt="请求行"></p><p><img src="./%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%AE%9E%E4%BE%8B.png" alt="请求头实例"></p><h3 id="状态行"><a href="#状态行" class="headerlink" title="状态行"></a>状态行</h3><p>响应报文中的起始行叫做状态行，表示服务器的状态</p><p>三个部分组成：</p><ol><li>版本号：表示使用的HTTP版本号</li><li>状态码：一个三位数</li><li>原因：作为数字状态码补充</li></ol><p><img src="./%E7%8A%B6%E6%80%81%E8%A1%8C.png" alt="状态行"></p><p><img src="./%E7%8A%B6%E6%80%81%E8%A1%8C%E5%AE%9E%E4%BE%8B.png" alt="状态行实例"></p><h3 id="头部字段"><a href="#头部字段" class="headerlink" title="头部字段"></a>头部字段</h3><p><img src="./http%E7%BB%93%E6%9E%841.png" alt="http结构1"></p><p><img src="./http%E7%BB%93%E6%9E%842.png" alt="http结构2"></p><p>头部字段是key-value的格式，而且头部字段可以添加自定义的字段</p><p>使用头部字段注意点：</p><ol><li>字段名不区分大小写</li><li>字段名不能出现空格，不能出现下划线“_”</li><li>字段名后面必须紧跟“:”</li><li>字段的顺序是没有意义的</li><li>字段不能重复</li></ol><p>常用头部字段：</p><ol><li>Host：唯一一个在HTTP/1.1中要求必须出现的字段，只能出现在请求头中。告诉服务端应该用哪个主机来处理请求</li><li>Server：只能出现在响应头中，如果把后端服务的程序和版本告诉外部，会被黑客利用。所以一般都不会显示有用的信息</li><li>User-Agent：只能出现在请求头中</li><li>Date：标识报文创建的时间</li><li>Content-Length：标识报文中body的长度，如果没有这个字段，表示body是不定长的。需要使用chunked方式分段传输</li></ol><h1 id="10-应该如何理解请求方法？"><a href="#10-应该如何理解请求方法？" class="headerlink" title="10 | 应该如何理解请求方法？"></a>10 | 应该如何理解请求方法？</h1><h3 id="标准请求方法"><a href="#标准请求方法" class="headerlink" title="标准请求方法"></a>标准请求方法</h3><p>HTTP/1.1目前规定了八中方法：</p><ol><li>GET：获取资源</li><li>HEAD：获取资源的元信息，想当与GET请求的轻量版本，和GET的响应头完全相同，只是没有Body数据</li><li>POST：想资源提交数据，偏向于新建</li><li>PUT：类似POST，偏向于更新</li><li>DELETE：删除数据</li><li>CONNECT：建立特殊的连接隧道，要求服务器为客户端和另一台远程服务器建立一条特殊的链接隧道，这是web服务器在中间担任了代理的角色</li><li>OPTIONS：列出可对资源实行的方法</li><li>TRACE：追踪请求，多用于对HTTP链路的测试或诊断，可以显示出请求 - 响应的传输路径</li></ol><h3 id="扩展方法"><a href="#扩展方法" class="headerlink" title="扩展方法"></a>扩展方法</h3><p>虽然HTTP/1.1里规定了八种方法，但是并没有限制我们只能使用这八种方式。我们可以使用自定义的方式</p><h3 id="安全与幂等"><a href="#安全与幂等" class="headerlink" title="安全与幂等"></a>安全与幂等</h3><p>安全：在HTTP协议中，所谓的“安全”是指请求方法不会“破坏”服务器上的资源，只有GET和HEAD是安全的，因为他们不会修改数据</p><p>幂等：是指多次相同的操作，结果也是相同的。GET、HEAD、DELETE(多次删除一个资源都会显示资源不存在)、PUT(多次更新一个数据，数据是不会变的)都是幂等的。而POST会新建一个数据，所以不是幂等的。</p><h1 id="12-响应状态码该怎么用？"><a href="#12-响应状态码该怎么用？" class="headerlink" title="12 | 响应状态码该怎么用？"></a>12 | 响应状态码该怎么用？</h1><h3 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h3><p>状态码可以分为五类：</p><ol><li>1xx，提示信息，表示目前是协议处理的中间状态，还需要后续的操作</li><li>2xx，成功，报文收到并正确处理</li><li>3xx，重定向，资源位置发生了变动，需要客户端重新发送请求</li><li>4xx，客户端错误，发送的报文有误</li><li>5xx，服务端错误，服务器在处理请求时发生了错误</li></ol><h3 id="1xx"><a href="#1xx" class="headerlink" title="1xx"></a>1xx</h3><p>101 switching protocols：表示客户端使用Upgrade头字段，要求在HTTP协议的基础上改成其他的协议继续通信，比如WebSocket。而如果服务器也同意变更协议就会返回101，之后的数据传输就不在使用HTTP了</p><h3 id="2xx"><a href="#2xx" class="headerlink" title="2xx"></a>2xx</h3><p>200 OK：表示服务端正确处理了客户端的请求，一般都是带有body数据的</p><p>204 No Content：他的含义与200相同，但是没有body数据</p><p>206 Partial Content：是HTTP分块下载或断点续传的基础，通常还会伴随着头字段“Content-Range”表示报文里body数据的具体范围</p><h3 id="3xx"><a href="#3xx" class="headerlink" title="3xx"></a>3xx</h3><p>301 Moved Permanently：永久重定向</p><p>302 Found：暂时重定向，301和302都会使用Location字段指明后续要跳转的URI</p><p>304 Not Modified：用于 if-Modified-Since，表示资源未修改，用于缓存控制</p><h3 id="4xx"><a href="#4xx" class="headerlink" title="4xx"></a>4xx</h3><p>400 Bad Request：表示客户端的请求报文有误，并不指定具体的错误，是一个比较笼统的说法，所以要尽量避免使用400</p><p>403 Forbidden：表示服务器资源禁止访问，比如权限不足</p><p>404 Not Found：表示资源在服务器上未找到</p><h3 id="5xx"><a href="#5xx" class="headerlink" title="5xx"></a>5xx</h3><p>500 Internal Server Error：与400类似，是一个标记笼统的概念，表示服务器内部错误，该状态码可以经常使用，因为可以防止服务端的错误被黑客利用</p><p>501 Not Implemented：表示客户端请求的功能还不支持，表示“即将开业的意思”</p><p>502 Bad Gateway：通常是服务器作为网关或者代理时返回的错误码</p><p>503 Service Unavailable：表示服务器当前很忙，不能处理请求，通常还包含了一个“Retry-After”字段，知识客户端在多久之后可以再次尝试发送请求</p><h1 id="13-HTTP有哪些特点？"><a href="#13-HTTP有哪些特点？" class="headerlink" title="13 | HTTP有哪些特点？"></a>13 | HTTP有哪些特点？</h1><h3 id="灵活可扩展"><a href="#灵活可扩展" class="headerlink" title="灵活可扩展"></a>灵活可扩展</h3><p>HTTP只规定了报文的格式，并没有规定具体的内容。所以有很高的扩展性</p><h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><p>HTTP是基于TCP协议的，所以也就继承了TCP的特性，能够在两点之间进行可靠的数据传输</p><h3 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h3><p>有许多应用层的协议比如FTP，SSH等都只关注一个方面。而HTTP协议不同，因为没有规定具体的头部数据和body数据。所以他可以传输所有的数据，是一个万能的协议</p><h3 id="请求-应答"><a href="#请求-应答" class="headerlink" title="请求-应答"></a>请求-应答</h3><p>是HTTP最基本的通信模型，一收一发，一应一答</p><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>HTTP是无状态的，含义就是不会保存包的上下文信息。每个请求之间是相互独立的，毫无关联的。</p><p>而TCP协议是有状态的。</p><h1 id="14-HTTP有哪些优点？又有哪些缺点？"><a href="#14-HTTP有哪些优点？又有哪些缺点？" class="headerlink" title="14 | HTTP有哪些优点？又有哪些缺点？"></a>14 | HTTP有哪些优点？又有哪些缺点？</h1><h3 id="简单、灵活、易于扩展（优点）"><a href="#简单、灵活、易于扩展（优点）" class="headerlink" title="简单、灵活、易于扩展（优点）"></a>简单、灵活、易于扩展（优点）</h3><p>HTTP协议只有header和body，并且没有将字段写死，而是只规定了格式。所以可以添加自定义的字段。非常的灵活。甚至还可以建立在UDP之上</p><h3 id="应用广泛、环境成熟（优点）"><a href="#应用广泛、环境成熟（优点）" class="headerlink" title="应用广泛、环境成熟（优点）"></a>应用广泛、环境成熟（优点）</h3><p>随着互联网的发展，HTTP协议已经延伸到了每一个角落。而且因为他简单。几乎所有的语言都内置了HTTP的包，可以跨平台、跨语言</p><h3 id="无状态（即是优点也是缺点）"><a href="#无状态（即是优点也是缺点）" class="headerlink" title="无状态（即是优点也是缺点）"></a>无状态（即是优点也是缺点）</h3><p>因为无状态所以客户端和服务端无需记录状态信息，减少了传输的数据量，提高了速度</p><p>因为无状态，所以不能处理一些“事务”性的操作，比如购物车功能</p><h3 id="明文传输（缺点）"><a href="#明文传输（缺点）" class="headerlink" title="明文传输（缺点）"></a>明文传输（缺点）</h3><p>因为是明文传输，所以很容易被别人盗取信息，比如银行卡号之类的。最典型的应用就是“免费WIFI热点”，会盗取你的个人信息。</p><h3 id="不安全（缺点）"><a href="#不安全（缺点）" class="headerlink" title="不安全（缺点）"></a>不安全（缺点）</h3><p>HTTP协议是无法证明通信双方的身份的。比如无法检测到你发送的数据是否真的送到了目的地中，而不是一个伪造的目的地</p><p>HTTP协议是不能确保完整性的。就是不能保证发送的数据没有被别人修改过，有种解决方式就是给传输的数据利用MD5、SHA1等算法加上摘要。但是由于传输的是明文，如果连摘要都更改了。那么也无法辨别完整性</p><h3 id="性能（缺点）"><a href="#性能（缺点）" class="headerlink" title="性能（缺点）"></a>性能（缺点）</h3><p>性能只能说是不算好也不算坏，但是有一个比较严重的问题，就是HTTP事可靠传输，是有顺序的。如果一个请求被某种原因被阻塞。那么后面的请求都会被阻塞。这就是著名的“队头阻塞”问题</p><h1 id="15-海纳百川：HTTP的实体数据"><a href="#15-海纳百川：HTTP的实体数据" class="headerlink" title="15 | 海纳百川：HTTP的实体数据"></a>15 | 海纳百川：HTTP的实体数据</h1><h3 id="数据类型与编码"><a href="#数据类型与编码" class="headerlink" title="数据类型与编码"></a>数据类型与编码</h3><p>MIME Type用来标注body的数据类型</p><p><img src="./accept.png" alt="accept"></p><p>Accept和Content-Type规定接受和传输什么格式的数据，Accept-Encoding和Content-Encoding规定接受和传输的数据被什么格式压缩</p><p>其中br是一种专门为HTTP优化的新压缩算法</p><h3 id="语言类型与编码"><a href="#语言类型与编码" class="headerlink" title="语言类型与编码"></a>语言类型与编码</h3><p>Accept-Language和Content-Language规定了使用的语言类型，Accept-Charset规定接受的编码，而没有Content-Charset，返回数据语言的编码保存在了Content-Type里</p><p><img src="./accept-language.png" alt="accept-language"></p><h3 id="内容协商的质量值"><a href="#内容协商的质量值" class="headerlink" title="内容协商的质量值"></a>内容协商的质量值</h3><p>在HTTP中利用Accept，Accept-Encoding、Accept-Language等请求头字段进行内容协商的时候，还有一种利用“q”参数来表示权重值。权重值最大的是1，最小值0.01，默认值是1</p><pre class="line-numbers language-json"><code class="language-json">Accept<span class="token operator">:</span> text/html<span class="token punctuation">,</span>application/xml<span class="token punctuation">;</span>q=<span class="token number">0.9</span><span class="token punctuation">,</span>*/*<span class="token punctuation">;</span>q=<span class="token number">0.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>表示浏览器最希望收到html格式的数据，权重是1，其次是xml格式，权重是0.9，最后是任意数据，权重是0.8</p><h3 id="内容协商的结果"><a href="#内容协商的结果" class="headerlink" title="内容协商的结果"></a>内容协商的结果</h3><p>内容协商的过程是不透明的，因为不同后端服务使用的算法都不一样。但是有时候，服务器会在响应头里多加一个Vary字段，记录服务器在内容协商时参考的请求字段</p><pre class="line-numbers language-json"><code class="language-json">Vary<span class="token operator">:</span> Accept-Encoding<span class="token punctuation">,</span>User-Agent<span class="token punctuation">,</span>Accept<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="16-把大象装进冰箱：HTTP传输大文件的方法"><a href="#16-把大象装进冰箱：HTTP传输大文件的方法" class="headerlink" title="16 | 把大象装进冰箱：HTTP传输大文件的方法"></a>16 | 把大象装进冰箱：HTTP传输大文件的方法</h1><h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><p>一般数据压缩只对文本数据比较有效，因为图片和音视频都已经被压缩过了，如果在压缩也不会有太大作用</p><h3 id="分块传输"><a href="#分块传输" class="headerlink" title="分块传输"></a>分块传输</h3><p>Transfer-Encoding:chunked，表示分块传输，不是一次性把所有数据传输过来</p><p>Transfer-Encoding:chunked 和 Content-Length 是互斥的，也就是说响应报文里这两个字段不能同时出现，一个响应报文的长度要么是未知的，要么是已知的。chunked适合动态数据，传输数据时不知道具体的长度</p><p><img src="./chunk.png" alt="chunk"></p><h3 id="范围请求"><a href="#范围请求" class="headerlink" title="范围请求"></a>范围请求</h3><p>首先要明确，分块传输和分段传输是两个不同的概念，分块传输是传输时分为小块单独发送，但都是在一个http报文中。分段传输是获取一个文件的部分，每次是一个单独的http请求</p><p>分块传输解决了大文件传输的问题，但是没有解决只获取指定部分文件的问题，这是Accept-Range:bytes字段出现了。范围请求不是服务端的必备功能，所以如果服务端支持范文请求就得在响应报文中带上该头部字段。</p><p>Range是HTTP范围请求的头部字段，格式是bytes=x-y。服务端收到该头部字段后，首先要确定指定的范围是否合法，如果不合法就返回416。如果合法返回数据并带上一个字段Content-Range: bytes 0-10/100指定返回数据的范围</p><h3 id="多段数据"><a href="#多段数据" class="headerlink" title="多段数据"></a>多段数据</h3><p>还可以在Range里指定多个范围</p><pre class="line-numbers language-json"><code class="language-json">Range<span class="token operator">:</span> bytes=<span class="token number">0</span>-<span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span>-<span class="token number">29</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="17-排队也要讲效率：HTTP的连接管理"><a href="#17-排队也要讲效率：HTTP的连接管理" class="headerlink" title="17 | 排队也要讲效率：HTTP的连接管理"></a>17 | 排队也要讲效率：HTTP的连接管理</h1><h3 id="短连接"><a href="#短连接" class="headerlink" title="短连接"></a>短连接</h3><p>每次请求应答都要建立连接释放连接，60%的时间都在建立连接和释放连接</p><h3 id="长连接"><a href="#长连接" class="headerlink" title="长连接"></a>长连接</h3><p>在HTTP/1.1中后了长连接的概念，就是在建立连接后可以进行多次的通信，最后在释放连接</p><h3 id="相关头字段"><a href="#相关头字段" class="headerlink" title="相关头字段"></a>相关头字段</h3><p>在HTTP/1.1中默认都会启用长连接，不需要什么特殊的头字段指定，只要向服务器发送了第一次请求，后面的请求都会重复利用第一次打开的TCP连接，也就是长连接</p><p>如果服务器支持长连接，就会添加头字段：Connection:keep-alive</p><p>但是如果一直保持长连接，服务器需要在内存中保存长连接的信息。所以也需要在恰当的时机关闭长连接，既Connection:close</p><h3 id="队头阻塞"><a href="#队头阻塞" class="headerlink" title="队头阻塞"></a>队头阻塞</h3><p>队头阻塞和长连接、短连接没有关系，只和请求-应答模式有关系</p><p><img src="./%E9%98%9F%E5%A4%B4%E9%98%BB%E5%A1%9E.png" alt="队头阻塞"></p><h3 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h3><p>为了解决队头阻塞的问题，HTTP引入了并发连接的概念，可以同时对一个域名发起多个长连接</p><p>但是如果不加以限制，每个用户都想有多个长连接，那么服务器的资源就很快被利用光。所以规定每个客户端最多支持并发连接是6~8</p><h1 id="18-四通八达：HTTP的重定向和跳转"><a href="#18-四通八达：HTTP的重定向和跳转" class="headerlink" title="18 | 四通八达：HTTP的重定向和跳转"></a>18 | 四通八达：HTTP的重定向和跳转</h1><h3 id="重定向的过程"><a href="#重定向的过程" class="headerlink" title="重定向的过程"></a>重定向的过程</h3><p>首先访问一个域名，他会返回302表示零时重定向，并且header中会带一个Location:/18-1，指明要重定向到哪里，如果是在站内重定向可以使用相对路径，如果是站外的话就需要绝对路径</p><h3 id="重定向状态码"><a href="#重定向状态码" class="headerlink" title="重定向状态码"></a>重定向状态码</h3><p>301：永久重定向，一般浏览器就会做缓存，之后不会再去访问这个url</p><p>302：暂时重定向</p><p>303：类似302，但是重定向之后，请求方法就要变为GET，避免多次post</p><p>307：类似302，要求重定向之后，请求的方法和内容都不许变动</p><p>308：类似302，但是是永久重定向</p><h3 id="重定向的应用场景"><a href="#重定向的应用场景" class="headerlink" title="重定向的应用场景"></a>重定向的应用场景</h3><p>1、资源不可用</p><p>2、增加多个入口，都重定向到一个url，增加了入口但是不会增加后端工作量</p><h3 id="重定向的相关问题"><a href="#重定向的相关问题" class="headerlink" title="重定向的相关问题"></a>重定向的相关问题</h3><ol><li>性能损耗，如果是站外跳转就会有两次连接，站内是一次，可以利用长连接</li><li>循环跳转，一般浏览器都会检测循环跳转，检测到就会报不可访问</li></ol><h1 id="19-让我知道你是谁：HTTP的Cookie机制"><a href="#19-让我知道你是谁：HTTP的Cookie机制" class="headerlink" title="19 | 让我知道你是谁：HTTP的Cookie机制"></a>19 | 让我知道你是谁：HTTP的Cookie机制</h1><h3 id="什么是Cookie"><a href="#什么是Cookie" class="headerlink" title="什么是Cookie"></a>什么是Cookie</h3><p>Cookie就是当访问服务器时会带上标识自己身份的信息。让浏览器任务自己。因为HTTP协议是无状态的，每个HTTP请求都是独立的</p><h3 id="Cookie-的工作过程"><a href="#Cookie-的工作过程" class="headerlink" title="Cookie 的工作过程"></a>Cookie 的工作过程</h3><p>响应头字段， Set-Cookie，当用户通过浏览器第一次访问服务器的时候，服务器并不知道他的身份，所以就用key-value的形式将数据存在Set-Cookie字段中返回给浏览器。标识该用户</p><p>请求头字段，Cookie，当浏览器从Set-Cookie中拿到数据，用户再次访问网站的时候，浏览器就会将服务器返回的数据放在Cookie中一并发送给服务器，这样服务器接受到数据后就可以辨别是哪个用户了</p><p>如果用户换了浏览器，那么就得重新在生成Cookie了</p><p><img src="./cookie.png" alt="cookie"></p><h3 id="Cookie-的属性"><a href="#Cookie-的属性" class="headerlink" title="Cookie 的属性"></a>Cookie 的属性</h3><ol><li>Expires：过期时间，用的是绝对时间</li><li>Max-Age：相对时间，单位是秒，优先级要比Expires高</li><li>Domain和Path：这是cookie生效的域名和路径</li><li>HTTPOnly：cookie只能用于HTTP协议传输</li><li>SameSite：防止XSRF攻击，严格限定Cookie不能随着跳转链接跨站发送</li><li>Secure：Cookie仅仅只能在HTTPS中使用</li></ol><h3 id="Cookie-的应用"><a href="#Cookie-的应用" class="headerlink" title="Cookie 的应用"></a>Cookie 的应用</h3><ol><li>身份认证，实现会话事务</li><li>广告跟踪，这种Cookie不是主站存储的。所以又叫第三方Cookie，第三方cookie通常通过网络臭虫获得</li></ol><h1 id="20-生鲜速递：HTTP的缓存控制"><a href="#20-生鲜速递：HTTP的缓存控制" class="headerlink" title="20 | 生鲜速递：HTTP的缓存控制"></a>20 | 生鲜速递：HTTP的缓存控制</h1><h3 id="服务器的缓存控制"><a href="#服务器的缓存控制" class="headerlink" title="服务器的缓存控制"></a>服务器的缓存控制</h3><p>在响应报文中会有字段Cache-Control来规定缓存的过期时间</p><ol><li>Max-age：相对时间，但是这个时间和cookie时间不同，这个相对时间是从服务端开始算起的，不像cookie是从客户端接受到数据开始的</li><li>No-store：不允许缓存</li><li>No-cache：在使用缓存之前确认缓存是否更新过</li><li>must-revalidate：缓存不过期就可以继续使用，过期了就必须去服务器验证</li></ol><h3 id="客户端的缓存控制"><a href="#客户端的缓存控制" class="headerlink" title="客户端的缓存控制"></a>客户端的缓存控制</h3><p>Cache-control不仅可以出现在响应报文中也可以在请求报文中</p><p>Cache-control:max-age=0，Cache-control:no-cache（强制刷新）含义相同都是不使用缓存</p><p>当我们在浏览器中点击返回时，查看请求就会发现有这样的情况</p><p><img src="./%E7%BC%93%E5%AD%98.png" alt="缓存"></p><p>显示从磁盘获取cache，不会再向后端发送请求</p><h3 id="条件请求"><a href="#条件请求" class="headerlink" title="条件请求"></a>条件请求</h3><p>客户端的还必须去验证缓存是否失效，如果想用HEAD请求去验证缓存是否失效，如果失效就再次发送GET请求去获取数据。这样为了获取一条数据就要进行两次HTTP请求。所以HTTP请求就定义了“if”开头的条件请求字段，就能把两个请求合并到一个请求当中</p><p>请求报文中的”if-Modified-Since”对应响应报文中的”Last-modified”</p><p>请求报文中的”if-None-Match”对应响应报文中的“ETag”</p><p>如果资源没有变，服务器就返回一个“304 Not Modified”</p><p><img src="./if-none-match.png" alt="if-none-match"></p><p>ETge是资源的唯一标识，区分文件是否被修改</p><p>ETge也有强弱之分，强ETge要求在字节级别完全相符，弱ETge在值前面有个“W/”标记，只要求资源在语义上没有变化，但是内部可能发生了变化，比如页面HTML顺序变化</p><h1 id="21-良心中间商：HTTP的代理服务"><a href="#21-良心中间商：HTTP的代理服务" class="headerlink" title="21 | 良心中间商：HTTP的代理服务"></a>21 | 良心中间商：HTTP的代理服务</h1><h3 id="代理服务"><a href="#代理服务" class="headerlink" title="代理服务"></a>代理服务</h3><p>服务本身不产生内容，而是出于中间位置转发上下游的请求和响应，具有双重身份</p><h3 id="代理的作用"><a href="#代理的作用" class="headerlink" title="代理的作用"></a>代理的作用</h3><ol><li>负载均衡</li><li>安全防护，可以限制ip地址流量，防御网络攻击</li><li>加密卸载，对外使用HTTPS，内网使用HTTP，减少加密传输的性能消耗</li><li>数据过滤，拦截上下行的数据，修改请求和响应</li><li>内容缓存，暂存、复用服务器响应</li></ol><h3 id="代理头相关字段"><a href="#代理头相关字段" class="headerlink" title="代理头相关字段"></a>代理头相关字段</h3><p>Via字段，会记录代理服务器的信息，如果经过很多个代理，他的值以,分割</p><p>X-Forwarded-For,X-Real-IP，记录客户端的ip地址，一般服务端都要求获取到客户端的ip</p><h3 id="代理协议"><a href="#代理协议" class="headerlink" title="代理协议"></a>代理协议</h3><p>如果利用X-Forwarded-For,X-Real-IP去获取客户端信息，就需要代理服务器去解析原始报文，然后将客户端ip添加到对应的字段中，但是这样就会增加代理服务器的性能消耗，而且有时候是解析不了原始报文的，比如HTTPS。</p><p>所以就专门出现了一个“代理协议”，代理协议有两个版本，V1和V2，V1和HTTP差不多都是明文传输，而V2是二进制传输，V1很好理解他就只是在HTTP报文前增加了一行ASCII码文本，相当于又多了一个头</p><p>这一行文本特别简单，开头必须是“PROXY”五个大写字母，然后是“TCP4”或者“TCP6”，表示客户端的IP地址类型，在后面是请求方地址，应答方地址、请求方端口、应当方端口，最后用一个回车换行结束</p><p>例如：</p><pre class="line-numbers language-json"><code class="language-json">PROXY TCP4 <span class="token number">1.1</span>.<span class="token number">1.1</span> <span class="token number">2.2</span>.<span class="token number">2.2</span> <span class="token number">55555</span> <span class="token number">80</span>\r\nGET / HTTP/<span class="token number">1.1</span>\r\nHost<span class="token operator">:</span> www.xxx.com\r\n\r\n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="22-冷链周转：HTTP的缓存代理"><a href="#22-冷链周转：HTTP的缓存代理" class="headerlink" title="22 | 冷链周转：HTTP的缓存代理"></a>22 | 冷链周转：HTTP的缓存代理</h1><p>HTTP的服务器缓存功能主要有代理服务器来实现（既缓存代理）</p><h3 id="缓存代理服务"><a href="#缓存代理服务" class="headerlink" title="缓存代理服务"></a>缓存代理服务</h3><p><img src="./%E7%BC%93%E5%AD%98%E4%BB%A3%E7%90%86.png" alt="缓存代理"></p><p>当代理服务器收到源服务器的响应数据，首先将响应数据转发给客户端，然后将响应数据缓存下来。当客户端再次请求时就直接将缓存返回，不去请求源服务器</p><h3 id="源服务器的缓存控制"><a href="#源服务器的缓存控制" class="headerlink" title="源服务器的缓存控制"></a>源服务器的缓存控制</h3><p>代理服务器的缓存和客户端的缓存不一样，代理服务器可能会被很多个客户端使用，而客户端的缓存只有用户自己使用，所以有两个新属性：“private”和“public”来区分</p><p>“private”表示不能放在代理上与别人共享，“public”的意思就是缓存完全开放，谁都可以用</p><p>缓存失效后的重新验证也要分开，“must-revalidate”是只要过期就必须回源服务器验证，“proxy-revalidate”只要求代理的缓存过期后必须验证，客户端不须回源，只验证到代理这个环节就行</p><p>“s-maxage”,s是share的意思，只限定在代理上能够存多久，而客户端仍然使用max-age</p><p>“No-transform”，有时代理服务器会对缓存数据做一些优化，该属性就是禁止代理服务器修改一些响应数据</p><h3 id="客户端的缓存控制-1"><a href="#客户端的缓存控制-1" class="headerlink" title="客户端的缓存控制"></a>客户端的缓存控制</h3><p>关于缓存的生存时间多了两个属性</p><p>“Max-stale”：如果代理上的缓存过期了也可以接受，但不能过期太多，超过x秒就不接受</p><p>“Min-fresh”：缓存必须有效，而且在x秒内必须有效</p><h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><p>缓存清理通常使用自定义的方法“PURGE”</p><h1 id="23-HTTPS是什么？SSL-TLS又是什么？"><a href="#23-HTTPS是什么？SSL-TLS又是什么？" class="headerlink" title="23 | HTTPS是什么？SSL/TLS又是什么？"></a>23 | HTTPS是什么？SSL/TLS又是什么？</h1><h3 id="为什么有HTTPS"><a href="#为什么有HTTPS" class="headerlink" title="为什么有HTTPS"></a>为什么有HTTPS</h3><p>因为HTTP都是明文传输的，传输的内容很容易被人抓取到</p><h3 id="什么是安全"><a href="#什么是安全" class="headerlink" title="什么是安全"></a>什么是安全</h3><ol><li>机密性，能够对数据加密，只有接收方可以查看数据</li><li>完整性，只有机密性，破坏者很可能替换整个报文内容或者添加修改删除。而完整性能够确保报文不会被修改</li><li>身份认证，能够确认对方的身份，保证消息只会发给信任的人</li><li>不可否认性，不能否认已经发生过的行为</li></ol><h3 id="什么是HTTPS"><a href="#什么是HTTPS" class="headerlink" title="什么是HTTPS"></a>什么是HTTPS</h3><p>HTTPS是以HTTP为基础的，所以HTTP的优缺点HTTPS都照单全收了，除了不安全性和明文传输。端口也变为了443。</p><p>在TCP/IP上加了SSL/TLS层（会话层）</p><p><img src="./https.png" alt></p><h3 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL/TLS"></a>SSL/TLS</h3><p>TLS是SSL 3.0的别名，SSL/1,SSL/2,TLS/1.1都认为是不安全的，目前应用最广的是TLS/1.2，TLS/1.3 在2018年就已经发布。</p><h3 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h3><p>最新的版本你是1.1.1，其余版本都不将在维护</p><p>他是一个开源的密码学工具库</p><h1 id="24-固若金汤的根本（上）：对称加密与非对称加密"><a href="#24-固若金汤的根本（上）：对称加密与非对称加密" class="headerlink" title="24 | 固若金汤的根本（上）：对称加密与非对称加密"></a>24 | 固若金汤的根本（上）：对称加密与非对称加密</h1><p>一般说密钥的长度都是说位，比如说密钥长度是128位，其实就是16字节。</p><p>加密算法可以分为两大类：对称加密和非对称加密</p><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>TLS里有很多的对称加密算法可供选择：RC4、DES、3DES、AES、ChaCha20等，前面三种都被认为是不安全的。</p><p>AES是目前应用最广泛的对称加密算法。而且还有硬件专门对他进行优化</p><p>ChaCha20曾今在移动端比较流行，但是后来有硬件专门（cpu内核）对AES做了优化，所以就慢慢没落了</p><h3 id="加密分组模式"><a href="#加密分组模式" class="headerlink" title="加密分组模式"></a>加密分组模式</h3><p>就是用固定长度的密钥加密任意长度的明文。通常的解决办法有分块加密，链表加密等</p><p>最早有 ECB、CBC、CFB、OFB 等几种分组模式，但都陆续被发现有安全漏洞，所以现在基本都不怎么用了。最新的分组模式被称为 AEAD（Authenticated Encryption with Associated Data），在加密的同时增加了认证的功能，常用的是 GCM、CCM 和 Poly1305。</p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p>对称加密看上去很好的实现了机密性，但是引入了另外一个问题，如何保证密钥的安全性，专业术语叫做-密钥交换</p><p>非对称加密有两个密钥：公钥、私钥。非对称加密有单向性，既公钥加密的信息只能私钥才能够解开，同样私钥加密的信息只有对应的公钥可以解密</p><p>非对称加密可以解决“密钥交换”的问题，服务端保管私钥，把公钥分发给用户，用户发送信息时用公钥加密就可以了，因为黑客拿不到服务器的私钥所以没有办法解密</p><p><img src="./%E5%85%AC%E7%A7%81%E9%92%A5%E5%AE%B6%E5%90%97.png" alt="公私钥家吗"></p><p>常用的非对称加密算法：</p><ol><li>RSA，利用两个超大素数的乘积作为生成密钥的材料，现在RSA认为安全的密钥长度是2048</li><li>ECC，基于“椭圆曲线离散对数”的难题，在区块链中应用的比较多。比起RSA，ECC在安全性和性能上都有较大的提升</li></ol><h3 id="混合加密"><a href="#混合加密" class="headerlink" title="混合加密"></a>混合加密</h3><p>如果只用非对称加密的话，因为非对称加密会消耗很多的资源，一般非对称加密的时间是对称加密的几百倍</p><p>所以一般采取的策略是利用非对称加密来生成会话密钥（对称密钥），然后利用会话密钥加密通信的内容</p><p><img src="./%E6%B7%B7%E5%90%88%E5%8A%A0%E5%AF%86.png" alt="混合加密"></p><h1 id="25-固若金汤的根本（下）：数字签名与证书"><a href="#25-固若金汤的根本（下）：数字签名与证书" class="headerlink" title="25 | 固若金汤的根本（下）：数字签名与证书"></a>25 | 固若金汤的根本（下）：数字签名与证书</h1><p>之前讲的对称加密和非对称加密只能是解决了机密性的问题，但是如果中间人重组了密文发给服务器，这就是完整性的问题。还有客户端怎么知道发来的公钥就是服务器的而不是黑客的，这就引入了身份认证的问题</p><h3 id="摘要算法"><a href="#摘要算法" class="headerlink" title="摘要算法"></a>摘要算法</h3><p>实现完整性就主要考的是摘要算法，摘要算法有单向性和雪崩效应。</p><p>工作中最常用的是MD5和SHA-1，但是安全性较低，在TLS中都已经被禁止使用了。目前TLS推荐使用的是SHA-2，SHA-2是一个统称，其实包含很多个算法，常用的有 SHA224、SHA256、SHA384，分别能够生成 28 字节、32 字节、48 字节的摘要。</p><h3 id="完整性"><a href="#完整性" class="headerlink" title="完整性"></a>完整性</h3><p>摘要算法保证了“数字摘要”和原文是等价的。所以我们在原文后附上它的摘要，就能够保证消息的完整性。不过完整性必须要建立在机密性上才有意义，如果没有机密性，黑客可以修改消息的同时把数字摘要也修改了。</p><p><img src="./%E6%91%98%E8%A6%81.png" alt="摘要"></p><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p>加密算法和摘要算法解决了机密性和完整性的问题，而数字摘要解决的就是身份认证和不可否认性</p><p>为了防止别人伪造服务端发送数据，需要服务端利用自己的私钥对数据进行加密，因为非对称加密耗时太长，所以就只需要对加密原文的摘要，只有该私钥对应的公钥才可以解出对应的原文摘要。</p><img src="./数字签名.png" alt="数字签名" style="zoom:50%;"><h3 id="数字证书和CA"><a href="#数字证书和CA" class="headerlink" title="数字证书和CA"></a>数字证书和CA</h3><p>为了确保公钥是真正的服务端发送的而不是黑客伪造的，所以引入了第三方CA(证书认证机构)，他就是互联网中的公安局一样是具有权威性的。</p><p>CA对公钥的签发也是有证书的，不是简单简单的把公钥绑定在持有者身份上就完事了，还要包括序列号，用途，颁发者，过期时间等，把这些打包成一个包，完整的证明公钥的各种信息，这样就形成了“数字证书”</p><p>数字证书怎么证明自己呢，小一点的CA可以让大CA签名认证，链条的最后就是ROOT CA，就只能自己证明自己了，也叫做自签名证书或者根证书</p><img src="./CA证书链.png" alt="CA证书链" style="zoom:50%;"><p>操作系统和浏览器都内置各大CA的根证书，只要服务器发送了证书，就可以顺着证书链验证证书是否可信</p><h3 id="证书体系的弱点"><a href="#证书体系的弱点" class="headerlink" title="证书体系的弱点"></a>证书体系的弱点</h3><p>证书体系是建立在信任上的。如果黑客把证书黑了，那么他签发的所有证书都将可信。或者是欺骗了证书机构，签发了错误的证书（解决办法是CRL，既证书吊销列表，如果发现颁发错了就加入这个名单）</p><h1 id="26-信任始于握手：TLS1-2连接过程解析"><a href="#26-信任始于握手：TLS1-2连接过程解析" class="headerlink" title="26 | 信任始于握手：TLS1.2连接过程解析"></a>26 | 信任始于握手：TLS1.2连接过程解析</h1><h3 id="TLS协议的组成"><a href="#TLS协议的组成" class="headerlink" title="TLS协议的组成"></a>TLS协议的组成</h3><p>TLS协议包含几个子协议，也可以认为是由几个不同的模块组成。</p><ol><li>记录协议（Record Protocol），规定了TLS收发数据的基本单位：记录（Record），所有的其他子协议都将通过记录协议发出，但是多个子协议可以再一个TCP包中发出</li><li>警报协议（Alert Protocol），有点像HTTP协议里的状态码，比如protocol_version就是不支持旧版本</li><li>握手协议（Handshake Protocol），是TLS里最复杂的子协议，浏览器会在握手的过程中协商随机数，版本号，密码套件一些信息</li><li>变更密码规范协议（Change Cipher Spec Protocol），非常简单，就是告知对方后续的数据都将使用加密保护</li></ol><p>下面的图简单的描述了TLS的握手过程，每一个框都是一个记录</p><p><img src="./TLS%E6%8F%A1%E6%89%8B.png" alt="TLS握手"></p><h3 id="ECDHE的握手过程"><a href="#ECDHE的握手过程" class="headerlink" title="ECDHE的握手过程"></a>ECDHE的握手过程</h3><p><img src="./ecdhe.png" alt="ecdhe"></p><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p><img src="./rsa.png" alt="rsa"></p><h1 id="27-更好更快的握手：TLS1-3特性解析"><a href="#27-更好更快的握手：TLS1-3特性解析" class="headerlink" title="27 | 更好更快的握手：TLS1.3特性解析"></a>27 | 更好更快的握手：TLS1.3特性解析</h1><h3 id="最大化兼容性"><a href="#最大化兼容性" class="headerlink" title="最大化兼容性"></a>最大化兼容性</h3><p>因为TLS1.2应用的非常广泛，所以为了兼容1.2，出现了扩展协议，通过在原来的记录末尾添加一些扩展字段来增加新的功能，老版本的TLS不认识它可以直接忽略</p><h3 id="强化安全"><a href="#强化安全" class="headerlink" title="强化安全"></a>强化安全</h3><p>废除了一些算法，比如MD5，SHA1，RSA，DH等算法</p><h3 id="提升性能"><a href="#提升性能" class="headerlink" title="提升性能"></a>提升性能</h3><h1 id="28-连接太慢该怎么办：HTTPS的优化"><a href="#28-连接太慢该怎么办：HTTPS的优化" class="headerlink" title="28 | 连接太慢该怎么办：HTTPS的优化"></a>28 | 连接太慢该怎么办：HTTPS的优化</h1><h3 id="硬件优化"><a href="#硬件优化" class="headerlink" title="硬件优化"></a>硬件优化</h3><p>例如SSL加速卡这种东西</p><h3 id="软件加速"><a href="#软件加速" class="headerlink" title="软件加速"></a>软件加速</h3><p>升级系统，Nginx等到最新版，因为一般都会做相关优化</p><h3 id="协议优化"><a href="#协议优化" class="headerlink" title="协议优化"></a>协议优化</h3><p>使用TLS1.3，使用ECDHE算法</p><h3 id="证书优化"><a href="#证书优化" class="headerlink" title="证书优化"></a>证书优化</h3><p>使用ECDSA算法的证书，不使用RSA的证书</p><p>使用OCSP，发送请求去检测CA证书</p><h3 id="会话复用"><a href="#会话复用" class="headerlink" title="会话复用"></a>会话复用</h3><p>就是复用之前生成的密钥加密信息，而不是每次建立连接都重新生成密钥</p><ol><li>Session ID，服务端记录用户相关的密钥，信息等</li><li>Session Ticket，服务端将用户相关的密钥等信息加密后交给客户端保存，加密密钥的密钥文件，需要定时更换，比如一个小时</li><li>PSK，预共享密钥，相当于是session ticket的升级版，客户端在给服务端发送加密的密钥时，同时也会发送数据。但是容易遭受到重放攻击</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> HTTPS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 学习笔记</title>
      <link href="/2020/09/05/linux-bi-ji/"/>
      <url>/2020/09/05/linux-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>Linux笔记</p><h3 id="基础命令"><a href="#基础命令" class="headerlink" title="基础命令"></a>基础命令</h3><ul><li><p>创建多个嵌套目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p a/b/c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看嵌套目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -R ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>ls -h</code>会显示文件的大小</p></li><li><p>复制文件保留元信息（复制文件默认会修改文件的元信息）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> -a a b<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>通配符，只匹配一个字符</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> a?<span class="token comment" spellcheck="true"># 会匹配ab 不会匹配abc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>打包文件，解包文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 打包文件</span><span class="token function">tar</span> cf xxx.tar /a<span class="token comment" spellcheck="true"># 解包文件</span><span class="token function">tar</span> xf xxx.tar -C /a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将a目录下的文件打包成xxx.tar文件,<code>f</code>表示打包成文件</p><p><code>tar</code>命令的参数是不带<code>-</code>的</p></li><li><p>压缩文件，解压文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># gzip压缩文件，打包文件加压缩</span><span class="token function">tar</span> czf xxx.tar.gz /a<span class="token comment" spellcheck="true">#解压文件</span><span class="token function">tar</span> xzf xxx.tar.gz -C /a<span class="token comment" spellcheck="true"># bzip2压缩文件，打包文件加压缩</span><span class="token function">tar</span> cjf xxx.tar.bz2 /a<span class="token comment" spellcheck="true">#解压文件</span><span class="token function">tar</span> xjf xx.tar.gz _v /a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>bzip2压缩的文件方式要比gzip小，压缩比例更高</p></li></ul><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><h5 id="进入插入模式："><a href="#进入插入模式：" class="headerlink" title="进入插入模式："></a>进入插入模式：</h5><p><code>-i</code>：当前位置进入插入模式</p><p><code>-I</code>：跳转到行前进入插入模式</p><p><code>-a</code>：跳转到下一个字符进入插入模式</p><p><code>-A</code>：跳转到行尾进入插入模式</p><p><code>-o</code>：下一行进入插入模式</p><p><code>-O</code>：上一行进入插入模式</p><h4 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h4><p><code>!</code>：可以执行linux命令</p><p><code>:s/a/b</code>：对当前行进行替换</p><p><code>:%s/a/b/g</code>：对所有符合条件的内容进行替换</p><p><code>:10,25s/a.b/g</code>：对10-25行中的内容进行替换</p><h4 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h4><p><code>v</code>：字符可视模式</p><p><code>V</code>：行可视模式</p><p><code>^+v</code>：块可视模式</p><p><code>I</code>：可以在快模式下编辑多行，编辑完后按两下<code>esc</code>键，修改就会同步到其他行</p><p><code>d</code>：在快模式下，删除多行选中的字符</p><h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><p><code>yy</code>：复制正行</p><p><code>n yy</code>：复制n行</p><p><code>y$</code>：从当前字符复制到行尾</p><p><code>p</code>：粘贴</p><h4 id="剪切"><a href="#剪切" class="headerlink" title="剪切"></a>剪切</h4><p><code>dd</code>：剪切整行</p><p><code>n dd</code>：剪切n行</p><p><code>d$</code>：剪切当前字符到行尾</p><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><p><code>u</code>：撤销</p><p><code>^+r</code>：反向撤销</p><h4 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h4><p><code>r</code>：替换单个字符</p><p><code>x</code>：删除单个字符</p><h4 id="跳转到指定行"><a href="#跳转到指定行" class="headerlink" title="跳转到指定行"></a>跳转到指定行</h4><p><code>n G</code>：跳转到第n行</p><p><code>gg</code>：跳转到第一行</p><p><code>G</code>：跳转到最后一行</p><p><code>$</code>：跳转到该行的行尾</p><p><code>^</code>：跳转到该行的行首</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="添加用户（需要在root用户下执行，其他普通用户无法创建用户）"><a href="#添加用户（需要在root用户下执行，其他普通用户无法创建用户）" class="headerlink" title="添加用户（需要在root用户下执行，其他普通用户无法创建用户）"></a>添加用户（需要在root用户下执行，其他普通用户无法创建用户）</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 不会创建用户目录、设定密码等</span><span class="token function">useradd</span> abc<span class="token comment" spellcheck="true"># 会创建用户目录、设定密码等</span>adduser abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">passwd</span> abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看某一个用户是否存在"><a href="#查看某一个用户是否存在" class="headerlink" title="查看某一个用户是否存在"></a>查看某一个用户是否存在</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">id</span> abc<span class="token comment" spellcheck="true"># uid=0(root) gid=0(root) groups=0(root),113(docker)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="添加用户会进过那些操作"><a href="#添加用户会进过那些操作" class="headerlink" title="添加用户会进过那些操作"></a>添加用户会进过那些操作</h4><ol><li><p>会在<code>/etc/passwd</code>中添加用户</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/passwd<span class="token comment" spellcheck="true"># abc:x:1002:1002::/home/abc:/bin/sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>会在<code>/etc/shadow</code>中添加用户</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/shadow<span class="token comment" spellcheck="true"># abc:!:18510:0:99999:7:::</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 不会删除用户目录</span><span class="token function">userdel</span> abc<span class="token comment" spellcheck="true"># 删除用户目录</span><span class="token function">userdel</span> -r abc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="修改用户属性"><a href="#修改用户属性" class="headerlink" title="修改用户属性"></a>修改用户属性</h4><p>修改用户目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">usermod</span> -d /home/dd abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改用户所属的组</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">usermod</span> -g group1 abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="新建用户组"><a href="#新建用户组" class="headerlink" title="新建用户组"></a>新建用户组</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">groupadd</span> group1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">su</span> - abc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-</code>表示完全切换，会切换到该用户的目录下，如果没有<code>-</code>则还会在当前目录</p><h4 id="给特定用户执行某些命令的权限"><a href="#给特定用户执行某些命令的权限" class="headerlink" title="给特定用户执行某些命令的权限"></a>给特定用户执行某些命令的权限</h4><pre class="line-numbers language-bash"><code class="language-bash">visudo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用上面的命令可以给某些用户赋予某些命令的权限</p><h4 id="etc-passwd文件解析"><a href="#etc-passwd文件解析" class="headerlink" title="/etc/passwd文件解析"></a>/etc/passwd文件解析</h4><pre class="line-numbers language-bash"><code class="language-bash">root:x:0:0:root:/root:/bin/bashdaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologinbin:x:2:2:bin:/bin:/usr/sbin/nologin<span class="token comment" spellcheck="true"># 用户名/用户是否需要密码进行验证/uid/gid/注释/用户目录/命令解释器</span><span class="token comment" spellcheck="true"># sbin/nologin 是不能被登录的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在新建用户时可以不用<code>adduser</code>命令，直接编辑该文件也可以起到新增用户的目的</p><h4 id="etc-shadow-文件解析（用来保存用户和密码的关系）"><a href="#etc-shadow-文件解析（用来保存用户和密码的关系）" class="headerlink" title="/etc/shadow 文件解析（用来保存用户和密码的关系）"></a>/etc/shadow 文件解析（用来保存用户和密码的关系）</h4><pre class="line-numbers language-bash"><code class="language-bash">mysql:<span class="token operator">!</span>:18493424:0:99999:7:::user1:<span class="token variable">$6</span><span class="token variable">$9JTohwDk</span><span class="token variable">$baTsdfsVJRRfSds6PCdF0xBQlqslTekjWK9xT7</span>/yIoTTUv45raWwtZRpwtMn5mNwjULCvL2XRJ9Nj3kFhekJBsjgBfq.:18511:0:99999:7:::<span class="token comment" spellcheck="true"># 用户名/加密后的密码</span><span class="token comment" spellcheck="true"># 相同的密码加密后是不同的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="etc-group-文件解析（用户组文件）"><a href="#etc-group-文件解析（用户组文件）" class="headerlink" title="/etc/group 文件解析（用户组文件）"></a>/etc/group 文件解析（用户组文件）</h4><pre class="line-numbers language-bash"><code class="language-bash">mysql:x:116:user1:x:1002:<span class="token comment" spellcheck="true"># 用户组名称/是否需要密码/gid/其他组设置(一个用户可以属于多个组)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><h4 id="文件权限格式"><a href="#文件权限格式" class="headerlink" title="文件权限格式"></a>文件权限格式</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -l-rwx------+   8 xx  staff      256 Mar  6  2020 Moviesdrwx------+  10 xx  staff      320 Mar  6  2020 Music<span class="token comment" spellcheck="true"># 第一位，表示文件类型</span><span class="token comment" spellcheck="true"># 后面接着的9位 rwx------ 表示权限，每三个字符为一组，分别表示：用户对该文件的权限、该组对文件的权限和其他用户的权限</span><span class="token comment" spellcheck="true"># xx ：用户</span><span class="token comment" spellcheck="true"># staff： 用户组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h4><p><code>-</code>：普通文件</p><p><code>d</code>：目录文件</p><p><code>b</code>：块特殊文件</p><p><code>c</code>：字符特殊文件</p><p><code>l</code>：符号链接</p><p><code>f</code>：命令管道</p><p><code>s</code>：套接字文件</p><h4 id="文件权限的表示方法"><a href="#文件权限的表示方法" class="headerlink" title="文件权限的表示方法"></a>文件权限的表示方法</h4><p>数字权限的表示方法</p><p>r=4</p><p>w=2</p><p>x=1</p><h4 id="目录权限的表示方法"><a href="#目录权限的表示方法" class="headerlink" title="目录权限的表示方法"></a>目录权限的表示方法</h4><p><code>x</code>：可以进入目录</p><p><code>rx</code>：显示目录内的文件名</p><p><code>wx</code>：修改目录内的文件名</p><h4 id="修改文件属主和属组的方法"><a href="#修改文件属主和属组的方法" class="headerlink" title="修改文件属主和属组的方法"></a>修改文件属主和属组的方法</h4><p>修改属主</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chown</span> user1 /test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改属组</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chgrp</span> :user1 /test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h4><p><code>u</code>：属主</p><p><code>g</code>：属组</p><p><code>o</code>：其他用户</p><p><code>a</code>：包括上述三种</p><p><code>+</code>：增加权限</p><p><code>-</code>：减少权限</p><p><code>=</code>：设置权限</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 为test的属主设置w权限</span><span class="token function">chmod</span> u+w ./test<span class="token comment" spellcheck="true"># 为属主、属组合其他用户设置只有wr权限</span><span class="token function">chmod</span> a<span class="token operator">=</span>wr ./test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>linux中默认的文件权限是644,是666-umask(022)=644，既<code>rw-r--r--</code></p><p>如果属主权限和属组权限冲突，则以属主权限为主</p><h4 id="特殊权限"><a href="#特殊权限" class="headerlink" title="特殊权限"></a>特殊权限</h4><p><code>SUID</code>：用户可执行的二进制文件，执行命令时获取文件属主的权限</p><pre class="line-numbers language-bash"><code class="language-bash">root@master:~<span class="token comment" spellcheck="true"># ls -l /usr/bin/passwd</span>-rwsr-xr-x 1 root root 59640 Mar 23  2019 /usr/bin/passwd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>SGID</code>：用于目录，在该目录下新建的文件和目录，权限自动更改为该目录的属组，常用于共享文件</p><p><code>SBIT</code>：用户目录，在该目录下新建的文件和目录，只有root和自己可以删除</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ls</span> -l /drwxrwxrwt  13 root root       4096 Sep  7 18:21 tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><h4 id="网络状态查看工具"><a href="#网络状态查看工具" class="headerlink" title="网络状态查看工具"></a>网络状态查看工具</h4><ol><li><p>net-tools(centos 7 之前推荐的工具)</p><ul><li>ifconfig</li><li>route</li><li>netstat</li></ul><h5 id="ifconfig"><a href="#ifconfig" class="headerlink" title="ifconfig"></a>ifconfig</h5><ul><li>eth0 第一块网卡（根据网卡接入方式不同，名称也会不同）</li></ul></li><li><p>iproute2(centos 7 之后推荐的工具)</p><ul><li>ip</li><li>ss</li></ul></li></ol><h4 id="修改网卡名称为eth0"><a href="#修改网卡名称为eth0" class="headerlink" title="修改网卡名称为eth0"></a>修改网卡名称为eth0</h4><p>网卡命名规则受<code>biosdevname</code>和<code>net.ifnames</code>两个参数影响</p><ol><li><p>编辑<code>etc/default/grub</code>文件，增加<code>biosdevname=0</code>和<code>net.ifnames=0</code></p><pre class="line-numbers language-bash"><code class="language-bash">GRUB_CMDLINE_LINUX<span class="token operator">=</span><span class="token string">"net.ifnames=0 biosdevname=0"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更新grub</p><pre class="line-numbers language-bash"><code class="language-bash">grub2-mkconfig -o /boot/grub2/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>重启(reboot)</p></li></ol><h4 id="查看网卡物理连接情况"><a href="#查看网卡物理连接情况" class="headerlink" title="查看网卡物理连接情况"></a>查看网卡物理连接情况</h4><pre class="line-numbers language-bash"><code class="language-bash">mii-tool eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查看网关"><a href="#查看网关" class="headerlink" title="查看网关"></a>查看网关</h4><pre class="line-numbers language-bash"><code class="language-bash">route -n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>-n</code>参数不解析主机名</p><h4 id="网络故障排除命令"><a href="#网络故障排除命令" class="headerlink" title="网络故障排除命令"></a>网络故障排除命令</h4><p><code>ping</code>：网络主机是否畅通</p><p><code>traceroute</code>：如果网络通畅，但是还是访问不通，可以通过该命令查看路由信息</p><p><code>mtr</code>：如果网络主机通畅，但是还是访问不通，可以查看是否有数据包丢失了</p><p><code>nslookup</code>：查看域名对应的ip</p><p><code>telnet</code>：如果主机没有问题，可以查看端口是否开放</p><p><code>tcpdump</code>：如果主机和端口都ok，则需要抓包进行分析</p><p><code>netstat</code>和<code>ss</code>：检测服务监听的地址是否正确</p><h4 id="网络服务管理-centos"><a href="#网络服务管理-centos" class="headerlink" title="网络服务管理(centos)"></a>网络服务管理(centos)</h4><p>可以分为两种：<code>SysV</code>和<code>systemd</code></p><p>网络配置文件：<code>ifcfg-eth0</code>，会随着网卡的不同文件名也会不同</p><p>比如<code>/etc/sysconfig/network-scripts/ifcfg-ens3</code>，在这个里面可以配置dhcp，ip等信息</p><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h4 id="调整优先级"><a href="#调整优先级" class="headerlink" title="调整优先级"></a>调整优先级</h4><p><code>nice</code>：范围从-20到19，值越小优先级越高，抢占的资源就越多</p><p><code>renice</code>：重新设置优先级</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在启动前设置某一个程序的优先级</span><span class="token function">nice</span> -n 10 ./a.sh<span class="token comment" spellcheck="true"># 在程序启动后重新设置一个程序的优先级</span><span class="token function">renice</span> -n 15 pid<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进程的作业控制"><a href="#进程的作业控制" class="headerlink" title="进程的作业控制"></a>进程的作业控制</h4><p><code>&amp;</code>：将任务放到后台执行</p><pre class="line-numbers language-bash"><code class="language-bash">./a.bash <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>jobs</code>:查看后台任务</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">jobs</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将前台任务停止并放到后台</p><p><code>ctrl + z</code></p><p>将后台任务放到前台执行</p><p><code>fg jobsID</code></p><p>将前台任务放到后台执行</p><p><code>bg jobsID</code></p><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><h4 id="查看信号"><a href="#查看信号" class="headerlink" title="查看信号"></a>查看信号</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@848e7f64efd8 /<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># kill -l</span> 1<span class="token punctuation">)</span> SIGHUP     2<span class="token punctuation">)</span> SIGINT     3<span class="token punctuation">)</span> SIGQUIT     4<span class="token punctuation">)</span> SIGILL     5<span class="token punctuation">)</span> SIGTRAP 6<span class="token punctuation">)</span> SIGABRT     7<span class="token punctuation">)</span> SIGBUS     8<span class="token punctuation">)</span> SIGFPE     9<span class="token punctuation">)</span> SIGKILL    10<span class="token punctuation">)</span> SIGUSR111<span class="token punctuation">)</span> SIGSEGV    12<span class="token punctuation">)</span> SIGUSR2    13<span class="token punctuation">)</span> SIGPIPE    14<span class="token punctuation">)</span> SIGALRM    15<span class="token punctuation">)</span> SIGTERM16<span class="token punctuation">)</span> SIGSTKFLT    17<span class="token punctuation">)</span> SIGCHLD    18<span class="token punctuation">)</span> SIGCONT    19<span class="token punctuation">)</span> SIGSTOP    20<span class="token punctuation">)</span> SIGTSTP21<span class="token punctuation">)</span> SIGTTIN    22<span class="token punctuation">)</span> SIGTTOU    23<span class="token punctuation">)</span> SIGURG    24<span class="token punctuation">)</span> SIGXCPU    25<span class="token punctuation">)</span> SIGXFSZ26<span class="token punctuation">)</span> SIGVTALRM    27<span class="token punctuation">)</span> SIGPROF    28<span class="token punctuation">)</span> SIGWINCH    29<span class="token punctuation">)</span> SIGIO    30<span class="token punctuation">)</span> SIGPWR31<span class="token punctuation">)</span> SIGSYS    34<span class="token punctuation">)</span> SIGRTMIN    35<span class="token punctuation">)</span> SIGRTMIN+1    36<span class="token punctuation">)</span> SIGRTMIN+2    37<span class="token punctuation">)</span> SIGRTMIN+338<span class="token punctuation">)</span> SIGRTMIN+4    39<span class="token punctuation">)</span> SIGRTMIN+5    40<span class="token punctuation">)</span> SIGRTMIN+6    41<span class="token punctuation">)</span> SIGRTMIN+7    42<span class="token punctuation">)</span> SIGRTMIN+843<span class="token punctuation">)</span> SIGRTMIN+9    44<span class="token punctuation">)</span> SIGRTMIN+10    45<span class="token punctuation">)</span> SIGRTMIN+11    46<span class="token punctuation">)</span> SIGRTMIN+12    47<span class="token punctuation">)</span> SIGRTMIN+1348<span class="token punctuation">)</span> SIGRTMIN+14    49<span class="token punctuation">)</span> SIGRTMIN+15    50<span class="token punctuation">)</span> SIGRTMAX-14    51<span class="token punctuation">)</span> SIGRTMAX-13    52<span class="token punctuation">)</span> SIGRTMAX-1253<span class="token punctuation">)</span> SIGRTMAX-11    54<span class="token punctuation">)</span> SIGRTMAX-10    55<span class="token punctuation">)</span> SIGRTMAX-9    56<span class="token punctuation">)</span> SIGRTMAX-8    57<span class="token punctuation">)</span> SIGRTMAX-758<span class="token punctuation">)</span> SIGRTMAX-6    59<span class="token punctuation">)</span> SIGRTMAX-5    60<span class="token punctuation">)</span> SIGRTMAX-4    61<span class="token punctuation">)</span> SIGRTMAX-3    62<span class="token punctuation">)</span> SIGRTMAX-2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="常用信号"><a href="#常用信号" class="headerlink" title="常用信号"></a>常用信号</h4><pre><code>ctrl + == SIGINT# 立即终止，不收阻塞，信号是SIGKILLkill -9 pid</code></pre><h4 id="守护进程（daemon）"><a href="#守护进程（daemon）" class="headerlink" title="守护进程（daemon）"></a>守护进程（daemon）</h4><p>让程序脱离当前终端执行：</p><ol><li><code>nohup</code></li><li>守护进程</li><li><code>screen</code>或者<code>tmux</code></li></ol><p><code>nohup</code>可以让一个命令脱离终端执行，但他不是守护进程</p><p>随着系统启动而启动，不用用户手动的去执行</p><p>每个进程的依赖的环境都在<code>/proc/pid</code>的文件夹中</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /proc/123<span class="token comment" spellcheck="true"># 进程执行的位置</span><span class="token function">ls</span> -l cwd<span class="token comment" spellcheck="true"># out</span> cwd -<span class="token operator">></span> /<span class="token comment" spellcheck="true"># 进程的输出</span><span class="token function">ls</span> -l fd<span class="token comment" spellcheck="true"># out</span>lrwx------ 1 root root 64 Sep 14 05:15 0 -<span class="token operator">></span> /dev/pts/4lrwx------ 1 root root 64 Sep 14 05:15 1 -<span class="token operator">></span> /dev/pts/4lrwx------ 1 root root 64 Sep 14 05:15 2 -<span class="token operator">></span> /dev/pts/4lrwx------ 1 root root 64 Sep 14 12:32 255 -<span class="token operator">></span> /dev/pts/4<span class="token comment" spellcheck="true"># 0是标准输入</span><span class="token comment" spellcheck="true"># 1,2是标准输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="服务管理工具-systemctl"><a href="#服务管理工具-systemctl" class="headerlink" title="服务管理工具-systemctl"></a>服务管理工具-systemctl</h4><p>常用操作：</p><p><code>systemctl start|stop|restart|reload|enable|disable 服务名称</code></p><h4 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h4><p>安全增强版本的Linux，以前的linux是利用用户和文件的权限来进行安全控制既DAC（自主访问控制）</p><p>MAC（强制访问控制）：会给用户、进程和文件都打上标签，如果三者标签不一致则不允许执行</p><p>SElinux是一个内核模块，也是Linux的一个安全子系统。SELinux可是设置DAC或者是MAC。需要注意的是开启SELinux会消耗服务器的性能，所以一般在生产环境下都是关闭的</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看SELinux状态</span>getenforce<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="内存和磁盘管理"><a href="#内存和磁盘管理" class="headerlink" title="内存和磁盘管理"></a>内存和磁盘管理</h3><h4 id="内存和磁盘使用率查看"><a href="#内存和磁盘使用率查看" class="headerlink" title="内存和磁盘使用率查看"></a>内存和磁盘使用率查看</h4><p>内存：</p><ul><li><p><code>free</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop3 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># free -m</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:          64264       51686        2089         140       10488       11807Swap:             0           0           0<span class="token punctuation">[</span>root@hadoop3 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># free -g</span>              total        used        <span class="token function">free</span>      shared  buff/cache   availableMem:             62          50           2           0          10          11Swap:             0           0           0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>top</code></p></li></ul><p>磁盘：</p><ul><li><p><code>fdisk</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop3 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk -l</span>Disk /dev/vda: 53.7 GB, 53687091200 bytes, 104857600 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x0009ac89   Device Boot      Start         End      Blocks   Id  System/dev/vda1   *        2048   104857566    52427759+  83  LinuxDisk /dev/vdb: 214.7 GB, 214748364800 bytes, 419430400 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如上图所示，共有两个磁盘：/dev/vda、/dev/vdb</p><p>其中/dev/vda是分区了，因为有/dev/vda1</p></li><li><p><code>df</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">df</span> -hFilesystem      Size  Used Avail Use% Mounted on/dev/vda1        50G   16G   32G  34% /devtmpfs         32G     0   32G   0% /devtmpfs            32G   24K   32G   1% /dev/shmtmpfs            32G  1.5M   32G   1% /runtmpfs            32G     0   32G   0% /sys/fs/cgroup/dev/vdb        197G   55G  134G  29% /datatmpfs           6.3G     0  6.3G   0% /run/user/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常常用来查看磁盘是否满了</p></li><li><p><code>du</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@hadoop3 elasticsearch<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># du -h docker-compose.yaml</span>4.0K    docker-compose.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>du -h</code>和<code>ls -lh</code>区别是，<code>du</code>是实际占用的空间，而<code>ls -lh</code>是包含空洞空间的，其中磁盘有些位置是空的，只是声明了文件存储的位置，并没有实际存储数据</p></li></ul><h4 id="Linux文件系统管理"><a href="#Linux文件系统管理" class="headerlink" title="Linux文件系统管理"></a>Linux文件系统管理</h4><p>Linux常见的文件系统：</p><ul><li>ext4</li><li>xfs</li><li>NTFS（需要安全额外的软件）</li></ul><p><strong>硬链接</strong></p><p>多个文件其实都是链接到同一个数据块，修改一个文件，其余的文件都会同步变化。</p><p>硬链接是不允许跨文件系统的。</p><p>创建硬链接的方式：<code>ln afile bfile</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat base</span>aaaa<span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln base yin</span><span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -li</span><span class="token comment" spellcheck="true"># inode号是相同的，他们指向同一个inode块</span>131106 -rw-r--r-- 2 root root 5 Nov 25 09:56 base131106 -rw-r--r-- 2 root root 5 Nov 25 09:56 yin<span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm base</span>rm: remove regular <span class="token function">file</span> ‘base’? y<span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat yin</span>aaaa<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>软链接</strong></p><p>克服了硬链接不能跨文件系统的问题。</p><p>但是实现上是不同的，软链接是创建了完全不同的一个文件，当系统读取这个文件时会发现这个文件是个链接文件，所以就会读取它链接的那个原文件。</p><p>对软链接文件设置权限并不会改变该文件的权限，而是改变的是原文件。</p><p>创建软链接的方式：<code>ln -s afile bfile</code></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat base</span>aaaa<span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ln -s base ruan</span><span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -li</span><span class="token comment" spellcheck="true"># inode号不同</span>131103 -rw-r--r-- 1 root root 5 Nov 25 09:59 base131104 lrwxrwxrwx 1 root root 4 Nov 25 10:00 ruan -<span class="token operator">></span> base<span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat ruan</span>aaaa<span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># rm base</span><span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -li</span>total 0131104 lrwxrwxrwx 1 root root 4 Nov 25 10:00 ruan -<span class="token operator">></span> base<span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat ruan</span><span class="token comment" spellcheck="true"># 当删除了原始文件，因为软连接是指向的原始文件，并没有指向inode号，所以访问不到原始文件</span>cat: ruan: No such <span class="token function">file</span> or directory<span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># echo dddd >> ruan</span><span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ls -li</span><span class="token comment" spellcheck="true"># 向软连接里写内容，就相当于在原始文件里写内容，所以原始文件就重新出现了</span>131103 -rw-r--r-- 1 root root 5 Nov 25 10:00 base131104 lrwxrwxrwx 1 root root 4 Nov 25 10:00 ruan -<span class="token operator">></span> base<span class="token punctuation">[</span>root@VM-0-16-centos test<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># cat base</span>dddd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="硬盘分区与挂载"><a href="#硬盘分区与挂载" class="headerlink" title="硬盘分区与挂载"></a>硬盘分区与挂载</h4><p>硬盘分区：<code>fdisk /dev/vdb</code>，如果是2T以上的硬盘需要用<code>parted</code>命令</p><p>格式化设置分区文件系统：<code>mkfs.文件系统 /dev/vdb</code></p><p>分区挂载到目录下：<code>mount /dev/vdb /xx</code></p><p>这样挂载只是将数据写到了内存中，如果想要重启后还是挂载到该目录，需要修改文件 /etc/fstab</p><pre class="line-numbers language-bash"><code class="language-bash">root@max-master:~<span class="token comment" spellcheck="true"># cat /etc/fstab</span>UUID<span class="token operator">=</span>e1d5f0dc-9df2-421e-a87b-f761f5db8947 / ext4 defaults 0 0<span class="token comment" spellcheck="true">###/swap.img    none    swap    sw    0    0</span>max-master:gfs-configs    /var/cache/zoomeye-max    glusterfs    defaults,_netdev    0    0/dev/vdb1 /xx ext4 defaults 0 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Shell-编程"><a href="#Shell-编程" class="headerlink" title="Shell 编程"></a>Shell 编程</h3><h4 id="Shell-脚本的不同运行方式"><a href="#Shell-脚本的不同运行方式" class="headerlink" title="Shell 脚本的不同运行方式"></a>Shell 脚本的不同运行方式</h4><p>内建命令不需要创建子进程</p><p>内建命令对当前shell生效</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">bash</span> 1.sh<span class="token comment" spellcheck="true"># 不用给1.sh赋予执行权限，bash脚本执行完后会回到当前目录</span><span class="token comment" spellcheck="true"># 会产生新的子进程</span>./1.sh<span class="token comment" spellcheck="true"># 必须要可执行权限，bash脚本执行完后会回到当前目录</span><span class="token comment" spellcheck="true"># 会产生新的子进程</span><span class="token function">source</span> 1.sh 和 <span class="token keyword">.</span> 1.sh<span class="token comment" spellcheck="true"># 必须要可执行权限，bash脚本执行完后不会回到当前目录</span><span class="token comment" spellcheck="true"># 不会创建新的子进程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="管道与重定向"><a href="#管道与重定向" class="headerlink" title="管道与重定向"></a>管道与重定向</h4><p>管道和信号是一样的，也是进程通信的方式之一</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 输入重定向</span><span class="token operator">&lt;</span><span class="token comment" spellcheck="true"># 输出重定向</span><span class="token operator">></span><span class="token comment" spellcheck="true"># 追加模式</span><span class="token operator">>></span><span class="token comment" spellcheck="true"># 将a.txt文件内容赋值给变量ss</span><span class="token function">read</span> ss <span class="token operator">&lt;</span> a.txt<span class="token comment" spellcheck="true"># 将ss变量内容写入到文件中</span><span class="token keyword">echo</span> <span class="token variable">$ss</span> <span class="token operator">></span> a.txt<span class="token comment" spellcheck="true"># 将ss变量内容追加到文件中</span><span class="token keyword">echo</span> <span class="token variable">$ss</span> <span class="token operator">>></span> a.txt<span class="token comment" spellcheck="true"># 将错误信息重定向到文件中</span>xxx 2<span class="token operator">></span> a.txt<span class="token comment" spellcheck="true"># 将输出信息全部重定向到文件中</span>xxx <span class="token operator">&amp;</span><span class="token operator">></span> a.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h4><p>shell中不区分变量类型</p><p>变量复制等号两边不允许有空格</p><p>将命令的值赋值给变量，使用<code>$()</code>和````</p><pre class="line-numbers language-bash"><code class="language-bash">a<span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> -l /etc<span class="token variable">)</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="变量的作用范围"><a href="#变量的作用范围" class="headerlink" title="变量的作用范围"></a>变量的作用范围</h4><p>声明的变量只在当前的shell中生效，在子进程、父进程和<code>bash xx.sh</code>中都是不生效的，要想使得变量在<code>bash xx.sh</code>中生效，需要执行<code>source xx.sh</code>或者<code>. xx.sh</code>，因为这两种方式都不会创建新的子进程</p><p>使用<code>export xx</code>，可以使该变量在子进程中可用</p><p>使用<code>unset xx</code>，删除变量</p><h4 id="环境变量、预定义变量和位置变量"><a href="#环境变量、预定义变量和位置变量" class="headerlink" title="环境变量、预定义变量和位置变量"></a>环境变量、预定义变量和位置变量</h4><ul><li>环境变量：每个shell打开都可以获取到的变量<ul><li><code>env</code>：查看环境变量</li><li><code>set</code>：查看环境变量、预定义变量和位置变量</li><li><code>PATH</code>：该变量定义了命令查找的路径，我们需要添加路径时可以<code>PATH=$PATH:xx</code>，该变量修改后可以在子进程和别的shell中生效，因为被export了</li><li><code>PS1</code>：设置shell中提示</li></ul></li><li>预定义变量<ul><li><code>$?</code>：上一条命令是否执行成功，成功的话返回0</li><li><code>$$</code>：返回当前shell的PID</li><li><code>$0</code>：当前执行的程序</li></ul></li><li>位置变量<ul><li><code>$1</code>….<code>$n</code>：特别注意的是当大于等于10时，必须要写成<code>${10}...${xx}</code></li><li>如果想要给位置变量设置默认值可以用<code>${1-xx}</code>，<code>xx</code>就是设置的默认值</li></ul></li></ul><h4 id="环境变量配置文件"><a href="#环境变量配置文件" class="headerlink" title="环境变量配置文件"></a>环境变量配置文件</h4><p>所有用户都可用的环境变量保存在：</p><ul><li>/etc/profile</li><li>/etc/profile.d</li><li>/etc/bashrc</li></ul><p>用户自定义的环境变量：</p><ul><li>~/.bashrc</li><li>~/.bash_profile</li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li>定义数组<ul><li><code>IPTS=(1 2 3 4)</code></li></ul></li><li>显示所有元素<ul><li><code>echo ${IPTS[@]}</code></li></ul></li><li>显示长度<ul><li><code>echo ${#IPTS[@]}</code></li></ul></li><li>获取第一个元素<ul><li><code>echo ${IPTS[0]}</code></li></ul></li></ul><h4 id="转义与引用"><a href="#转义与引用" class="headerlink" title="转义与引用"></a>转义与引用</h4><p>注意：单引号`是不对特殊字符进行解释，双引号”会对特殊字符进行解释</p><pre class="line-numbers language-bash"><code class="language-bash">➜ <span class="token keyword">echo</span> <span class="token string">'<span class="token variable">$a</span>'</span><span class="token variable">$a</span>➜ <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$a</span>"</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反引号`可以获取命令执行的结果</p><pre class="line-numbers language-bash"><code class="language-bash">➜ num1<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">expr</span> 4 + 5<span class="token variable">`</span></span>➜ <span class="token keyword">echo</span> <span class="token variable">$num1</span>9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>复制运算符</li><li>算数运算符<ul><li><code>expr 4 + 5</code>：只能支持整数</li><li><code>((4+5))</code>，((a=9))，((a++))：是let的简化方式</li></ul></li></ul><h4 id="特殊符号大全"><a href="#特殊符号大全" class="headerlink" title="特殊符号大全"></a>特殊符号大全</h4><ul><li><p><code>$()</code>和反引号的作用一样，里面包含需要执行的命令</p></li><li><p><code>()</code>会创建一个新的shell</p></li><li><p><code>[]</code>是<code>test</code>命令的简写</p><pre class="line-numbers language-bash"><code class="language-bash">➜ <span class="token punctuation">[</span><span class="token punctuation">[</span> 5 <span class="token operator">&lt;</span> 4 <span class="token punctuation">]</span><span class="token punctuation">]</span>➜ <span class="token keyword">echo</span> <span class="token variable">$?</span>1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>{}输出范围和快速操作</p><pre class="line-numbers language-bash"><code class="language-bash">➜ <span class="token keyword">echo</span> <span class="token punctuation">{</span>0<span class="token punctuation">..</span>9<span class="token punctuation">}</span>0 1 2 3 4 5 6 7 8 9<span class="token comment" spellcheck="true"># mv 1.sh 1.sh.bak</span>➜ <span class="token function">mv</span> 1.sh<span class="token punctuation">{</span>,.bak<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>;会确保上一条命令执行完在执行下一条</p></li><li><p>:类似于python中的pass</p></li></ul><h4 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h4><ul><li>退出程序命令<ul><li>exit：会返回上一条命令的成功与否</li><li>exit 10：返回值10，非0则是不正常退出</li></ul></li><li>test命令可以用来检查文件或者比较值<ul><li>test可以做一下测试<ul><li>文件测试</li><li>整数比较测试</li><li>字符串测试</li></ul></li><li>test测试语句可以简化为[]符号</li><li>[]还有扩展写法[[]]支持&amp;&amp;、||等</li></ul></li></ul><h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">==</span> <span class="token string">"start"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> start..."</span><span class="token keyword">elif</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">==</span> <span class="token string">"stop"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> stop..."</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token string">"Usage: <span class="token variable">$0</span> {start|stop}"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token keyword">case</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token keyword">in</span>     <span class="token string">"start"</span> <span class="token operator">|</span> <span class="token string">"START"</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> start..."</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token string">"stop"</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$0</span> stop..."</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>    *<span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"Usage: <span class="token variable">$0</span> {start|stop}"</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> filename <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> *.mp3<span class="token variable">)</span></span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token function">mv</span> <span class="token variable">$filename</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $filename .mp3<span class="token variable">)</span></span>.mp4<span class="token keyword">done</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">))</span></span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$i</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>n<span class="token operator">=</span>1<span class="token comment" spellcheck="true"># [[ $n &lt; 10 ]] 不能用于条件判断</span><span class="token keyword">while</span> <span class="token punctuation">[</span>  <span class="token variable">$n</span> -lt 10 <span class="token punctuation">]</span><span class="token keyword">do</span>    <span class="token keyword">echo</span> <span class="token variable">$n</span>    <span class="token variable"><span class="token punctuation">((</span>n<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> filename <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> *.mp4<span class="token variable">)</span></span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -x <span class="token variable">$filename</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token variable">$filename</span> <span class="token punctuation">;</span> <span class="token keyword">break</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="循环处理位置参数"><a href="#循环处理位置参数" class="headerlink" title="循环处理位置参数"></a>循环处理位置参数</h4><p><code>$#</code>：位置参数的数量</p><p><code>$*</code>：所有的位置参数</p><p><code>$0</code>：脚本名称</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true"># for</span><span class="token keyword">for</span> args <span class="token keyword">in</span> <span class="token variable">$*</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$args</span>"</span> <span class="token operator">=</span> <span class="token string">"help"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$args</span>"</span> <span class="token string">"<span class="token variable">$args</span>"</span>    <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token comment" spellcheck="true"># while</span><span class="token keyword">while</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$#</span>"</span> -ge 1 <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token operator">=</span> <span class="token string">"help"</span> <span class="token punctuation">]</span> <span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">echo</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token string">"<span class="token variable">$1</span>"</span>    <span class="token keyword">fi</span>    <span class="token function">shift</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p><code>local</code>：声明函数内变量</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">function</span> checkpid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    local i    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token variable">$*</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>        <span class="token punctuation">[</span> -d <span class="token string">"/proc/<span class="token variable">$i</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">return</span> 0    <span class="token keyword">done</span>    <span class="token keyword">return</span> 1<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="脚本控制"><a href="#脚本控制" class="headerlink" title="脚本控制"></a>脚本控制</h4><p>fork炸弹</p><p><code>.(){.|.&amp;};.</code></p><p>普通用户创建的线程数是收到控制的，可以通过<code>ulimit -a</code>控制</p><h4 id="捕获信号"><a href="#捕获信号" class="headerlink" title="捕获信号"></a>捕获信号</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># kill -l</span>1<span class="token punctuation">)</span> SIGHUP     2<span class="token punctuation">)</span> SIGINT     3<span class="token punctuation">)</span> SIGQUIT     4<span class="token punctuation">)</span> SIGILL     5<span class="token punctuation">)</span> SIGTRAP6<span class="token punctuation">)</span> SIGABRT     7<span class="token punctuation">)</span> SIGBUS     8<span class="token punctuation">)</span> SIGFPE     9<span class="token punctuation">)</span> SIGKILL    10<span class="token punctuation">)</span> SIGUSR111<span class="token punctuation">)</span> SIGSEGV    12<span class="token punctuation">)</span> SIGUSR2    13<span class="token punctuation">)</span> SIGPIPE    14<span class="token punctuation">)</span> SIGALRM    15<span class="token punctuation">)</span> SIGTERM16<span class="token punctuation">)</span> SIGSTKFLT    17<span class="token punctuation">)</span> SIGCHLD    18<span class="token punctuation">)</span> SIGCONT    19<span class="token punctuation">)</span> SIGSTOP    20<span class="token punctuation">)</span> SIGTSTP21<span class="token punctuation">)</span> SIGTTIN    22<span class="token punctuation">)</span> SIGTTOU    23<span class="token punctuation">)</span> SIGURG    24<span class="token punctuation">)</span> SIGXCPU    25<span class="token punctuation">)</span> SIGXFSZ26<span class="token punctuation">)</span> SIGVTALRM    27<span class="token punctuation">)</span> SIGPROF    28<span class="token punctuation">)</span> SIGWINCH    29<span class="token punctuation">)</span> SIGIO    30<span class="token punctuation">)</span> SIGPWR31<span class="token punctuation">)</span> SIGSYS    34<span class="token punctuation">)</span> SIGRTMIN    35<span class="token punctuation">)</span> SIGRTMIN+1    36<span class="token punctuation">)</span> SIGRTMIN+2    37<span class="token punctuation">)</span> SIGRTMIN+338<span class="token punctuation">)</span> SIGRTMIN+4    39<span class="token punctuation">)</span> SIGRTMIN+5    40<span class="token punctuation">)</span> SIGRTMIN+6    41<span class="token punctuation">)</span> SIGRTMIN+7    42<span class="token punctuation">)</span> SIGRTMIN+843<span class="token punctuation">)</span> SIGRTMIN+9    44<span class="token punctuation">)</span> SIGRTMIN+10    45<span class="token punctuation">)</span> SIGRTMIN+11    46<span class="token punctuation">)</span> SIGRTMIN+12    47<span class="token punctuation">)</span> SIGRTMIN+1348<span class="token punctuation">)</span> SIGRTMIN+14    49<span class="token punctuation">)</span> SIGRTMIN+15    50<span class="token punctuation">)</span> SIGRTMAX-14    51<span class="token punctuation">)</span> SIGRTMAX-13    52<span class="token punctuation">)</span> SIGRTMAX-1253<span class="token punctuation">)</span> SIGRTMAX-11    54<span class="token punctuation">)</span> SIGRTMAX-10    55<span class="token punctuation">)</span> SIGRTMAX-9    56<span class="token punctuation">)</span> SIGRTMAX-8    57<span class="token punctuation">)</span> SIGRTMAX-758<span class="token punctuation">)</span> SIGRTMAX-6    59<span class="token punctuation">)</span> SIGRTMAX-5    60<span class="token punctuation">)</span> SIGRTMAX-4    61<span class="token punctuation">)</span> SIGRTMAX-3    62<span class="token punctuation">)</span> SIGRTMAX-263<span class="token punctuation">)</span> SIGRTMAX-1    64<span class="token punctuation">)</span> SIGRTMAX<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">trap</span> <span class="token string">"echo 15"</span> 15<span class="token keyword">echo</span> $$<span class="token keyword">while</span> <span class="token keyword">:</span> <span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token keyword">:</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h4><p>单次任务用<code>at</code>，多次任务用<code>crontab</code></p><h4 id="文件加锁"><a href="#文件加锁" class="headerlink" title="文件加锁"></a>文件加锁</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 加锁</span>flock -xn <span class="token string">"/tmp/f.lock"</span> -c <span class="token string">"/tmp/1.sh"</span><span class="token comment" spellcheck="true"># 另外一个地方执行该脚本时就会直接退出</span>flock -xn <span class="token string">"/tmp/f.lock"</span> -c <span class="token string">"/tmp/1.sh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文本操作"><a href="#文本操作" class="headerlink" title="文本操作"></a>文本操作</h3><h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><p>grep 后面可以接正则元字符</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">grep</span> sdf.*$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="find演示"><a href="#find演示" class="headerlink" title="find演示"></a>find演示</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">find</span> /etc -name pa*<span class="token function">find</span> /etc -regex .*wd$<span class="token function">find</span> *.txt -exec <span class="token function">rm</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Sed-替换"><a href="#Sed-替换" class="headerlink" title="Sed 替换"></a>Sed 替换</h4><p>sed默认只替换每行的第一个</p><p>sed的基本工作方式：</p><ul><li>将文件按行读取到内存中</li><li>使用sed的每个脚本对该行进行操作</li><li>处理完成后输出改行</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sed</span> <span class="token string">'a/lod/new/'</span> filename<span class="token comment" spellcheck="true"># 如果要替换/，可以使用别的分隔符</span><span class="token function">sed</span> <span class="token string">'s!/!abc!'</span> filename<span class="token comment" spellcheck="true"># 执行多个命令</span><span class="token function">sed</span> -e <span class="token string">'s/a/aa/'</span> -e <span class="token string">'s/aa/bb/'</span> afil<span class="token function">sed</span> <span class="token string">'s/a/aa/;s/aa/bb/'</span> afile<span class="token comment" spellcheck="true"># 将替换后的内容写入到原始文件</span><span class="token function">sed</span> -i <span class="token string">'s/a/aa/;s/aa/bb/'</span> afile<span class="token comment" spellcheck="true"># 支持元字符</span><span class="token function">head</span> -5 /etc/passwd <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'s/s*bin//'</span><span class="token comment" spellcheck="true"># 支持回调，源文件内容：axyzb</span><span class="token comment" spellcheck="true"># 扩展元字符使用 -r 参数</span>root@4ebe31ff7a18:/tmp<span class="token comment" spellcheck="true"># sed -r 's/(a.*b)/\1:\1/' cfile</span>axyzb:axyzb<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sed替换指令加强版"><a href="#sed替换指令加强版" class="headerlink" title="sed替换指令加强版"></a>sed替换指令加强版</h4><p>标志位</p><p>s/old/new/标志位</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 全局替换</span>s/old/new/g<span class="token comment" spellcheck="true"># 替换前两次</span>s/old/new/2<span class="token comment" spellcheck="true"># 只输出替换成功的行, -n 不输出行， p 输出替换成功的行</span><span class="token function">sed</span> -n <span class="token string">'s/root/123/p'</span><span class="token comment" spellcheck="true"># 将替换成功的行写入别的文件</span><span class="token function">sed</span> -n <span class="token string">'s/root/123/w a.txt'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>寻址</p><p>/正则表达式/s/old/new/g</p><p>行号s/old/new/g</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 从1-6行进行替换</span><span class="token function">head</span> -6 /etc/passwd <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'1,6s/games/!!!!!!!!/'</span><span class="token comment" spellcheck="true"># 匹配root行，进行替换</span><span class="token function">head</span> -6 /etc/passwd <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'/root/s/bash/!!!!!!!!/'</span><span class="token comment" spellcheck="true"># 多条命令</span><span class="token function">sed</span> /正则/<span class="token punctuation">{</span>s/old/new/<span class="token punctuation">;</span>s/old/new/<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>脚本文件</p><p>文件里写正常的sed命令</p><pre class="line-numbers language-bahs"><code class="language-bahs">sed -f sedscript filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="sed的其他常用命令"><a href="#sed的其他常用命令" class="headerlink" title="sed的其他常用命令"></a>sed的其他常用命令</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 删除行，删除操作会改变模式空间，就和管道的作用一样，后面的命令会以删除后的文件内容为准</span><span class="token function">sed</span> <span class="token string">'/ab/d'</span> bfile<span class="token function">sed</span> <span class="token string">'/ab/d;='</span> bfile<span class="token comment" spellcheck="true"># 在上一行插入</span><span class="token function">sed</span> <span class="token string">'/ab/i hello'</span> bfile<span class="token comment" spellcheck="true"># 在下一行插入</span><span class="token function">sed</span> <span class="token string">'/ab/a hello'</span> bfile<span class="token comment" spellcheck="true"># 替换行</span><span class="token function">sed</span> <span class="token string">'/ab/c hello'</span> bfile<span class="token comment" spellcheck="true"># 合并两个文件</span><span class="token function">sed</span> <span class="token string">'/ab/r cfile'</span> bfile<span class="token comment" spellcheck="true"># 下一行命令 n</span><span class="token comment" spellcheck="true"># 打印行号 =</span><span class="token comment" spellcheck="true"># 打印匹配行，这个替换中的p不同，通常和-n参数配合只打印匹配到的行</span><span class="token function">sed</span> -n <span class="token string">'/ab/p'</span> bfile<span class="token comment" spellcheck="true"># 退出命令</span><span class="token function">sed</span> 10q filename <span class="token comment" spellcheck="true"># 不会把文件全部读入</span><span class="token function">sed</span> -n 1,10p filename<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sed多行模式"><a href="#sed多行模式" class="headerlink" title="sed多行模式"></a>sed多行模式</h4><p><code>N</code>：将下一行加入到模式空间中</p><p><code>D</code>：删除模式空间中的第一个字符到第一个换行符</p><p><code>P</code>：打印模式空间中第一个字符到第一个换行符</p><pre class="line-numbers language-bash"><code class="language-bash">root@4ebe31ff7a18:/tmp<span class="token comment" spellcheck="true"># cat dfile</span>helloroot@4ebe31ff7a18:/tmp<span class="token comment" spellcheck="true"># sed 'N;s/hel\nlo/!!!/' dfile</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span>root@4ebe31ff7a18:/tmp<span class="token comment" spellcheck="true"># sed 'N;s/hel.lo/!!!/' dfile</span><span class="token operator">!</span><span class="token operator">!</span><span class="token operator">!</span><span class="token comment" spellcheck="true"># 多行操作</span>root@4ebe31ff7a18:/tmp<span class="token comment" spellcheck="true"># cat b.txt</span>hello <span class="token function">bash</span> hello <span class="token function">bash</span><span class="token comment" spellcheck="true"># 两行连起来操作</span>root@4ebe31ff7a18:/tmp<span class="token comment" spellcheck="true"># sed 'N;s/\n//;s/hello bash/hello sed\n/;P;D' b.txt</span>hello <span class="token function">sed</span> hello <span class="token function">sed</span><span class="token comment" spellcheck="true"># 三行连起来操作</span><span class="token function">sed</span> <span class="token string">'N;N;s/\n//;s/hello bash/hello sed\n/;P;D'</span> b.txt <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sed保持空间"><a href="#sed保持空间" class="headerlink" title="sed保持空间"></a>sed保持空间</h4><p><img src="./image-20201019133011333.png" alt="image-20201019133011333"></p><p><code>h</code>和<code>H</code>将模式空间内容存放到保持空间</p><p><code>g</code>和<code>G</code>将保持空间内容取出到模式空间</p><p><code>x</code>交换模式空间和保持空间内容</p><blockquote><p>在保持空间中不能对数据进行操作，只能取到模式空间中才可以</p><p>小写是覆盖模式，大写是追加模式</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 倒序输出，可以使用tac命令</span>root@4ebe31ff7a18:/tmp<span class="token comment" spellcheck="true"># cat efile</span>12345root@4ebe31ff7a18:/tmp<span class="token comment" spellcheck="true"># sed -n '1h;G;x;$p' efile</span>43211<span class="token comment" spellcheck="true"># 解决第一行重复输出的问题，是因为第一行放入到保持空间后又拿了出来，修改为当第一次执行时不从保持空间取出来</span>root@4ebe31ff7a18:/tmp<span class="token comment" spellcheck="true"># sed -n '1h;1!G;x;$p' efile</span>4321<span class="token comment" spellcheck="true"># 解决最后一行没有输出的问题</span>root@4ebe31ff7a18:/tmp<span class="token comment" spellcheck="true"># sed -n '1h;1!G;$!x;$p' efile</span>54321<span class="token comment" spellcheck="true"># 另外的解决方法</span>root@4ebe31ff7a18:/tmp<span class="token comment" spellcheck="true"># sed -n '1!G;h;$p' efile</span>54321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="认识AWK"><a href="#认识AWK" class="headerlink" title="认识AWK"></a>认识AWK</h4><ul><li><code>awk</code>更像是脚本语言</li><li><code>awk</code>用于比较规范的文本处理，用于统计数量并输出指定字段</li><li><code>sed</code>将不规范的文本，处理为比较规范的文本</li></ul><h4 id="AWK的字段"><a href="#AWK的字段" class="headerlink" title="AWK的字段"></a>AWK的字段</h4><ul><li>每行称作AWK的记录</li><li>使用空格、制表符分隔开的单词成为字段</li><li>可以自己制定分隔的字段</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">awk</span> -F <span class="token string">"''"</span> <span class="token string">'/^menu/{ print x++, <span class="token variable">$2</span> }'</span> /boot/grub2/grub.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-F</code>：指定分隔符</li><li><code>x++</code>：打印行号</li><li><code>^menu</code>：匹配行</li></ul><h4 id="AWK表达式"><a href="#AWK表达式" class="headerlink" title="AWK表达式"></a>AWK表达式</h4><p>系统变量</p><ul><li><code>FS</code>表示输入的内容用什么分隔，<code>OFS</code>表示输出用什么符号分隔</li><li><code>RS</code>行分隔符</li><li><code>NR</code>打印行号，如果文件变化了<code>NR</code>是不会重新排号，<code>FNR</code>则会重新排号</li><li><code>NF</code>字段的数量</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下面两行意义相同，BEGIN表示在输入内容之前的操作</span><span class="token function">head</span> -n 6 /etc/passwd <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN{FS=":"}{print <span class="token variable">$1</span>}'</span><span class="token function">head</span> -n 6 /etc/passwd <span class="token operator">|</span> <span class="token function">awk</span> -F <span class="token string">':'</span> <span class="token string">'{print <span class="token variable">$1</span>}'</span><span class="token comment" spellcheck="true"># 设置输出分隔符</span><span class="token function">head</span> -n 6 /etc/passwd <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'BEGIN{FS=":";OFS="-"}{print <span class="token variable">$1</span>,<span class="token variable">$2</span>}# 改变内容行的分隔符，改为通过:来换行，<span class="token variable">$0</span>是输出一行head -n 6 /etc/passwd | awk '</span>BEGIN<span class="token punctuation">{</span>RS<span class="token operator">=</span><span class="token string">":"</span><span class="token punctuation">}</span><span class="token punctuation">{</span>print <span class="token variable">$0</span><span class="token punctuation">}</span><span class="token string">'# 打印行号root@709230c0b366:~# awk '</span><span class="token punctuation">{</span>print NR, <span class="token variable">$0</span><span class="token punctuation">}</span><span class="token string">' /etc/hosts /etc/hosts1 127.0.0.1    localhost2 ::1    localhost ip6-localhost ip6-loopback3 fe00::0    ip6-localnet4 ff00::0    ip6-mcastprefix5 ff02::1    ip6-allnodes6 ff02::2    ip6-allrouters7 172.17.0.4    709230c0b3668 127.0.0.1    localhost9 ::1    localhost ip6-localhost ip6-loopback10 fe00::0    ip6-localnet11 ff00::0    ip6-mcastprefix12 ff02::1    ip6-allnodes13 ff02::2    ip6-allrouters14 172.17.0.4    709230c0b366root@709230c0b366:~# awk '</span><span class="token punctuation">{</span>print FNR, <span class="token variable">$0</span><span class="token punctuation">}</span><span class="token string">' /etc/hosts /etc/hosts1 127.0.0.1    localhost2 ::1    localhost ip6-localhost ip6-loopback3 fe00::0    ip6-localnet4 ff00::0    ip6-mcastprefix5 ff02::1    ip6-allnodes6 ff02::2    ip6-allrouters7 172.17.0.4    709230c0b3661 127.0.0.1    localhost2 ::1    localhost ip6-localhost ip6-loopback3 fe00::0    ip6-localnet4 ff00::0    ip6-mcastprefix5 ff02::1    ip6-allnodes6 ff02::2    ip6-allrouters7 172.17.0.4    709230c0b366# 打印有多少个字段head -n 6 /etc/passwd | awk '</span>BEGIN<span class="token punctuation">{</span>FS<span class="token operator">=</span><span class="token string">":"</span><span class="token punctuation">}</span><span class="token punctuation">{</span>print NF<span class="token punctuation">}</span><span class="token string">'# 打印最后一个字段的值head -n 6 /etc/passwd | awk '</span>BEGIN<span class="token punctuation">{</span>FS<span class="token operator">=</span><span class="token string">":"</span><span class="token punctuation">}</span><span class="token punctuation">{</span>print <span class="token variable">$NF</span><span class="token punctuation">}</span>'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AWK的判断和循环"><a href="#AWK的判断和循环" class="headerlink" title="AWK的判断和循环"></a>AWK的判断和循环</h4><pre class="line-numbers language-bash"><code class="language-bash">root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># cat a.txt</span>user1 34 54 23 12user2 94 34 73 22user3 99 45 12 49root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># awk '{ if($2>80) {print $1,$2} }' a.txt</span>user2 94user3 99root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># awk '{ for(c=2;c&lt;=NF;c++) print $c }' a.txt</span>345423129434732299451249root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># awk '{ for(c=2;c&lt;=NF;c++) sum+=$c; print sum}' a.txt</span>123346551<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AWK数组"><a href="#AWK数组" class="headerlink" title="AWK数组"></a>AWK数组</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># END表示数据读入完毕</span>root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># awk '{ sum=0; for(c=2;c&lt;=NF;c++) sum+=$c; average[$1]=sum/(NF-1) }END{ for( user in average ) print user,average[user] }' a.txt</span>user1 30.75user2 55.75user3 51.25root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># cat a.txt</span>user1 34 54 23 12user2 94 34 73 22user3 99 45 12 49root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># awk '{ sum=0; for(c=2;c&lt;=NF;c++) sum+=$c; average[$1]=sum/(NF-1) }END{ for( user in average ) print user,average[user] }' a.txt</span>user1 30.75user2 55.75user3 51.25root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># awk '{ sum=0; for(c=2;c&lt;=NF;c++) sum+=$c; average[$1]=sum/(NF-1) }END{ for( user in average ) sum2+=average[user]; print sum2/NR }' a.txt</span>45.9167<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AWK数组的应用"><a href="#AWK数组的应用" class="headerlink" title="AWK数组的应用"></a>AWK数组的应用</h4><pre class="line-numbers language-bash"><code class="language-bash">root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># cat a.txt</span>user1 34 54 23 12user2 94 34 73 22user3 99 45 12 49root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># cat result.awk</span><span class="token punctuation">{</span><span class="token function">sum</span> <span class="token operator">=</span> 0for<span class="token punctuation">(</span>c <span class="token operator">=</span> 2<span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> NF<span class="token punctuation">;</span> c++<span class="token punctuation">)</span>    <span class="token function">sum</span> +<span class="token operator">=</span> <span class="token variable">$c</span>average<span class="token punctuation">[</span><span class="token variable">$1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sum</span> / <span class="token punctuation">(</span>NF - 1<span class="token punctuation">)</span>print <span class="token variable">$1</span>, average<span class="token punctuation">[</span><span class="token variable">$1</span><span class="token punctuation">]</span><span class="token punctuation">}</span>END<span class="token punctuation">{</span>for<span class="token punctuation">(</span>user <span class="token keyword">in</span> average<span class="token punctuation">)</span>    sum_all +<span class="token operator">=</span> average<span class="token punctuation">[</span>user<span class="token punctuation">]</span>avg_all <span class="token operator">=</span> sum_all / NRfor<span class="token punctuation">(</span>user <span class="token keyword">in</span> average<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>average<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">></span> avg_all<span class="token punctuation">)</span>        above++    <span class="token keyword">else</span>        below++print <span class="token string">"above"</span>, aboveprint <span class="token string">"below"</span>, below<span class="token punctuation">}</span>root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># awk -f result.awk a.txt</span>user1 30.75user2 55.75user3 51.25above 2below 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="AWK函数"><a href="#AWK函数" class="headerlink" title="AWK函数"></a>AWK函数</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 整数</span>root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># awk 'BEGIN{pi=3.114; print int(pi)}'</span>3<span class="token comment" spellcheck="true"># 随机数</span>root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># awk 'BEGIN{srand(); print rand()}'</span>0.739691root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># awk 'BEGIN{srand(); print rand()}'</span>0.00276686root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># awk 'BEGIN{srand(); print rand()}'</span>0.134305<span class="token comment" spellcheck="true"># 自定义函数</span>root@7dc8bb7d5702:/tmp<span class="token comment" spellcheck="true"># awk 'function double(str) {return str str} BEGIN{print double("hello")}'</span>hellohello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="服务管理"><a href="#服务管理" class="headerlink" title="服务管理"></a>服务管理</h3><h4 id="防火墙概述"><a href="#防火墙概述" class="headerlink" title="防火墙概述"></a>防火墙概述</h4><ul><li>软件防火墙，主要用来限制ip，过滤一些ip等<ul><li>包过滤防火墙，比如控制ip，iptables就是包过滤防火墙</li><li>应用层防火墙，比如根据系统用户来控制</li></ul></li><li>硬件防火墙，用来放dos攻击等，也兼顾一些软件防火墙的功能</li></ul><p>Centos 6默认使用的防火墙是iptables,Centos 7 是firewallD，但这两者底层都是内核中的netfilter来进行实际的控制</p><h4 id="iptables的表和链"><a href="#iptables的表和链" class="headerlink" title="iptables的表和链"></a>iptables的表和链</h4><ul><li>规则表<pre><code>* filter，用来过滤* nat，地址空间转换* mangle* Raw</code></pre></li><li>规则链<pre><code>* INPUT* OUTPUT* FORWARD* PREROUTING，路由前* POSTROUTING，路由后</code></pre></li></ul><h4 id="iptables-filter表"><a href="#iptables-filter表" class="headerlink" title="iptables filter表"></a>iptables filter表</h4><ul><li>iptales -t filter 命令 规则链 规则</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -v 显示更详细信息</span><span class="token comment" spellcheck="true"># -n 不进行反向域名解析</span><span class="token comment" spellcheck="true"># -L 显示iptables信息</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -t filter -vnL</span>Chain INPUT <span class="token punctuation">(</span>policy ACCEPT 380 packets, 28982 bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token function">source</span>               destination    0     0 ACCEPT     all  --  *      *       10.0.0.1             0.0.0.0/0Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT 0 packets, 0 bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token function">source</span>               destinationChain OUTPUT <span class="token punctuation">(</span>policy ACCEPT 373 packets, 53029 bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token function">source</span>               destination<span class="token comment" spellcheck="true"># 增加iptables规则</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -t filter -A INPUT -s 10.0.0.1 -j ACCEPT</span><span class="token comment" spellcheck="true"># 查看nat规则</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -t nat -vnL</span>Chain PREROUTING <span class="token punctuation">(</span>policy ACCEPT 0 packets, 0 bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token function">source</span>               destinationChain INPUT <span class="token punctuation">(</span>policy ACCEPT 0 packets, 0 bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token function">source</span>               destinationChain OUTPUT <span class="token punctuation">(</span>policy ACCEPT 0 packets, 0 bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token function">source</span>               destinationChain POSTROUTING <span class="token punctuation">(</span>policy ACCEPT 0 packets, 0 bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token function">source</span>               destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="iptables过滤规则的使用"><a href="#iptables过滤规则的使用" class="headerlink" title="iptables过滤规则的使用"></a>iptables过滤规则的使用</h4><p>规则是有顺序的，会按照顺序匹配，顺序在前的会生效</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># -I 会在最前面插入，-A 会在尾部追加</span>iptables -I INPUT -s 10.0.0.3 -j DROP<span class="token comment" spellcheck="true"># 下面默认规则都是ACCEPT，如果没有匹配到我们指定的规则，最后就会匹配默认规则</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iptables -nvL</span>Chain INPUT <span class="token punctuation">(</span>policy ACCEPT 16 packets, 1704 bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token function">source</span>               destination    0     0 DROP       all  --  *      *       10.0.0.3             0.0.0.0/0    0     0 ACCEPT     all  --  *      *       10.0.0.1             0.0.0.0/0    0     0 ACCEPT     all  --  *      *       10.0.0.2             0.0.0.0/0Chain FORWARD <span class="token punctuation">(</span>policy ACCEPT 0 packets, 0 bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token function">source</span>               destinationChain OUTPUT <span class="token punctuation">(</span>policy ACCEPT 14 packets, 2986 bytes<span class="token punctuation">)</span> pkts bytes target     prot opt <span class="token keyword">in</span>     out     <span class="token function">source</span>               destination <span class="token comment" spellcheck="true"># 修改默认规则，input 为拒绝所有ipl连接</span> iptables -P INPUT DROP <span class="token comment" spellcheck="true"># 清空所有自定义规则，不会修改默认规则</span> iptables -F <span class="token comment" spellcheck="true"># 清空某个规则</span> iptables -D 序列号 <span class="token comment" spellcheck="true"># 多个规则</span>iptables -t filter -A INPUT -i eth0 -s 10.0.0.2 -p tcp --dport 80 -j ACCEPT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="iptables-nat表使用"><a href="#iptables-nat表使用" class="headerlink" title="iptables nat表使用"></a>iptables nat表使用</h4><p>iptables -t nat 命令 规则链 规则</p><ul><li>PREROUTING 目的地址转换</li><li>POSTROUTING 源地址转换</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 修改目的地址，转发到10.0.0.1上</span>iptables -t nat -A PREROUTING -i eth0 -d 114.115.116.117 -p tcp -dport 80 -j DNAT --to-destination 10.0.0.1<span class="token comment" spellcheck="true"># 修改源地址，将内网ip都改为出口IP地址</span>iptables -t nat -A POSTROUTING -s 10.0.0.0/24 -o eth1 -j SNAT --to-source 111.112.113.114<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>iptables 自定义的规则默认是存在内存中的，需要持久化</p><p>可以直接在/etc/sysconfig/iptables中写数据，也可以下载工具将内存中的数据写到文件中<code>yum install iptables-services</code></p><h4 id="firewallD"><a href="#firewallD" class="headerlink" title="firewallD"></a>firewallD</h4><p>firewallD的特点</p><ul><li>支持区域“zone”的概念，类似于iptables中的规则链</li><li>firewall-cmd</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 启动firewalld，iptables和firewalld只能运行一个</span><span class="token punctuation">[</span>xx@VM-0-16-centos ~<span class="token punctuation">]</span>$ systemctl status firewalld.service● firewalld.service - firewalld - dynamic firewall daemon   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/firewalld.service<span class="token punctuation">;</span> disabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>   Active: inactive <span class="token punctuation">(</span>dead<span class="token punctuation">)</span>     Docs: man:firewalld<span class="token punctuation">(</span>1<span class="token punctuation">)</span><span class="token punctuation">[</span>xx@VM-0-16-centos ~<span class="token punctuation">]</span>$ systemctl start firewalld.service<span class="token operator">==</span><span class="token operator">==</span> AUTHENTICATING FOR org.freedesktop.systemd1.manage-units <span class="token operator">==</span><span class="token operator">=</span>Authentication is required to manage system services or units.Authenticating as: rootPassword:<span class="token operator">==</span><span class="token operator">==</span> AUTHENTICATION COMPLETE <span class="token operator">==</span><span class="token operator">=</span><span class="token punctuation">[</span>xx@VM-0-16-centos ~<span class="token punctuation">]</span>$ systemctl status firewalld.service● firewalld.service - firewalld - dynamic firewall daemon   Loaded: loaded <span class="token punctuation">(</span>/usr/lib/systemd/system/firewalld.service<span class="token punctuation">;</span> disabled<span class="token punctuation">;</span> vendor preset: enabled<span class="token punctuation">)</span>   Active: active <span class="token punctuation">(</span>running<span class="token punctuation">)</span> since Mon 2020-11-02 12:19:38 CST<span class="token punctuation">;</span> 4s ago     Docs: man:firewalld<span class="token punctuation">(</span>1<span class="token punctuation">)</span> Main PID: 8308 <span class="token punctuation">(</span>firewalld<span class="token punctuation">)</span>   CGroup: /system.slice/firewalld.service           └─8308 /usr/bin/python2 -Es /usr/sbin/firewalld --nofork --nopid<span class="token punctuation">[</span>xx@VM-0-16-centos ~<span class="token punctuation">]</span>$ iptables -nvLiptables v1.4.21: can<span class="token string">'t initialize iptables table `filter'</span><span class="token keyword">:</span> Permission denied <span class="token punctuation">(</span>you must be root<span class="token punctuation">)</span>Perhaps iptables or your kernel needs to be upgraded.<span class="token comment" spellcheck="true"># 用firewall-cmd命令</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --state</span>running<span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --list-all</span>public  <span class="token comment" spellcheck="true"># public是默认的区域，既zone</span>  target: default  icmp-block-inversion: no  interfaces: <span class="token comment" spellcheck="true"># 网卡</span>  sources:  <span class="token comment" spellcheck="true"># 运行访问的ip</span>  services: dhcpv6-client <span class="token function">ssh</span> <span class="token comment" spellcheck="true"># 运行访问的服务，如果服务用的是默认端口，则可以替代端口，否则不行</span>  ports: <span class="token comment" spellcheck="true"># 运行访问的端口</span>  protocols:  masquerade: no  forward-ports:  source-ports:  icmp-blocks:  rich rules:<span class="token comment" spellcheck="true"># 单独查看每个参数</span>  <span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --zone=public --list-services</span>dhcpv6-client <span class="token function">ssh</span><span class="token comment" spellcheck="true"># 查看有哪些区域</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --get-zones</span>block dmz drop external home internal public trusted work<span class="token comment" spellcheck="true"># 查看默认使用的区域</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --get-default-zone</span>public<span class="token comment" spellcheck="true"># 查看激活的区域</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --get-active-zone</span><span class="token comment" spellcheck="true"># 添加规则</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --add-service=https</span>success<span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --add-port=81/tcp</span>success<span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --list-all</span>public  target: default  icmp-block-inversion: no  interfaces:  sources:  services: dhcpv6-client https <span class="token function">ssh</span>  ports: 81/tcp  protocols:  masquerade: no  forward-ports:  source-ports:  icmp-blocks:  rich rules:<span class="token comment" spellcheck="true"># 持久化到磁盘中, --permanent,用了该命令用--list-all是看不到，需要重新加载</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --add-port=82/tcp --permanent</span>success<span class="token comment" spellcheck="true"># reload会删除临时的规则</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --reload</span>success<span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --list-all</span>public  target: default  icmp-block-inversion: no  interfaces:  sources:  services: dhcpv6-client <span class="token function">ssh</span>  ports: 82/tcp  protocols:  masquerade: no  forward-ports:  source-ports:  icmp-blocks:  rich rules:<span class="token comment" spellcheck="true"># 删除规则</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --remove-service=https</span>success<span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># firewall-cmd --list-all</span>public  target: default  icmp-block-inversion: no  interfaces:  sources:  services: dhcpv6-client <span class="token function">ssh</span>  ports: 82/tcp  protocols:  masquerade: no  forward-ports:  source-ports:  icmp-blocks:  rich rules:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="SSH介绍及Telnet明文漏洞"><a href="#SSH介绍及Telnet明文漏洞" class="headerlink" title="SSH介绍及Telnet明文漏洞"></a>SSH介绍及Telnet明文漏洞</h4><p>telenet是明文传输</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 将公钥拷贝到服务器上</span>ssh-copy-id -i /root/.ssh/id_ras.pub root@/xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="FTP服务器vsftpd介绍与软件包安装"><a href="#FTP服务器vsftpd介绍与软件包安装" class="headerlink" title="FTP服务器vsftpd介绍与软件包安装"></a>FTP服务器vsftpd介绍与软件包安装</h4><p>FTP协议分为两条连接，不同的信息要用不同连接传输</p><pre><code>* 命令链路* 数据链路</code></pre><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 安装</span>yum <span class="token function">install</span> vsftpd <span class="token function">ftp</span><span class="token comment" spellcheck="true"># 启动</span>systemctl start vsftpd.service<span class="token comment" spellcheck="true"># 开机自启动</span>systemctl <span class="token function">enable</span> vsftpd.service<span class="token comment" spellcheck="true"># 访问，使用ftp账户，则是匿名模式，默认的目录是宿主机的/var/ftp目录。也可以用系统用户，目录则是用户根目录</span><span class="token punctuation">[</span>root@VM-0-16-centos ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ftp localhost</span>Trying ::1<span class="token punctuation">..</span>.Connected to localhost <span class="token punctuation">(</span>::1<span class="token punctuation">)</span>.220 <span class="token punctuation">(</span>vsFTPd 3.0.2<span class="token punctuation">)</span>Name <span class="token punctuation">(</span>localhost:root<span class="token punctuation">)</span>: <span class="token function">ftp</span>331 Please specify the password.Password:230 Login successful.Remote system <span class="token function">type</span> is UNIX.Using binary mode to transfer files.ftp<span class="token operator">></span> <span class="token function">ls</span>229 Entering Extended Passive Mode <span class="token punctuation">(</span><span class="token operator">||</span><span class="token operator">|</span>31008<span class="token operator">|</span><span class="token punctuation">)</span>.150 Here comes the directory listing.drwxr-xr-x    2 0        0            4096 Apr 01  2020 pub226 Directory send OK.<span class="token comment" spellcheck="true"># 要开启ftp服务让别的主机访问，需要开放端口，最简单的用firewall-cmd --add-service ftp</span><span class="token comment" spellcheck="true"># 下载和上传</span>➜ <span class="token function">ftp</span> 139.155.182.202Connected to 139.155.182.202.220 <span class="token punctuation">(</span>vsFTPd 3.0.2<span class="token punctuation">)</span>Name <span class="token punctuation">(</span>139.155.182.202:qq<span class="token punctuation">)</span>: xx331 Please specify the password.Password:230 Login successful.ftp<span class="token operator">></span> <span class="token operator">!</span>ls <span class="token comment" spellcheck="true"># ！可以执行本机命令</span>a.txt        get_product.py    ipv4        main.go        utilsaa.txt        go.mod        ipv6        result.txt    writefile.pybfile        go.sum        knowledge.py    <span class="token function">test</span>ftp<span class="token operator">></span> put a.txt <span class="token comment" spellcheck="true"># 上传文件，既在远程主机上写入文件</span>200 PORT <span class="token function">command</span> successful. Consider using PASV.150 Ok to send data.226 Transfer complete.7500000 bytes sent <span class="token keyword">in</span> 0.926 seconds <span class="token punctuation">(</span>7.72 Mbytes/s<span class="token punctuation">)</span>ftp<span class="token operator">></span> <span class="token function">ls</span>200 PORT <span class="token function">command</span> successful. Consider using PASV.150 Here comes the directory listing.-rw-r--r--    1 1000     1000      7500000 Nov 02 14:21 a.txtdrwxrwxr-x    2 1000     1000         4096 Nov 02 14:19 <span class="token function">test</span>226 Directory send OK.ftp<span class="token operator">></span> get aaaa.txt <span class="token comment" spellcheck="true"># 下载文件，既在本地主机上写入文件</span>200 PORT <span class="token function">command</span> successful. Consider using PASV.150 Opening BINARY mode data connection <span class="token keyword">for</span> aaaa.txt <span class="token punctuation">(</span>7 bytes<span class="token punctuation">)</span>.WARNING<span class="token operator">!</span> 2 bare linefeeds received <span class="token keyword">in</span> ASCII modeFile may not have transferred correctly.226 Transfer complete.7 bytes received <span class="token keyword">in</span> 0.000211 seconds <span class="token punctuation">(</span>32.4 kbytes/s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="samba和NFS服务"><a href="#samba和NFS服务" class="headerlink" title="samba和NFS服务"></a>samba和NFS服务</h4><p>samba服务主要针对于windows系统</p><p>NFS主要针对的的是linux系统</p><h4 id="Nginx基本配置文件"><a href="#Nginx基本配置文件" class="headerlink" title="Nginx基本配置文件"></a>Nginx基本配置文件</h4><p>OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p><p>OpenResty® 通过汇聚各种设计精良的 Nginx 模块（主要由 OpenResty 团队自主开发），从而将 Nginx  有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及  Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。</p><p>OpenResty® 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻塞 I/O 模型，不仅仅对  HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis  等都进行一致的高性能响应。来自<a href="http://openresty.org/cn/" target="_blank" rel="noopener">OpenResty®官网</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载</span>yum-config-manager --add-repo https://openresty.org/package/centos/openresty.repoyum <span class="token function">install</span> openresty<span class="token comment" spellcheck="true"># 配置文件</span>/usr/local/openresty/nginx/conf/nginx.conf<span class="token comment" spellcheck="true"># 启动</span><span class="token function">service</span> openresty start<span class="token operator">|</span>stop<span class="token operator">|</span>restart<span class="token operator">|</span>reload<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="LNMP"><a href="#LNMP" class="headerlink" title="LNMP"></a>LNMP</h4><p>LAMP: linux + Apache + MySQL + PHP</p><p>LNMP: linux + Nginx + MySQL + PHP </p><p></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB复制集群搭建</title>
      <link href="/2020/09/03/mongo-replice/"/>
      <url>/2020/09/03/mongo-replice/</url>
      
        <content type="html"><![CDATA[<h2 id="MongoDB复制集原理及搭建"><a href="#MongoDB复制集原理及搭建" class="headerlink" title="MongoDB复制集原理及搭建"></a>MongoDB复制集原理及搭建</h2><p>在学习之前先要了解一下，MongoDB的复制集有哪些好处，为什么我们要用到复制集</p><p>复制集群的主要意义是在于实现服务的高可用能够提供不间断的数据支持，MongoDB本身是支持这种特性的。不需要第三方的插件。要实现复制集的高可用，就必须要依赖以下两个功能：</p><ol><li>能够在数据写入时快速的将数据同步到另外的节点</li><li>当写入的节点异常时，集群能够自动选举出一个新的替代节点</li></ol><h3 id="复制集的作用"><a href="#复制集的作用" class="headerlink" title="复制集的作用"></a>复制集的作用</h3><p>复制集群除了能够实现服务的高可用外，还提供了其他的附加作用</p><ol><li>数据分发：将数据从一个地区同步到另外一个地区，每个程序就可以访问就近的数据节点，避免访问异地数据库，减少延迟</li><li>读写分离： 不同类型的操作会在不同的节点上进行，避免单个服务器压力过大</li><li>异地容灾： 能够在数据中心故障的时候切换到异地</li></ol><h3 id="复制集的组成"><a href="#复制集的组成" class="headerlink" title="复制集的组成"></a>复制集的组成</h3><p>一个典型的复制集群至少要有三个以上的节点组成：</p><p><img src="./1.jpg" alt></p><p>主节点：负责写入数据和选举投票</p><p>从节点：复制主节点上的数据和选举投票</p><blockquote><p>MongoDB不在建议使用投票节点</p></blockquote><h3 id="复制集中数据是如何复制的"><a href="#复制集中数据是如何复制的" class="headerlink" title="复制集中数据是如何复制的"></a>复制集中数据是如何复制的</h3><p>在mongo中对数据的操作到达主节点的时候都会被记录下来，这些记录就是<code>oplog</code>。从节点通过在主节点上打开一个tailable游标不断获取主节点上新的<code>oplog</code>，并在自己的节点上进行回放，以此来保持和主节点的数据同步</p><p><img src="./2.jpg" alt></p><h3 id="通过选取完成故障恢复"><a href="#通过选取完成故障恢复" class="headerlink" title="通过选取完成故障恢复"></a>通过选取完成故障恢复</h3><p><img src="./3.jpg" alt></p><p>关于MongoDB的复制集我们要知道以下几点：</p><ol><li>具有投票权的节点两两之间互相发送心跳</li><li>当5次未收到心跳包时判断为节点失联</li><li>如果失联的是主节点，则会进行选举</li><li>如果失联的是从节点，则不会进行选举</li><li>选举基于RAFT一致性算法实现，选举的成功必要条件是大多数节点存活</li><li>复制集最多有50个节点，最多有7个投票节点</li></ol><h3 id="影响选举的主要因素"><a href="#影响选举的主要因素" class="headerlink" title="影响选举的主要因素"></a>影响选举的主要因素</h3><ol><li>必须大多数节点存活</li><li>被选举为主节点的节点必须：<ol><li>能够与大多数节点建立连接</li><li>具有教新的<code>oplog</code></li><li>具有高优先级（如果设置的话）</li></ol></li></ol><h3 id="常见选项"><a href="#常见选项" class="headerlink" title="常见选项"></a>常见选项</h3><ul><li><code>v</code>：是否具有投票权</li><li><code>priority</code>：优先级，优先级越高的节点优先成为主节点，优先级为0则不会成为主节点</li><li><code>hidden</code>：复制数据，对应用不可见。可以拥有投票权，但是优先级必须设置为0</li><li><code>slaveDelay</code>：复制n秒之前的数据，保持与主节点的时间差</li></ul><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>集群当中的每个机器都需要同样的配置，因为不知道什么时候哪个节点会成为主节点</li><li>每个机器上的软件版本必须一致</li><li>增加节点不会增强写性能</li></ul><h3 id="搭建复制集Demo"><a href="#搭建复制集Demo" class="headerlink" title="搭建复制集Demo"></a>搭建复制集Demo</h3><p>下面在Mac上模拟一个具有三个节点的复制集demo</p><p>先创建三个目录，分别存放三个mongo进程需要的文件</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#  qaf in ~/data [22:31:23]</span>$ <span class="token function">mkdir</span> -p ~/data/db<span class="token punctuation">{</span>1,2,3<span class="token punctuation">}</span><span class="token comment" spellcheck="true">#  qaf in ~/data [22:31:32]</span>$ <span class="token function">ls</span>db1 db2 db3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写配置文件<code>mongod.conf</code>，修改其中的参数，分别放到db1/db2/db3中</p><pre class="line-numbers language-text"><code class="language-text">systemLog:  destination: file  path: /data/db1/mongod.log  logAppend: truestorage:  dbPath: /data/db1net:  bindIp: 0.0.0.0   port: 28017 replication:  replSetName: rs0  # 复制集名processManagement:  fork: true     # 在后台运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动三个mongo进程</p><pre class="line-numbers language-bash"><code class="language-bash">$ mongod -f db1/mongod.conf2020-03-16T23:24:03.120+0800 I CONTROL  <span class="token punctuation">[</span>main<span class="token punctuation">]</span> Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols <span class="token string">'none'</span>about to fork child process, waiting <span class="token keyword">until</span> server is ready <span class="token keyword">for</span> connections.forked process: 93736child process started successfully, parent exiting<span class="token comment" spellcheck="true">#  qaf in ~/data [23:24:04]</span>$ mongod -f db2/mongod.conf2020-03-16T23:24:09.914+0800 I CONTROL  <span class="token punctuation">[</span>main<span class="token punctuation">]</span> Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols <span class="token string">'none'</span>about to fork child process, waiting <span class="token keyword">until</span> server is ready <span class="token keyword">for</span> connections.forked process: 93767child process started successfully, parent exiting<span class="token comment" spellcheck="true">#  qaf in ~/data [23:24:10]</span>$ mongod -f db3/mongod.conf2020-03-16T23:24:15.917+0800 I CONTROL  <span class="token punctuation">[</span>main<span class="token punctuation">]</span> Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols <span class="token string">'none'</span>about to fork child process, waiting <span class="token keyword">until</span> server is ready <span class="token keyword">for</span> connections.forked process: 93801child process started successfully, parent exiting<span class="token comment" spellcheck="true">#  qaf in ~/data [23:24:16]</span>$ <span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> mongod  501 93736     1   0 11:24PM ??         0:01.06 mongod -f db1/mongod.conf  501 93767     1   0 11:24PM ??         0:00.79 mongod -f db2/mongod.conf  501 93801     1   0 11:24PM ??         0:00.76 mongod -f db3/mongod.conf  501 93852 88919   0 11:25PM ttys005    0:00.00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto --exclude-dir<span class="token operator">=</span>.bzr --exclude-dir<span class="token operator">=</span>CVS --exclude-dir<span class="token operator">=</span>.git --exclude-dir<span class="token operator">=</span>.hg --exclude-dir<span class="token operator">=</span>.svn mongod<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>现在相当于是有了三个运行mongo的节点，但是他们都是独立的并没有形成一个集群，下面就配置一下，然他们成为一个复制集</p><p>初始化</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token operator">></span> rs.initiate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"info2"</span> <span class="token keyword">:</span> <span class="token string">"no configuration specified. Using a default configuration for the set"</span>,    <span class="token string">"me"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28017"</span>,    <span class="token string">"ok"</span> <span class="token keyword">:</span> 1,    <span class="token string">"operationTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372633, 1<span class="token punctuation">)</span>,    <span class="token string">"<span class="token variable">$clusterTime</span>"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"clusterTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372633, 1<span class="token punctuation">)</span>,        <span class="token string">"signature"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"hash"</span> <span class="token keyword">:</span> BinData<span class="token punctuation">(</span>0,<span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>,            <span class="token string">"keyId"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化之后会看到命令行提示符已经变成了 rs0,这是集群的名字，SECONDARY 后按回车会看到 PRIMARY，表示这个节点已经从从节点变为了主节点</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:SECONDARY<span class="token operator">></span>rs0:PRIMARY<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>通过status命令可以看到整个复制集群的信息，members 中显示只有一个节点</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:PRIMARY<span class="token operator">></span> rs.status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"set"</span> <span class="token keyword">:</span> <span class="token string">"rs0"</span>,    <span class="token string">"date"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:36:31.844Z"</span><span class="token punctuation">)</span>,    <span class="token string">"myState"</span> <span class="token keyword">:</span> 1,    <span class="token string">"term"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>,    <span class="token string">"syncingTo"</span> <span class="token keyword">:</span> <span class="token string">""</span>,    <span class="token string">"syncSourceHost"</span> <span class="token keyword">:</span> <span class="token string">""</span>,    <span class="token string">"syncSourceId"</span> <span class="token keyword">:</span> -1,    <span class="token string">"heartbeatIntervalMillis"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>2000<span class="token punctuation">)</span>,    <span class="token string">"optimes"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"lastCommittedOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>,        <span class="token string">"readConcernMajorityOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>,        <span class="token string">"appliedOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>,        <span class="token string">"durableOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token string">"lastStableCheckpointTimestamp"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372935, 1<span class="token punctuation">)</span>,    <span class="token string">"members"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token keyword">:</span> 0,            <span class="token string">"name"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28017"</span>,            <span class="token string">"health"</span> <span class="token keyword">:</span> 1,            <span class="token string">"state"</span> <span class="token keyword">:</span> 1,            <span class="token string">"stateStr"</span> <span class="token keyword">:</span> <span class="token string">"PRIMARY"</span>,            <span class="token string">"uptime"</span> <span class="token keyword">:</span> 748,            <span class="token string">"optime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,                <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>            <span class="token punctuation">}</span>,            <span class="token string">"optimeDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:36:25Z"</span><span class="token punctuation">)</span>,            <span class="token string">"syncingTo"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"syncSourceHost"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"syncSourceId"</span> <span class="token keyword">:</span> -1,            <span class="token string">"infoMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"electionTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372633, 2<span class="token punctuation">)</span>,            <span class="token string">"electionDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:30:33Z"</span><span class="token punctuation">)</span>,            <span class="token string">"configVersion"</span> <span class="token keyword">:</span> 1,            <span class="token string">"self"</span> <span class="token keyword">:</span> true,            <span class="token string">"lastHeartbeatMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span>,    <span class="token string">"ok"</span> <span class="token keyword">:</span> 1,    <span class="token string">"operationTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,    <span class="token string">"<span class="token variable">$clusterTime</span>"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"clusterTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372985, 1<span class="token punctuation">)</span>,        <span class="token string">"signature"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"hash"</span> <span class="token keyword">:</span> BinData<span class="token punctuation">(</span>0,<span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>,            <span class="token string">"keyId"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过以下命令，添加其余的两个节点，其中<code>qaf.local</code>是主机名，可以通过<code>hostname</code>获得</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:PRIMARY<span class="token operator">></span> rs.add<span class="token punctuation">(</span><span class="token string">"qaf.local:28018"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"ok"</span> <span class="token keyword">:</span> 1,    <span class="token string">"operationTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373330, 1<span class="token punctuation">)</span>,    <span class="token string">"<span class="token variable">$clusterTime</span>"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"clusterTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373330, 1<span class="token punctuation">)</span>,        <span class="token string">"signature"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"hash"</span> <span class="token keyword">:</span> BinData<span class="token punctuation">(</span>0,<span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>,            <span class="token string">"keyId"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>rs0:PRIMARY<span class="token operator">></span> rs.add<span class="token punctuation">(</span><span class="token string">"qaf.local:28019"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"ok"</span> <span class="token keyword">:</span> 1,    <span class="token string">"operationTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373335, 1<span class="token punctuation">)</span>,    <span class="token string">"<span class="token variable">$clusterTime</span>"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"clusterTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373335, 1<span class="token punctuation">)</span>,        <span class="token string">"signature"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"hash"</span> <span class="token keyword">:</span> BinData<span class="token punctuation">(</span>0,<span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>,            <span class="token string">"keyId"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在查看当前集群状态，就可以看到其余两个节点也加入进来了</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:PRIMARY<span class="token operator">></span> rs.status<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"set"</span> <span class="token keyword">:</span> <span class="token string">"rs0"</span>,    <span class="token string">"date"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:39.164Z"</span><span class="token punctuation">)</span>,    <span class="token string">"myState"</span> <span class="token keyword">:</span> 1,    <span class="token string">"term"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>,    <span class="token string">"syncingTo"</span> <span class="token keyword">:</span> <span class="token string">""</span>,    <span class="token string">"syncSourceHost"</span> <span class="token keyword">:</span> <span class="token string">""</span>,    <span class="token string">"syncSourceId"</span> <span class="token keyword">:</span> -1,    <span class="token string">"heartbeatIntervalMillis"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>2000<span class="token punctuation">)</span>,    <span class="token string">"optimes"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"lastCommittedOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>,        <span class="token string">"readConcernMajorityOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>,        <span class="token string">"appliedOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>,        <span class="token string">"durableOpTime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,            <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token string">"lastStableCheckpointTimestamp"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,    <span class="token string">"members"</span> <span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token keyword">:</span> 0,            <span class="token string">"name"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28017"</span>,            <span class="token string">"health"</span> <span class="token keyword">:</span> 1,            <span class="token string">"state"</span> <span class="token keyword">:</span> 1,            <span class="token string">"stateStr"</span> <span class="token keyword">:</span> <span class="token string">"PRIMARY"</span>,            <span class="token string">"uptime"</span> <span class="token keyword">:</span> 1176,            <span class="token string">"optime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,                <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>            <span class="token punctuation">}</span>,            <span class="token string">"optimeDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:36Z"</span><span class="token punctuation">)</span>,            <span class="token string">"syncingTo"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"syncSourceHost"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"syncSourceId"</span> <span class="token keyword">:</span> -1,            <span class="token string">"infoMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"electionTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584372633, 2<span class="token punctuation">)</span>,            <span class="token string">"electionDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:30:33Z"</span><span class="token punctuation">)</span>,            <span class="token string">"configVersion"</span> <span class="token keyword">:</span> 3,            <span class="token string">"self"</span> <span class="token keyword">:</span> true,            <span class="token string">"lastHeartbeatMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token keyword">:</span> 1,            <span class="token string">"name"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28018"</span>,            <span class="token string">"health"</span> <span class="token keyword">:</span> 1,            <span class="token string">"state"</span> <span class="token keyword">:</span> 2,            <span class="token string">"stateStr"</span> <span class="token keyword">:</span> <span class="token string">"SECONDARY"</span>,            <span class="token string">"uptime"</span> <span class="token keyword">:</span> 88,            <span class="token string">"optime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,                <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>            <span class="token punctuation">}</span>,            <span class="token string">"optimeDurable"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,                <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>            <span class="token punctuation">}</span>,            <span class="token string">"optimeDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:36Z"</span><span class="token punctuation">)</span>,            <span class="token string">"optimeDurableDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:36Z"</span><span class="token punctuation">)</span>,            <span class="token string">"lastHeartbeat"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:38.104Z"</span><span class="token punctuation">)</span>,            <span class="token string">"lastHeartbeatRecv"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:38.135Z"</span><span class="token punctuation">)</span>,            <span class="token string">"pingMs"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>,            <span class="token string">"lastHeartbeatMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"syncingTo"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28017"</span>,            <span class="token string">"syncSourceHost"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28017"</span>,            <span class="token string">"syncSourceId"</span> <span class="token keyword">:</span> 0,            <span class="token string">"infoMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"configVersion"</span> <span class="token keyword">:</span> 3        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>            <span class="token string">"_id"</span> <span class="token keyword">:</span> 2,            <span class="token string">"name"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28019"</span>,            <span class="token string">"health"</span> <span class="token keyword">:</span> 1,            <span class="token string">"state"</span> <span class="token keyword">:</span> 2,            <span class="token string">"stateStr"</span> <span class="token keyword">:</span> <span class="token string">"SECONDARY"</span>,            <span class="token string">"uptime"</span> <span class="token keyword">:</span> 83,            <span class="token string">"optime"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,                <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>            <span class="token punctuation">}</span>,            <span class="token string">"optimeDurable"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"ts"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,                <span class="token string">"t"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>1<span class="token punctuation">)</span>            <span class="token punctuation">}</span>,            <span class="token string">"optimeDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:36Z"</span><span class="token punctuation">)</span>,            <span class="token string">"optimeDurableDate"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:36Z"</span><span class="token punctuation">)</span>,            <span class="token string">"lastHeartbeat"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:38.104Z"</span><span class="token punctuation">)</span>,            <span class="token string">"lastHeartbeatRecv"</span> <span class="token keyword">:</span> ISODate<span class="token punctuation">(</span><span class="token string">"2020-03-16T15:43:38.882Z"</span><span class="token punctuation">)</span>,            <span class="token string">"pingMs"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>,            <span class="token string">"lastHeartbeatMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"syncingTo"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28018"</span>,            <span class="token string">"syncSourceHost"</span> <span class="token keyword">:</span> <span class="token string">"qaf.local:28018"</span>,            <span class="token string">"syncSourceId"</span> <span class="token keyword">:</span> 1,            <span class="token string">"infoMessage"</span> <span class="token keyword">:</span> <span class="token string">""</span>,            <span class="token string">"configVersion"</span> <span class="token keyword">:</span> 3        <span class="token punctuation">}</span>    <span class="token punctuation">]</span>,    <span class="token string">"ok"</span> <span class="token keyword">:</span> 1,    <span class="token string">"operationTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,    <span class="token string">"<span class="token variable">$clusterTime</span>"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"clusterTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373416, 1<span class="token punctuation">)</span>,        <span class="token string">"signature"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"hash"</span> <span class="token keyword">:</span> BinData<span class="token punctuation">(</span>0,<span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>,            <span class="token string">"keyId"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面通过在master节点上写数据，在从节点上读数据来验证下集群的功能</p><p>首先在master节点上写入一条数据</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:PRIMARY<span class="token operator">></span> use <span class="token function">test</span>switched to db <span class="token function">test</span>rs0:PRIMARY<span class="token operator">></span> db.user.insertOne<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"user"</span><span class="token keyword">:</span><span class="token string">"LiMi"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token string">"acknowledged"</span> <span class="token keyword">:</span> true,    <span class="token string">"insertedId"</span> <span class="token keyword">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"5e6f9f85fe71466240a3ee45"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后在从节点上读数据</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mongo --port 28019</span>rs0:SECONDARY<span class="token operator">></span> db.test.find<span class="token punctuation">(</span><span class="token punctuation">)</span>Error: error: <span class="token punctuation">{</span>    <span class="token string">"operationTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373686, 1<span class="token punctuation">)</span>,    <span class="token string">"ok"</span> <span class="token keyword">:</span> 0,    <span class="token string">"errmsg"</span> <span class="token keyword">:</span> <span class="token string">"not master and slaveOk=false"</span>,    <span class="token string">"code"</span> <span class="token keyword">:</span> 13435,    <span class="token string">"codeName"</span> <span class="token keyword">:</span> <span class="token string">"NotMasterNoSlaveOk"</span>,    <span class="token string">"<span class="token variable">$clusterTime</span>"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"clusterTime"</span> <span class="token keyword">:</span> Timestamp<span class="token punctuation">(</span>1584373686, 1<span class="token punctuation">)</span>,        <span class="token string">"signature"</span> <span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"hash"</span> <span class="token keyword">:</span> BinData<span class="token punctuation">(</span>0,<span class="token string">"AAAAAAAAAAAAAAAAAAAAAAAAAAA="</span><span class="token punctuation">)</span>,            <span class="token string">"keyId"</span> <span class="token keyword">:</span> NumberLong<span class="token punctuation">(</span>0<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>会发现报错了。这是因为从节点默认是不能读取数据的，我们设置从节点可以读取数据</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:SECONDARY<span class="token operator">></span> rs.slaveOk<span class="token punctuation">(</span><span class="token punctuation">)</span>rs0:SECONDARY<span class="token operator">></span> db.user.find<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token string">"_id"</span> <span class="token keyword">:</span> ObjectId<span class="token punctuation">(</span><span class="token string">"5e6fa04bfe71466240a3ee46"</span><span class="token punctuation">)</span>, <span class="token string">"user"</span> <span class="token keyword">:</span> <span class="token string">"LiMi"</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>从节点会从主节点产生的<code>oplog</code>中进行回放，把数据同步到从节点。所以也能从从节点中读取数据了</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><code>oplog</code>是一个capped collection，是有大小上限的，如果超过了上限，就会删除旧的数据，增加新的数据</p><blockquote><p>在MongoDB 4.0+中，oplog会超过设定的大小，避免删除未被从节点回放的oplog</p></blockquote><p><code>oplog</code>是幂等性的，既一条记录不管被重放多少次，数据库中的数据是不会变的</p><p>查看<code>oplog</code>的信息</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:PRIMARY<span class="token operator">></span> rs.printReplicationInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>configured oplog size:   192MBlog length start to end: 80450secs <span class="token punctuation">(</span>22.35hrs<span class="token punctuation">)</span>oplog first event time:  Mon Mar 16 2020 23:30:33 GMT+0800 <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>oplog last event time:   Tue Mar 17 2020 21:51:23 GMT+0800 <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>now:                     Tue Mar 17 2020 21:51:27 GMT+0800 <span class="token punctuation">(</span>CST<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>oplog</code>回放的情况</p><pre class="line-numbers language-bash"><code class="language-bash">rs0:PRIMARY<span class="token operator">></span> db.printSlaveReplicationInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>source: qaf.local:28018    syncedTo: Tue Mar 17 2020 21:52:33 GMT+0800 <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>    0 secs <span class="token punctuation">(</span>0 hrs<span class="token punctuation">)</span> behind the primarysource: qaf.local:28019    syncedTo: Tue Mar 17 2020 21:52:33 GMT+0800 <span class="token punctuation">(</span>CST<span class="token punctuation">)</span>    0 secs <span class="token punctuation">(</span>0 hrs<span class="token punctuation">)</span> behind the primary<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参考：<a href="https://time.geekbang.org/course/intro/100040001" target="_blank" rel="noopener">https://time.geekbang.org/course/intro/100040001</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rsync 学习</title>
      <link href="/2020/09/02/rsync/"/>
      <url>/2020/09/02/rsync/</url>
      
        <content type="html"><![CDATA[<h2 id="rsync-的一些常用用法"><a href="#rsync-的一些常用用法" class="headerlink" title="rsync 的一些常用用法"></a>rsync 的一些常用用法</h2><p>rsync是Linux里常用的一个用于文件同步的命令。</p><p>可以替代<code>mv</code>和<code>cp</code>命令，也可以和远端主机同步文件（rsync的全称是 remote sync）。最主要的特性就是每次只会传输文件变动的部分，而不是每次都全量同步。</p><h3 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h3><h4 id="a-参数"><a href="#a-参数" class="headerlink" title="-a 参数"></a>-a 参数</h4><p><code>-a</code>参数有两个功能：</p><ul><li>会遍历源文件，将包含子目录</li><li>会拷贝文件的元信息，比如文件大小，修改时间等</li></ul><p>rsync默认是通过文件大小和修改时间判断文件是否进行过修改</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -a <span class="token function">source</span> destination<span class="token function">rsync</span> -a source/ destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>上面这两个命令的不同之处是在于，第二条命令会把source下面的文件拷贝到destionation中，而不是将source目录拷贝到destination中</p><h4 id="n-参数"><a href="#n-参数" class="headerlink" title="-n 参数"></a>-n 参数</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -anv <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-n</code> 并不会真正的执行命令，而是模拟执行的结果</p><p><code>-v</code>会把模拟执行的结果输出到终端</p><h4 id="–delete-参数"><a href="#–delete-参数" class="headerlink" title="–delete 参数"></a>–delete 参数</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av --delete <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>默认情况下，rsync只确保将源目录中的所有内容拷贝到目标目录中，并不会要求两个目录的文件完全相同。</p><p><code>--delete</code>参数会确保两个目录中的内容相同，如果目标目录中有多余的文件则会删除</p><h4 id="–exclude-参数"><a href="#–exclude-参数" class="headerlink" title="–exclude 参数"></a>–exclude 参数</h4><p><code>--exclude</code>支持同步文件时排除某些文件</p><ol><li><p>不同步<code>txt</code>文件</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">rsync</span> -av --exclude<span class="token operator">=</span><span class="token string">"*.txt"</span> <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>rsync默认会同步<code>.</code>开头的文件，下面的命令可以排除以<code>.</code>开头的文件</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">rsync</span> -av --exclude<span class="token operator">=</span><span class="token string">".*"</span> <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>多个文件需要排除</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">rsync</span> -av --exclude<span class="token operator">=</span><span class="token string">".*"</span> --exclude<span class="token operator">=</span><span class="token string">"*.txt"</span> <span class="token function">source</span> destination <span class="token function">rsync</span> -av --exclude<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'.*'</span>, <span class="token string">'*.txt'</span><span class="token punctuation">}</span> <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果需要排除某个目录下的所有文件，而保留目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av --exclude<span class="token operator">=</span><span class="token string">"dir1/*"</span> <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="–include-参数"><a href="#–include-参数" class="headerlink" title="–include 参数"></a>–include 参数</h4><p><code>--include</code>指定必须要同步的文件</p><p>通常和<code>--exclude</code>参数同时使用</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av --include<span class="token operator">=</span><span class="token string">"*.txt"</span> --exclude<span class="token operator">=</span><span class="token string">"*"</span> <span class="token function">source</span> destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="–link-dest-参数"><a href="#–link-dest-参数" class="headerlink" title="–link-dest 参数"></a>–link-dest 参数</h4><p><code>--link-dest</code>用来指定同步文件时的基准目录</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av --delete --link-dest<span class="token operator">=</span><span class="token punctuation">..</span>/path source/ destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果基准目录相对路径，并且和source、destination目录是同一级的，需要在目录名前加上<code>../</code></p><p>source目录中的文件会和path中的文件进行比较，只会把更新了的文件拷贝到destination目录中，那些没有更新的文件则会和path中的文件生成硬链接</p><h4 id="–append-参数"><a href="#–append-参数" class="headerlink" title="–append 参数"></a>–append 参数</h4><p><code>--append</code>参数接着文件上次中断的地方继续传输</p><h4 id="–append-verify-参数"><a href="#–append-verify-参数" class="headerlink" title="–append-verify 参数"></a>–append-verify 参数</h4><p>在传输完成时会对文件进行一次校验，如果校验失败，则会重新传输</p><h4 id="–checksum-参数"><a href="#–checksum-参数" class="headerlink" title="–checksum 参数"></a>–checksum 参数</h4><p>默认情况下rsync在文件传输完成后只进行文件大小和修改时间的判断，使用该参数后将使用文件内容的校验和</p><h4 id="m-参数"><a href="#m-参数" class="headerlink" title="-m 参数"></a>-m 参数</h4><p>不同步空目录</p><h4 id="P-参数"><a href="#P-参数" class="headerlink" title="-P 参数"></a>-P 参数</h4><p>是<code>--partial</code>和<code>--progress</code>的结合</p><p>rsync在中途传输失败时，默认会删除已经传输完成的文件。<code>--partial</code>则不会删除文件，下次同步时会再次恢复中断的传输</p><h3 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h3><ol><li><h4 id="SSH协议"><a href="#SSH协议" class="headerlink" title="SSH协议"></a>SSH协议</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">rsync</span> -av <span class="token function">source</span> username@remote_host:destination<span class="token function">rsync</span> -av username@remote_host:source destination<span class="token function">rsync</span> -av -e <span class="token string">"ssh -o 2222"</span> username@remote_host:source destination<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果ssh需要有附加的命令需要用<code>-e</code>参数</p></li></ol><p>参考链接：</p><ul><li><a href="http://www.ruanyifeng.com/blog/2020/08/weekly-issue-122.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2020/08/weekly-issue-122.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python实现无重复数字</title>
      <link href="/2020/07/13/python-random/"/>
      <url>/2020/07/13/python-random/</url>
      
        <content type="html"><![CDATA[<h1 id="Python实现无重复数字"><a href="#Python实现无重复数字" class="headerlink" title="Python实现无重复数字"></a>Python实现无重复数字</h1><p>当我们想要取的一些不重复的数字时，通常我们会想到<code>random.sample</code>方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [5, 1, 0, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>但是这样只能保证每次运行这行代码时的数字是不重复的，如果要多次运行上面的代码就会有重复的数字出现。</p><p>最先想到的方法就是将每次取到数字都放在一个set内，每次产生新的随机数字时，先判断它是否在这个set内</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> functools<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">scale_time</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    functools<span class="token punctuation">.</span>wraps<span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{end_time - start_time}"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> wrapper@scale_time<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result_set <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>result_set<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">9999</span><span class="token punctuation">:</span>        _data <span class="token operator">=</span> random<span class="token punctuation">.</span>sample<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>        result_set <span class="token operator">=</span> result_set <span class="token operator">|</span> set<span class="token punctuation">(</span>_data<span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 6.2531819343566895</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面代码可以看到，这种方式效率是比较低的，越到后面，产生不重复随机数的概率就会越来越低，就需要重试更多的次数</p><p>有没有优化的方式呢？那就是下面要讲的，利用列表来取不重复的随机数，每次取出来的随机数都能保证和之前取出来的不重复</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> functools<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">scale_time</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    functools<span class="token punctuation">.</span>wraps<span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{end_time - start_time}"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> wrapper@scale_time<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result_set <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>result_set<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">9999</span><span class="token punctuation">:</span>        _data <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        result_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>data<span class="token punctuation">[</span>_data<span class="token punctuation">]</span><span class="token punctuation">)</span>        data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>_data<span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0.027987957000732422</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的代码会pop原来数组的值，如果要继续优化，可以不pop，而是修改元素的位置</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">import</span> functools<span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">scale_time</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">:</span>    functools<span class="token punctuation">.</span>wraps<span class="token punctuation">(</span>fn<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> fn<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>        end_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{end_time - start_time}"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> wrapper@scale_time<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    result_set <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> list<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    _index <span class="token operator">=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> len<span class="token punctuation">(</span>result_set<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">9999</span><span class="token punctuation">:</span>        _data <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _index<span class="token punctuation">)</span>        result_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>data<span class="token punctuation">[</span>_data<span class="token punctuation">]</span><span class="token punctuation">)</span>        _index <span class="token operator">-=</span> <span class="token number">1</span>        data<span class="token punctuation">[</span><span class="token operator">-</span>len<span class="token punctuation">(</span>result_set<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>_data<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>_data<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token operator">-</span>len<span class="token punctuation">(</span>result_set<span class="token punctuation">)</span><span class="token punctuation">]</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0.02704787254333496</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Python3 面向对象编程》笔记 - 第4章 异常捕获</title>
      <link href="/2020/07/02/python-object-4/"/>
      <url>/2020/07/02/python-object-4/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3-面向对象编程笔记"><a href="#Python3-面向对象编程笔记" class="headerlink" title="Python3 面向对象编程笔记"></a>Python3 面向对象编程笔记</h1><h2 id="第4章-异常捕获"><a href="#第4章-异常捕获" class="headerlink" title="第4章 异常捕获"></a>第4章 异常捕获</h2><p>在本章中将学习异常，特殊的错误对象只有在合理的时候才需要特别处理，将会学习：</p><ol><li>如何找到异常出现的原因</li><li>遇到异常时如何恢复</li><li>如何以不同的方式处理不同的异常</li><li>遇到异常时如何清理</li><li>创建新的异常类型</li><li>在控制流中使用异常语法</li></ol><h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p>本质上，异常只是一个对象，有很多不同的异常类，但是他们都继承子同一个异常类BaseException。一些常见的异常：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>ZeroDivisionError                         Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-1</span><span class="token operator">-</span><span class="token number">663c7a933a87</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> x <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">0</span>ZeroDivisionError<span class="token punctuation">:</span> division by zeroIn <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>IndexError                                Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-3</span><span class="token operator">-</span><span class="token number">7a094246b9ab</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>IndexError<span class="token punctuation">:</span> list index out of rangeIn <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError                                 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-4</span><span class="token operator">-</span>ffe4e6e220bf<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> lst <span class="token operator">+</span> <span class="token number">2</span>TypeError<span class="token punctuation">:</span> can only concatenate list <span class="token punctuation">(</span><span class="token operator">not</span> <span class="token string">"int"</span><span class="token punctuation">)</span> to listIn <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst<span class="token punctuation">.</span>add<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>AttributeError                            Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-5</span><span class="token operator">-</span><span class="token number">50e4efd52cad</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> lst<span class="token punctuation">.</span>addAttributeError<span class="token punctuation">:</span> <span class="token string">'list'</span> object has no attribute <span class="token string">'add'</span>In <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token string">'b'</span><span class="token punctuation">}</span>In <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">:</span> d<span class="token punctuation">[</span><span class="token string">'df'</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>KeyError                                  Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-7</span><span class="token operator">-</span><span class="token number">4b3d04097323</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> d<span class="token punctuation">[</span><span class="token string">'df'</span><span class="token punctuation">]</span>KeyError<span class="token punctuation">:</span> <span class="token string">'df'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python中大部分的错误类都继承自 Exception（它又继承自 BaseException ）</p><h3 id="抛出一个异常"><a href="#抛出一个异常" class="headerlink" title="抛出一个异常"></a>抛出一个异常</h3><p>当我们的程序比如遇到不合法的输入时，需要抛出异常可以像下面这样，利用 raise</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">class</span> <span class="token class-name">EvenOnly</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> integer<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>integer<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>             <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"Only integers can be added"</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> integer <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>             <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Only even numbers can be added"</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>integer<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> e <span class="token operator">=</span> EvenOnly<span class="token punctuation">(</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> e<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"a string"</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError                                 Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-4</span><span class="token operator">-</span><span class="token number">9cff98c34dae</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> e<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"a string"</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-2</span><span class="token operator">-</span><span class="token number">7af07cf6ebb7</span><span class="token operator">></span> <span class="token keyword">in</span> append<span class="token punctuation">(</span>self<span class="token punctuation">,</span> integer<span class="token punctuation">)</span>      <span class="token number">3</span>     <span class="token keyword">def</span> <span class="token function">append</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> integer<span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token number">4</span>         <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>integer<span class="token punctuation">,</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">5</span>             <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"Only integers can be added"</span><span class="token punctuation">)</span>      <span class="token number">6</span>         <span class="token keyword">if</span> integer <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>      <span class="token number">7</span>             <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Only even numbers can be added"</span><span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> Only integers can be addedIn <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> e<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>ValueError                                Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-5</span><span class="token operator">-</span>d9ea7f347873<span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> e<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-2</span><span class="token operator">-</span><span class="token number">7af07cf6ebb7</span><span class="token operator">></span> <span class="token keyword">in</span> append<span class="token punctuation">(</span>self<span class="token punctuation">,</span> integer<span class="token punctuation">)</span>      <span class="token number">5</span>             <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">"Only integers can be added"</span><span class="token punctuation">)</span>      <span class="token number">6</span>         <span class="token keyword">if</span> integer <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">7</span>             <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"Only even numbers can be added"</span><span class="token punctuation">)</span>      <span class="token number">8</span>         super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>integer<span class="token punctuation">)</span>      <span class="token number">9</span>ValueError<span class="token punctuation">:</span> Only even numbers can be added<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常的作用"><a href="#异常的作用" class="headerlink" title="异常的作用"></a>异常的作用</h3><p>当抛出一个异常时，该异常后面所有的代码都将不会执行</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">no_return</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I am about to raise an exception"</span><span class="token punctuation">)</span>    <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"This is always raised"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"This line will never execute"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">call_exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"call_exception starts here..."</span><span class="token punctuation">)</span>    no_return<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"an exception was raised..."</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    call_exception<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># call_exception starts here...</span><span class="token comment" spellcheck="true"># I am about to raise an exception</span><span class="token comment" spellcheck="true"># Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 15, in &lt; module ></span><span class="token comment" spellcheck="true">#   call_exception()</span><span class="token comment" spellcheck="true">#   File "test.py", line 10, in call_exception</span><span class="token comment" spellcheck="true">#   no_return()</span><span class="token comment" spellcheck="true">#   File "test.py", line 4, in no_return</span><span class="token comment" spellcheck="true">#   raise Exception("This is always raised")</span><span class="token comment" spellcheck="true"># Exception: This is always raised</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h3><p>当我们需要处理一个异常时，可以像下面这样：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">funy_division2</span><span class="token punctuation">(</span>anumber<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> anumber <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"13 is an unlucky number"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">100</span> <span class="token operator">/</span> anumber    <span class="token keyword">except</span> <span class="token punctuation">(</span>ZeroDivisionError<span class="token punctuation">,</span> TypeError<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Enter a number other than zero"</span><span class="token keyword">for</span> val <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print end设定尾部的符号</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Testiong {val}"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>funy_division2<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Testiong 0 Enter a number other than zero</span><span class="token comment" spellcheck="true"># Testiong hello Enter a number other than zero</span><span class="token comment" spellcheck="true"># Testiong 50.0 2.0</span><span class="token comment" spellcheck="true"># Testiong 13 Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 13, in &lt; module ></span><span class="token comment" spellcheck="true">#   print(funy_division2(val))</span><span class="token comment" spellcheck="true">#   File "test.py", line 4, in funy_division2</span><span class="token comment" spellcheck="true">#   raise ValueError("13 is an unlucky number")</span><span class="token comment" spellcheck="true"># ValueError: 13 is an unlucky number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们知道了如何处理异常，但是想要对不同的异常作出不同的反应，或者想要针对某种异常执行某些操作之后传递给上层函数，就像从来没有处理过一样，解决办法分别就是利用<code>except</code>和<code>raise</code></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">funy_division2</span><span class="token punctuation">(</span>anumber<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> anumber <span class="token operator">==</span> <span class="token number">13</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"13 is an unlucky number"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">100</span> <span class="token operator">/</span> anumber    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Enter a number other than zero"</span>    <span class="token keyword">except</span> TypeError<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Enter a numberical value"</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No, No, not 13!"</span><span class="token punctuation">)</span>        <span class="token keyword">raise</span><span class="token keyword">for</span> val <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token number">50.0</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print end设定尾部的符号</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"Testiong {val}"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>funy_division2<span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Testiong 0 Enter a number other than zero</span><span class="token comment" spellcheck="true"># Testiong hello Enter a numberical value</span><span class="token comment" spellcheck="true"># Testiong 50.0 2.0</span><span class="token comment" spellcheck="true"># Testiong 13 No, No, not 13!</span><span class="token comment" spellcheck="true"># Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 18, in &lt; module ></span><span class="token comment" spellcheck="true">#   print(funy_division2(val))</span><span class="token comment" spellcheck="true">#   File "test.py", line 4, in funy_division2</span><span class="token comment" spellcheck="true">#   raise ValueError("13 is an unlucky number")</span><span class="token comment" spellcheck="true"># ValueError: 13 is an unlucky number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果我们在捕获TypeError之前，捕获了Exception，那么就只有捕获Exception的代码执行。</p><p>利用上述的特性，我们可以在处理完一个特殊的异常后，最后统一用Exception捕获其余的异常。</p></blockquote><p>通常和捕获异常使用的还有<code>as</code>，<code>else</code>，<code>finally</code></p><p><code>finally</code>下的代码无论在什么条件下都会执行，如果我们需要在代码执行完成后执行特定的任务将非常有用，一些常见的例子：</p><ol><li>清楚打开的数据库连接</li><li>关闭打开的文件</li><li>向网络发送一次关闭握手</li></ol><blockquote><p><code>finally</code>语句对于我们在try中执行return语句也非常重要，finally中的代码任然会在返回值之前执行</p></blockquote><p>比如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token number">10</span> <span class="token operator">/</span> <span class="token number">0</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'10/0'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'finally exec'</span><span class="token punctuation">)</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 0</span><span class="token comment" spellcheck="true"># finally exec</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常的层级"><a href="#异常的层级" class="headerlink" title="异常的层级"></a>异常的层级</h3><p>大部分的异常类都继承自Exception，但是除了下面这两个异常类：</p><ol><li>SystemExit，在程序自然退出时抛出，通常是在代码中调用了sys.exit函数，设计这个异常的目的是，在程序最终退出之前完成清理工作</li><li>KeyboardInterrupt，常见于命令行程序，通常是ctrl + c</li></ol><p>异常之间的层级关系：</p><p><img src="./%E7%AC%AC4%E7%AB%A0-%E5%BC%82%E5%B8%B8%E5%B1%82%E7%BA%A7.png" alt="第4章-异常层级"></p><p>当我们用except:从句而不添加任何类型的异常时，将会捕获所有BaseException的子类，也就是会捕获所有异常</p><h3 id="定义我们的异常"><a href="#定义我们的异常" class="headerlink" title="定义我们的异常"></a>定义我们的异常</h3><p>异常类的名字通常用于说明发生了什么错误，而且可以先初始化函数中传入任何参数来提供额外的信息</p><p>通常我们自定义的异常类继承Exception，而不是BaseException，因为BaseException无法被except Exception从句捕获</p><p><code>Exception.__init__</code>方法设计成接受任意参数并将它们作为一个元组保存在一个名为args的属性当中，这使得我们可以更容易的定义新的异常，而不需要重写<code>__init__</code>方法</p><p>比如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">InvalidWithdrawal</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> balance<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>f<span class="token string">"account doesn't have {amount}"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> balance        self<span class="token punctuation">.</span>amount <span class="token operator">=</span> amount    <span class="token keyword">def</span> <span class="token function">overage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>amount <span class="token operator">-</span> self<span class="token punctuation">.</span>balance<span class="token keyword">print</span><span class="token punctuation">(</span>InvalidWithdrawal<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ("account doesn't have 20",)</span><span class="token keyword">raise</span> InvalidWithdrawal<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 13, in &lt; module ></span><span class="token comment" spellcheck="true">#   raise InvalidWithdrawal(25, 20)</span><span class="token comment" spellcheck="true"># __main__.InvalidWithdrawal: account doesn't have 20</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当我们需要处理异常时可以这样：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">InvalidWithdrawal</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> balance<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>f<span class="token string">"account doesn't have {amount}"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>balance <span class="token operator">=</span> balance        self<span class="token punctuation">.</span>amount <span class="token operator">=</span> amount    <span class="token keyword">def</span> <span class="token function">overage</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>amount <span class="token operator">-</span> self<span class="token punctuation">.</span>balance<span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">raise</span> InvalidWithdrawal<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token keyword">except</span> InvalidWithdrawal <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"catch err {e.overage()}"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以像对待其他对象一样对待异常类，可以为他添加属性和方法</p><p>使用自定义异常的真正优势在于创建供他人使用的框架、库或者API上</p><p>Python程序员倾向于追随“请求谅解，而不是许可”的原则，也就是说，他们先执行代码，然后解决错误。认为没有必要去花费cpu资源去检查一些很少才会出现的情况。比如下面的两段代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">divide_with_exception</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        number <span class="token operator">/</span> divisor    <span class="token keyword">except</span> ZeroDivisionError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can't divide by zero"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">divide_with_if</span><span class="token punctuation">(</span>number<span class="token punctuation">,</span> divisor<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> divisor <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You can't divide by zero"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        number <span class="token operator">/</span> divisor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两段代码都是可以执行的，但是Python程序员应该更倾向于写第一种方式的代码</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>password <span class="token operator">=</span> self<span class="token punctuation">.</span>_encrypt_pw<span class="token punctuation">(</span>password<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>is_logged_in <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">def</span> <span class="token function">_encrypt_pw</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        hash_string <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>username <span class="token operator">+</span> password<span class="token punctuation">)</span>        hash_string <span class="token operator">=</span> hash_string<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>hash_string<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check_password</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        encrypted <span class="token operator">=</span> self<span class="token punctuation">.</span>_encrypt_pw<span class="token punctuation">(</span>password<span class="token punctuation">)</span>        <span class="token keyword">return</span> encrypted <span class="token operator">==</span> self<span class="token punctuation">.</span>password<span class="token keyword">class</span> <span class="token class-name">AuthException</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> user<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>username<span class="token punctuation">,</span> user<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> username        self<span class="token punctuation">.</span>user <span class="token operator">=</span> user<span class="token keyword">class</span> <span class="token class-name">UsernameAlreadyExists</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">PasswordTooShort</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Authenticator</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>users <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">add_user</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> username <span class="token keyword">in</span> self<span class="token punctuation">.</span>users<span class="token punctuation">:</span>            <span class="token keyword">raise</span> UsernameAlreadyExists<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> PasswordTooShort<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>users<span class="token punctuation">[</span>username<span class="token punctuation">]</span> <span class="token operator">=</span> User<span class="token punctuation">(</span>username<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            user <span class="token operator">=</span> self<span class="token punctuation">.</span>users<span class="token punctuation">[</span>username<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> InvalidUsername<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> user<span class="token punctuation">.</span>check_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> InvalidPassword<span class="token punctuation">(</span>username<span class="token punctuation">,</span> user<span class="token punctuation">)</span>        user<span class="token punctuation">.</span>is_logged_in <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">def</span> <span class="token function">is_logged_in</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> username <span class="token keyword">in</span> self<span class="token punctuation">.</span>users<span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>users<span class="token punctuation">[</span>username<span class="token punctuation">]</span><span class="token punctuation">.</span>is_logged_in        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">class</span> <span class="token class-name">InvalidUsername</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">InvalidPassword</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Authorizor</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> authenticator<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>authenticator <span class="token operator">=</span> authenticator        self<span class="token punctuation">.</span>permissions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">add_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> perm_name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            perm_set <span class="token operator">=</span> self<span class="token punctuation">.</span>permissions<span class="token punctuation">[</span>perm_name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>permissions<span class="token punctuation">[</span>perm_name<span class="token punctuation">]</span> <span class="token operator">=</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> PermissionError<span class="token punctuation">(</span><span class="token string">"Permission Exists"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">permit_user</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> perm_name<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            perm_set <span class="token operator">=</span> self<span class="token punctuation">.</span>permissions<span class="token punctuation">[</span>perm_name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> PermissionError<span class="token punctuation">(</span><span class="token string">"Permission does not exist"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> username <span class="token operator">not</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>authenticator<span class="token punctuation">.</span>users<span class="token punctuation">:</span>                <span class="token keyword">raise</span> InvalidUsername<span class="token punctuation">(</span>username<span class="token punctuation">)</span>            perm_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">check_permission</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> perm_name<span class="token punctuation">,</span> username<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>authenticator<span class="token punctuation">.</span>is_logged_in<span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> NotLoggedInError<span class="token punctuation">(</span>username<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            perm_set <span class="token operator">=</span> self<span class="token punctuation">.</span>permissions<span class="token punctuation">[</span>perm_name<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">raise</span> PermissionError<span class="token punctuation">(</span><span class="token string">"Permission does not exist"</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> username <span class="token operator">not</span> <span class="token keyword">in</span> perm_set<span class="token punctuation">:</span>                <span class="token keyword">raise</span> NotPermittedError<span class="token punctuation">(</span>username<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">PermissionError</span><span class="token punctuation">(</span>Exception<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">NotLoggedInError</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">NotPermittedError</span><span class="token punctuation">(</span>AuthException<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>authenticator <span class="token operator">=</span> Authenticator<span class="token punctuation">(</span><span class="token punctuation">)</span>authorizor <span class="token operator">=</span> Authorizor<span class="token punctuation">(</span>authenticator<span class="token punctuation">)</span>authenticator<span class="token punctuation">.</span>add_user<span class="token punctuation">(</span><span class="token string">"joe"</span><span class="token punctuation">,</span> <span class="token string">"joepassword"</span><span class="token punctuation">)</span>authorizor<span class="token punctuation">.</span>add_permission<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">)</span>authorizor<span class="token punctuation">.</span>check_permission<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 129, in &lt;module></span><span class="token comment" spellcheck="true">#     authorizor.check_permission("paint", "joe")</span><span class="token comment" spellcheck="true">#   File "test.py", line 101, in check_permission</span><span class="token comment" spellcheck="true">#     raise NotLoggedInError(username)</span><span class="token comment" spellcheck="true"># __main__.NotLoggedInError: ('joe', None)</span><span class="token keyword">print</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span>is_logged_in<span class="token punctuation">(</span><span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span>authenticator<span class="token punctuation">.</span>login<span class="token punctuation">(</span><span class="token string">"joe"</span><span class="token punctuation">,</span> <span class="token string">"joepassword"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>authorizor<span class="token punctuation">.</span>check_permission<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 145, in &lt;module></span><span class="token comment" spellcheck="true">#     authorizor.check_permission("paint", "joe")</span><span class="token comment" spellcheck="true">#   File "test.py", line 108, in check_permission</span><span class="token comment" spellcheck="true">#     raise NotPermittedError(username)</span><span class="token comment" spellcheck="true"># __main__.NotPermittedError: ('joe', None)</span>authorizor<span class="token punctuation">.</span>check_permission<span class="token punctuation">(</span><span class="token string">"mix"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 103, in check_permission</span><span class="token comment" spellcheck="true">#     perm_set = self.permissions[perm_name]</span><span class="token comment" spellcheck="true"># KeyError: 'mix'</span><span class="token comment" spellcheck="true"># During handling of the above exception, another exception occurred:</span><span class="token comment" spellcheck="true"># Traceback (most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 153, in &lt;module></span><span class="token comment" spellcheck="true">#     authorizor.check_permission("mix", "joe")</span><span class="token comment" spellcheck="true">#   File "test.py", line 105, in check_permission</span><span class="token comment" spellcheck="true">#     raise PermissionError("Permission does not exist")</span><span class="token comment" spellcheck="true"># __main__.PermissionError: Permission does not exist</span>authorizor<span class="token punctuation">.</span>permit_user<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>authorizor<span class="token punctuation">.</span>check_permission<span class="token punctuation">(</span><span class="token string">"paint"</span><span class="token punctuation">,</span> <span class="token string">"joe"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Git tags Explained》翻译</title>
      <link href="/2020/07/01/fanyi-git-tag/"/>
      <url>/2020/07/01/fanyi-git-tag/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mohitkhare.me/blog/git-tags-explained/" target="_blank" rel="noopener">原文链接</a></p><h2 id="Git-tags-简明教程"><a href="#Git-tags-简明教程" class="headerlink" title="Git tags 简明教程"></a>Git tags 简明教程</h2><p><img src="./git-tags.png" alt="git-tags"></p><p><code>Git</code>对于开发者来说是个非常必要的工具，它能非常方便的维护多人共享的代码库</p><p><code>Git-scm</code>简单的定义：</p><blockquote><p><code>Git</code>是一个开源的分布式版本控制系统，设计用来快速有效的管理各种小项目和大项目</p></blockquote><p>如果你还不知道<code>Git</code>，我推荐你首先学习一些基础知识</p><ul><li><a href="https://try.github.io/" target="_blank" rel="noopener">https://try.github.io/</a></li><li><a href="https://www.vogella.com/tutorials/Git/article.html" target="_blank" rel="noopener">https://www.vogella.com/tutorials/Git/article.html</a></li></ul><p>在这篇文章中，我们将学习到什么是<code>git tag</code>，为什么要使用它和什么时候以及怎么使用它。这因该足够让你在你的项目使用它了</p><p>让我们开始吧</p><h3 id="什么是git-tag"><a href="#什么是git-tag" class="headerlink" title="什么是git tag"></a>什么是<code>git tag</code></h3><p><code>git tag</code>实际上是指向了Git history 中的一个commit，它可以标记git history中某个的commit，以后可以方便的找到它</p><p>你可以将 tag 看做是一个不变的分支</p><p>Tag 代表某个特定分支在一定时刻的版本。所以，tag 本质上是开发者在程序中做的一个标记</p><h3 id="为什么和什么时候使用git-tag"><a href="#为什么和什么时候使用git-tag" class="headerlink" title="为什么和什么时候使用git tag"></a>为什么和什么时候使用<code>git tag</code></h3><p>你肯定看到过<code>v1.0.0</code>这样的标记。它表示一个产品的版本号。通常，当产品有重大的更新并且需要推送给用户时，就会创建一个tag。</p><p>tag 通常用户标记一个里程碑，例如可以发布给用户或者企业的新功能或一些bug修复</p><p>你肯定不希望每次修复Bug都要推送给客户，Tag 可以确保用户使用的是某个特定时刻的版本，而不需要每次代码的新提交都推送给客户。</p><h3 id="怎么使用git-tag"><a href="#怎么使用git-tag" class="headerlink" title="怎么使用git tag"></a>怎么使用<code>git tag</code></h3><p>现在你已经知道了tag的应用场景，下面就开始看看怎么使用它</p><h4 id="创建tag"><a href="#创建tag" class="headerlink" title="创建tag"></a>创建<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>// Eg. <span class="token function">git</span> tag v1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这条命令会将最新的commit打上tag，<code>tag_name</code>就是你要起得tag 名字，通常是类似v1.0.1这种。当然你也可以命名任何你喜欢的名字</p><p>通常 tag name 是：</p><pre class="line-numbers language-bash"><code class="language-bash">v<span class="token operator">&lt;</span>major<span class="token operator">></span>.<span class="token operator">&lt;</span>minor<span class="token operator">></span>.<span class="token operator">&lt;</span>patch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>major:重大修改</li><li>minor: 版本与先前版本兼容</li><li>patch: bug 修复</li></ul><p>创建了tag之后，可以push到远端代码库</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以为tag添加描述信息</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag -a <span class="token operator">&lt;</span>tag_name<span class="token operator">></span> -m <span class="token string">"message"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>-a</code>是什么意思呢？下面来看看</p><h4 id="tag类型"><a href="#tag类型" class="headerlink" title="tag类型"></a><code>tag</code>类型</h4><p>一共有两种<code>tag</code>类型：</p><ul><li>附注标签（Annonated）</li><li>轻量标签（Lightweight）</li></ul><h5 id="附注标签"><a href="#附注标签" class="headerlink" title="附注标签"></a>附注标签</h5><p>附注标签存储一个额外的信息，比如作者、发行说明、tag 信息存储为Git仓库中完整的数据，这些数据对于一个公开的项目是非常重要的</p><p><code>-a</code>表示该tag是附注标签</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag -a v1.0.1 -m <span class="token string">"First release"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="轻量标签"><a href="#轻量标签" class="headerlink" title="轻量标签"></a>轻量标签</h5><p>轻量标签时最简单的打tag的方式，它只存储tag name和关联的commit的hash值，不包含额外的信息，就类似于一个书签</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag v2.1-lw<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>lw</code>表示轻量级标签，在tag name中加<code>lw</code>是为了更好的可读性</p><h4 id="为一个特殊的commit打tag"><a href="#为一个特殊的commit打tag" class="headerlink" title="为一个特殊的commit打tag"></a>为一个特殊的commit打tag</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag <span class="token operator">&lt;</span>tag_name<span class="token operator">></span> <span class="token operator">&lt;</span>commit_sha<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的命令可以让你为一些老的commit打tag</p><h4 id="查看所有tag"><a href="#查看所有tag" class="headerlink" title="查看所有tag"></a>查看所有<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条命令将会展示所有存在的tag</p><p>输出可能是这样：</p><pre class="line-numbers language-bash"><code class="language-bash">1.0.01.0.11.0.21.0.32.0.02.1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可以使用<code>-l</code>或者<code>--list</code>选项利用正则表达式进行过滤</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag -l <span class="token string">"1.0*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash"><code class="language-bash">1.0.01.0.11.0.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="查看tag信息"><a href="#查看tag信息" class="headerlink" title="查看tag信息"></a>查看<code>tag</code>信息</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> show <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>// Eg. <span class="token function">git</span> show v1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将会展示作者、tag 信息、commit信息等其他信息</p><h4 id="删除tag"><a href="#删除tag" class="headerlink" title="删除tag"></a>删除<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> tag -d <span class="token operator">&lt;</span>tag_name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="推送tag"><a href="#推送tag" class="headerlink" title="推送tag"></a>推送<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push origin <span class="token operator">&lt;</span>branch<span class="token operator">></span> --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将会把本地<code>tag</code>推送到远程仓库</p><h4 id="拉取tag"><a href="#拉取tag" class="headerlink" title="拉取tag"></a>拉取<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> fetch --tags<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将会把远程仓库<code>tag</code>拉取到本地</p><h4 id="切换tag"><a href="#切换tag" class="headerlink" title="切换tag"></a>切换<code>tag</code></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> checkout <span class="token operator">&lt;</span>tag_name<span class="token operator">></span>// Eg. <span class="token function">git</span> checkout v1.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>你可以用这条命名，将代码回退到打某个<code>tag</code>的时候</p><p>你现在已经掌握了<code>Git tag</code>，开始在你的项目中应用起来吧😁</p><p>更多学习资源：</p><ul><li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">Excellent book to learn git</a></li><li><a href="https://softwareengineering.stackexchange.com/questions/165725/git-branching-and-tagging-best-practices" target="_blank" rel="noopener">Best git tag practices</a></li><li><a href="https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-tag" target="_blank" rel="noopener">On tagging by atlassian</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 文章翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Python3 面向对象编程》笔记 - 第3章 对象相似时</title>
      <link href="/2020/06/29/python-object-3/"/>
      <url>/2020/06/29/python-object-3/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3-面向对象编程笔记"><a href="#Python3-面向对象编程笔记" class="headerlink" title="Python3 面向对象编程笔记"></a>Python3 面向对象编程笔记</h1><h2 id="第3章-对象相似时"><a href="#第3章-对象相似时" class="headerlink" title="第3章 对象相似时"></a>第3章 对象相似时</h2><p>在编程的世界中，重复的代码被认为是邪恶的。这一章主要学习继承。既将共有的逻辑抽象到超类并在子类中控制具体的细节。这一章主要学习：</p><ol><li>基本的基础</li><li>从内置类型基础</li><li>多重基础</li><li>多态与鸭子类型</li></ol><h3 id="基本的基础"><a href="#基本的基础" class="headerlink" title="基本的基础"></a>基本的基础</h3><p>严格来说，在Python中，我们都是用到了基础。所有的Python类都可以看做是继承了<code>object</code>类的子类</p><p>我们声明一个类时可以显示的声明基础的类是什么，如果隐藏了父类，那么默认就是继承的<code>object</code>类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MyTest</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">MyTest2</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两种其实都是一样的。</p><p>在实践中使用继承关系，最简单的就是为已经存在的类添加功能，先写一个实例</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span>test1 <span class="token operator">=</span> Contact<span class="token punctuation">(</span><span class="token string">"name1"</span><span class="token punctuation">,</span> <span class="token string">"name@qq.com"</span><span class="token punctuation">)</span>test2 <span class="token operator">=</span> Contact<span class="token punctuation">(</span><span class="token string">"name2"</span><span class="token punctuation">,</span> <span class="token string">"name2@qq.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>test2<span class="token punctuation">.</span>all_contacts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [ &lt; __main__.Contact object at 0x103b3afd0 > , &lt; __main__.Contact object at 0x103b42048 > ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的代码中有个概念<strong>类变量</strong>，代码中的<code>all_contacts</code>就是类变量，他可以被该类的所有实例共享。在子类中可以通过<code>self.all_contacts</code>获取该类变量，如果在这一对象中找不到该变量名，将会从类中找到。如果你用了<code>self.all_contacts</code>设定了这一变量。实际上只是设定了该对象的这以变量，并不会影响类变量，还是可以通过<code>Contacts.all_contacts</code>访问到</p><p>上面的例子是一个联系人的类，其中有名字和邮箱。我们需要从这些联系人中下订单，需要新加一个类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Supplier</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里会自动调用父类的__init__方法</span>    <span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>            f<span class="token string">"If this were a real system we would send {order} to {self.name}"</span><span class="token punctuation">)</span>c <span class="token operator">=</span> Contact<span class="token punctuation">(</span><span class="token string">"Some Body"</span><span class="token punctuation">,</span> <span class="token string">"somebody@example.net"</span><span class="token punctuation">)</span>s <span class="token operator">=</span> Supplier<span class="token punctuation">(</span><span class="token string">"sup Plier"</span><span class="token punctuation">,</span> <span class="token string">"supplier@example.net"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>all_contacts<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [&lt;__main__.Contact object at 0x1073f9f60>, &lt;__main__.Supplier object at 0x1073f9fd0>]</span><span class="token comment" spellcheck="true"># c.order("I need pliers") 会报错</span>s<span class="token punctuation">.</span>order<span class="token punctuation">(</span><span class="token string">"I need pliers"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># If this were a real system we would send I need pliers to sup Plier</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里<code>Supplier</code>能够做<code>Contact</code>能做的所有事（加入<code>all_contacts</code>），而且还有自己的方法。</p><h3 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h3><p>继承关系中有一种有趣的应用就是为内置类型添加新的功能，比如前面的例子中保存了联系人，如果想查找联系人就可以添加一个新的类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ContactList</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        matching_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> contact <span class="token keyword">in</span> self<span class="token punctuation">:</span>            <span class="token keyword">if</span> name <span class="token keyword">in</span> contact<span class="token punctuation">.</span>name<span class="token punctuation">:</span>                matching_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>contact<span class="token punctuation">)</span>        <span class="token keyword">return</span> matching_contacts<span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> ContactList<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Supplier</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 这里会自动调用父类的__init__方法</span>    <span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> order<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>            f<span class="token string">"If this were a real system we would send {order} to {self.name}"</span><span class="token punctuation">)</span>c <span class="token operator">=</span> Contact<span class="token punctuation">(</span><span class="token string">"Some Body"</span><span class="token punctuation">,</span> <span class="token string">"somebody@example.net"</span><span class="token punctuation">)</span>s <span class="token operator">=</span> Supplier<span class="token punctuation">(</span><span class="token string">"sup Plier"</span><span class="token punctuation">,</span> <span class="token string">"supplier@example.net"</span><span class="token punctuation">)</span>s2 <span class="token operator">=</span> Supplier<span class="token punctuation">(</span><span class="token string">"sup Body"</span><span class="token punctuation">,</span> <span class="token string">"supplier2@example.net"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>contact<span class="token punctuation">.</span>name <span class="token keyword">for</span> contact <span class="token keyword">in</span> Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">"Body"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ['Some Body', 'sup Body']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大多数的内置对象都可以通过这种方式进行扩展。通常会扩展的内置类型有：<code>object</code>、<code>list</code>、<code>set</code>、<code>dict</code>、<code>file</code>、<code>str</code></p><p>比如扩展<code>dict</code>类型</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">TestDict</span><span class="token punctuation">(</span>dict<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longest_key</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        longest <span class="token operator">=</span> None        <span class="token keyword">for</span> key <span class="token keyword">in</span> self<span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token operator">not</span> longest <span class="token operator">or</span> len<span class="token punctuation">(</span>longest<span class="token punctuation">)</span> <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>                longest <span class="token operator">=</span> key        <span class="token keyword">return</span> longestlongest_keys <span class="token operator">=</span> TestDict<span class="token punctuation">(</span><span class="token punctuation">)</span>longest_keys<span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>longest_keys<span class="token punctuation">[</span><span class="token string">"hello world"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>longest_keys<span class="token punctuation">[</span><span class="token string">"xx"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>longest_keys<span class="token punctuation">.</span>longest_key<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># hello world</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="重写和super"><a href="#重写和super" class="headerlink" title="重写和super"></a>重写和super</h3><p>继承关系很适合向已经存在的类中添加新的行为，如果需要修改某些行为，就要重写父类的某些方法。当一个子类重写了父类的一个方法，在调用该方法时会调用子类的方法。而不是父类的方法</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的例子中，我们重写了<code>__init__</code>方法。但是会有重复的代码，而且我们还必须手动加入<code>Contact.all_contacts</code>中。</p><blockquote><p>任何方法都可以被重写</p></blockquote><p>我们真正需要做的是执行Contact类上的<code>__init__</code>方法。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> phone<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们调用了<code>super()</code>函数获取父类对象的实例，然后调用他的<code>__init__</code>方法</p><blockquote><p>可以在任何方法内调用<code>super()</code>获取父类对象实例</p></blockquote><h3 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h3><p>多重继承：继承自多个父类的子类可以获取所有父类的功能。</p><p>多重继承最简单的形式被称为混入（mixin），关于混入可以参考<a href="http://30daydo.com/article/480" target="_blank" rel="noopener">http://30daydo.com/article/480</a></p><p>其中利用混入实现多重继承比较重要的就是：</p><ol><li>首先它表示一个功能，而不是一个对象或者物品</li><li>必须职责单一，如果有多个功能，就要写多个minin类</li><li>不依赖于子类的实现</li><li>即使子类没有继承该类，也可以正常运行。只不过没有该方法</li></ol><p>比如在联系人当中，我们要给某个人发邮件，发邮件这个功能可以利用混入的方式实现多重继承</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MailSender</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">send_mail</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"send email to {self.email}"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">EmailableContact</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> MailSender<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>e <span class="token operator">=</span> EmailableContact<span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"test@example.com"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>all_contacts<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># [&lt;__main__.EmailableContact object at 0x109cdde48>]</span>e<span class="token punctuation">.</span>send_mail<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># send email to test@example.com</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多重继承在混合不同类的方法时不会有问题，但是当调用父类的方法时就会变得很混乱</p><p>为了讨论更复杂的情况，我们在<code>Friend</code>类中加入家庭住址。应该更好的方法是利用组合的方式，创建一个<code>Address</code>类，在<code>Friend</code>中的地址指向<code>Address</code>类的实例。但是在这里采用继承的方式。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AddressHolder</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>street <span class="token operator">=</span> street        self<span class="token punctuation">.</span>city <span class="token operator">=</span> city        self<span class="token punctuation">.</span>state <span class="token operator">=</span> state        self<span class="token punctuation">.</span>code <span class="token operator">=</span> code<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="钻石型继承问题"><a href="#钻石型继承问题" class="headerlink" title="钻石型继承问题"></a>钻石型继承问题</h3><p>首先可以用多重继承的方式为已有的<code>Friend</code>类添加父类，但是现在有了两个父类，需要初始化两个父类。先从一个简单的方法开始</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 类变量</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email        Contact<span class="token punctuation">.</span>all_contacts<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">AddressHolder</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>street <span class="token operator">=</span> street        self<span class="token punctuation">.</span>city <span class="token operator">=</span> city        self<span class="token punctuation">.</span>state <span class="token operator">=</span> state        self<span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token keyword">class</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> AddressHolder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> email<span class="token punctuation">,</span> phone<span class="token punctuation">,</span> street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>        Contact<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>name<span class="token punctuation">,</span> email<span class="token punctuation">)</span>        AddressHolder<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>street<span class="token punctuation">,</span> city<span class="token punctuation">,</span> state<span class="token punctuation">,</span> code<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的例子是可以正常运行的，但是会有两个问题</p><ol><li>如果忘记了初始化父类，就会出现问题</li><li>可能会导致超类被多次调用</li></ol><p>下面是整个初始化的流程：</p><img src="./钻石继承问题1.png"><p>从图中可以看出分别在初始化<code>Contact</code>和<code>AddressHolder</code>时都初始化了<code>object</code>，既<code>object</code>被初始化了两次。</p><p>为了更加清楚的阐述这个问题，让我们看另外一个虚构的例子。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token punctuation">:</span>    num_base_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Base Class"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_base_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">LeftSubclass</span><span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_left_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        BaseClass<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Left Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_left_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">RightSubclass</span><span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_right_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        BaseClass<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Right Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_right_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">Subclass</span><span class="token punctuation">(</span>LeftSubclass<span class="token punctuation">,</span> RightSubclass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_sub_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        LeftSubclass<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        RightSubclass<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_sub_call <span class="token operator">+=</span> <span class="token number">1</span>s <span class="token operator">=</span> Subclass<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Calling method on Base Class</span><span class="token comment" spellcheck="true"># Calling method on Left Subclass</span><span class="token comment" spellcheck="true"># Calling method on Base Class</span><span class="token comment" spellcheck="true"># Calling method on Right Subclass</span><span class="token comment" spellcheck="true"># Calling method on Subclass</span><span class="token keyword">print</span><span class="token punctuation">(</span>f"num_sub_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_sub_call<span class="token punctuation">}</span>\nnum_left_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_left_call<span class="token punctuation">}</span>\n\num_right_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_right_call<span class="token punctuation">}</span>\nnum_base_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_base_call<span class="token punctuation">}</span>\n"<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># num_sub_call: 1</span><span class="token comment" spellcheck="true"># num_left_call: 1</span><span class="token comment" spellcheck="true"># num_right_call: 1</span><span class="token comment" spellcheck="true"># num_base_call: 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是整个流程图：</p><p><img src="./%E9%92%BB%E7%9F%B3%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%982.png" alt="钻石继承问题2"></p><p>整个调用流程看起来像是钻石，因此也叫做钻石继承问题</p><p>从输出可以看到<code>BaseClass</code>的<code>call_me</code>方法被调用了两次。关于多重继承需要记住，我们只想调用类层级中的“下一个”方法，而不是“父类”方法。实际上下一个方法可能不属于该类的父类或者更早的祖先。super关键字再次拯救了我们</p><p>修改后的代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">BaseClass</span><span class="token punctuation">:</span>    num_base_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Base Class"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_base_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">LeftSubclass</span><span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_left_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Left Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_left_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">RightSubclass</span><span class="token punctuation">(</span>BaseClass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_right_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Right Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_right_call <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">Subclass</span><span class="token punctuation">(</span>LeftSubclass<span class="token punctuation">,</span> RightSubclass<span class="token punctuation">)</span><span class="token punctuation">:</span>    num_sub_call <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">def</span> <span class="token function">call_me</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Calling method on Subclass"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>num_sub_call <span class="token operator">+=</span> <span class="token number">1</span>s <span class="token operator">=</span> Subclass<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>call_me<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Calling method on Base Class</span><span class="token comment" spellcheck="true"># Calling method on Right Subclass</span><span class="token comment" spellcheck="true"># Calling method on Left Subclass</span><span class="token comment" spellcheck="true"># Calling method on Subclass</span><span class="token keyword">print</span><span class="token punctuation">(</span>f"num_sub_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_sub_call<span class="token punctuation">}</span>\nnum_left_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_left_call<span class="token punctuation">}</span>\n\num_right_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_right_call<span class="token punctuation">}</span>\nnum_base_call<span class="token punctuation">:</span> <span class="token punctuation">{</span>s<span class="token punctuation">.</span>num_base_call<span class="token punctuation">}</span>\n"<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># num_sub_call: 1</span><span class="token comment" spellcheck="true"># num_left_call: 1</span><span class="token comment" spellcheck="true"># num_right_call: 1</span><span class="token comment" spellcheck="true"># num_base_call: 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出结果可以看到<code>BaseClass</code>的<code>call_me</code>方法只被调用了一次。</p><p>从流程中看到，<code>Subclass</code>的<code>call_me</code>方法调用<code>super().calll_me()</code>，指向了<code>LeftSubclass.call_me()</code>，然后<code>LeftSubclass.call_me()</code>调用了<code>super().call_me()</code>，但是这里<code>super()</code>指向的是<code>RightSubclass.call_me()</code>，而不是他父类<code>BaseClass.call_me()</code>。然后<code>RightSubclass</code>在调用<code>BaseClass</code></p><p>特别注意的就是<code>LeftSubclass</code>中的<code>super()</code>指向的并不是他的父类，这样就实现了调用下一个方法而不是父类的方法。通过使用<code>super</code>可以确保类层级中的每一个方法都被调用一次</p><p>从上面的例子可以看到<code>super</code>的两个作用：</p><ol><li>调用父类方法，通常用来初始化父类</li><li>解决钻石继承问题，防止祖先类方法被调用多次</li></ol><h3 id="不同集合的参数"><a href="#不同集合的参数" class="headerlink" title="不同集合的参数"></a>不同集合的参数</h3><p>之前遇到继承的例子里，父类都是不需要参数初始化的。如果在多重继承下有这样的场景，每个父类都需要不同的参数初始化，那该怎样做呢？可惜的是，解决这个问题的唯一办法就是从头开始计划，我们不得不将基类的参数列表设计成接受任意关键字参数，而且这些参数对于所有子类的实现都是可选的。最后，我们必须确保能够接受不需要的参数并将其传递给自己的<code>super</code>方法，以防他们在后续继承顺序的方法中会用到</p><p>修改后的代码如下：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Contact</span><span class="token punctuation">:</span>    all_contacts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token keyword">class</span> <span class="token class-name">AddressHolder</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> street<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> state<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>street <span class="token operator">=</span> street        self<span class="token punctuation">.</span>city <span class="token operator">=</span> city        self<span class="token punctuation">.</span>state <span class="token operator">=</span> state        self<span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token keyword">class</span> <span class="token class-name">Friend</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> AddressHolder<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> phone<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>phone <span class="token operator">=</span> phone<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就能够初始化不同参数的父类了</p><p>但是，如果子类和父类都需要同一个参数呢？比如Friend和Contact都需要phone参数呢？总共有下面几种方法：</p><ol><li>不要将phone作为关键字参数，而是放在<code>**kwargs</code>中，需要改参数的可以通过<code>kwargs[&#39;phone&#39;]</code>获取</li><li>将phone作为关键字参数，在Friend类中再将phone加入到<code>kwargs</code>中，<code>kwargs[&#39;phone&#39;]=value</code></li><li>将phone作为关键字参数，在Friend类中再将phone加入到<code>kwargs</code>中，使用<code>update</code>方法，该方法适用于更新多个字段到<code>kwargs</code>中</li><li>将phone作为关键字参数，在Friend类中<code>super(phone=phone,**kwargs)</code>这种方式传递给父类</li></ol><p>建议：在实际中尽量多用组合的方式，少用多重继承</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态：由于所用子类不同而产生不同的行为，而不需要明确知道用的是哪个子类。</p><p>在很多情况下，多态是使用继承关系最重要的一个原因之一</p><p>举个例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Animal is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dog is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Cat is running...'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_twice</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>run_twice<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Animal is running...</span>run_twice<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Dog is running...</span>run_twice<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Cat is running...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>run_twice</code>函数只管调用传递进来的<code>run</code>方法，而不关心具体是Animal的哪个子类，因为所有的子类都会有<code>run</code>方法，最基本的就是Animal的<code>run</code>方法。可以随便为Animal增加子类，但是<code>run_twice</code>不用改动。这就是多态真正的威力：调用方只管调用，不管细节</p><p>在静态语言中，<code>run_twice</code>的参数必须是Animal或者他的子类，但是在python中有鸭子类型，既：一个对象如果“看起来像是鸭子，走路像鸭子”，那么他就是鸭子。所以<code>run_twice</code>可以接受不是Animal子类的类，只要他有<code>run</code>方法即可。例如：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Animal is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Dog is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Cat is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Test is running..."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">run_twice</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    animal<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span>run_twice<span class="token punctuation">(</span>Animal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Animal is running...</span>run_twice<span class="token punctuation">(</span>Dog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Dog is running...</span>run_twice<span class="token punctuation">(</span>Cat<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Cat is running...</span>run_twice<span class="token punctuation">(</span>Test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Test is running...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>run_twice(Test())</code>也是可以正常调用的。</p><p>鸭子类型主要的一个作用：不需要提供所需对象的完整接口，而只需满足实际被访问的接口。</p><p>可能在有些场景下，会调用一些官方库的方法，但他对参数是有要求的，比如必须实现某个方法等。利用鸭子类型，我们就可以只实现参数要求的那个方法，而不必实现参数对象所有的方法才去调用这个官方库方法。</p><h3 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h3><p>虽然鸭子类型很有用，但是要想事先知道这个类是否满足全部的需要并不是一件容易的事。因此，Python引入了抽象基类的概念，抽象基类（Abstract base class），或者是ABCs，定义一组必须被类的鸭子实例实现的方法和属性</p><h4 id="使用抽象基类"><a href="#使用抽象基类" class="headerlink" title="使用抽象基类"></a>使用抽象基类</h4><p>先来看一个例子：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">from</span> rich <span class="token keyword">import</span> <span class="token keyword">print</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">from</span> collections <span class="token keyword">import</span> ContainerIn <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> help<span class="token punctuation">(</span>Container<span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>Container<span class="token punctuation">.</span>__abstractmethods__<span class="token punctuation">)</span>frozenset<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">'__contains__'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Container类只需要实现一个抽象方法<code>__contains__</code>。</p><p><code>List</code>,<code>str</code>和<code>dict</code>都实现了这个方法，用以表明给的值是否存在于这一数据结构中，我们自定义一个类：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> collections <span class="token keyword">import</span> Container<span class="token keyword">class</span> <span class="token class-name">OddContainer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__contains__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> isinstance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> int<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token operator">not</span> x <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">class</span> <span class="token class-name">TestContainer</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>OddContainer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>OddContainer<span class="token punctuation">,</span> Container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>TestContainer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Flase</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>TestContainer<span class="token punctuation">,</span> Container<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于Container类规定了鸭子类型实例必须要实现<code>__contains__</code>方法，所以OddContainer可以被认为是Container的子类，而TestContainer不可以</p><p>这就是鸭子类型币传统的多态更棒的原因，我们可以不用继承关系（或者更坏的情况）就能创建一个“是一个”的关系。</p><p>有趣的是Container的子类都可以使用in关键字。实际上in只是<code>__contains__</code>的语法糖。</p><h4 id="创建抽象基类"><a href="#创建抽象基类" class="headerlink" title="创建抽象基类"></a>创建抽象基类</h4><p>Container类其实就是一个抽象基类，下面自己创建一个抽象基类</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> abc<span class="token keyword">class</span> <span class="token class-name">MediaLoader</span><span class="token punctuation">(</span>metaclass<span class="token operator">=</span>abc<span class="token punctuation">.</span>ABCMeta<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># * 子类必须实现该方法 </span>    @abc<span class="token punctuation">.</span>abstractclassmethod    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># * 子类必须提供这一属性</span>    @abc<span class="token punctuation">.</span>abstractproperty    <span class="token keyword">def</span> <span class="token function">ext</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># * 该方法可用类直接调用，而不必用到实例</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">__subclasshook__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> C<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"MediaLoader __subclasshook"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> cls <span class="token keyword">is</span> MediaLoader<span class="token punctuation">:</span>            attrs <span class="token operator">=</span> set<span class="token punctuation">(</span>dir<span class="token punctuation">(</span>C<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> set<span class="token punctuation">(</span>cls<span class="token punctuation">.</span>__abstractmethods__<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> attrs<span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">class</span> <span class="token class-name">Wav</span><span class="token punctuation">(</span>MediaLoader<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Ogg</span><span class="token punctuation">(</span>MediaLoader<span class="token punctuation">)</span><span class="token punctuation">:</span>    ext <span class="token operator">=</span> <span class="token string">".ogg"</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">TestABCs</span><span class="token punctuation">:</span>    ext <span class="token operator">=</span> <span class="token string">".testABCs"</span>    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># x = Wav()</span><span class="token comment" spellcheck="true"># Traceback(most recent call last):</span><span class="token comment" spellcheck="true">#   File "test.py", line 26, in &lt; module ></span><span class="token comment" spellcheck="true">#   x = Wav()</span><span class="token comment" spellcheck="true"># TypeError: Can't instantiate abstract class Wav with abstract methods ext, play</span>o <span class="token operator">=</span> Ogg<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>ext<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># .ogg</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>Ogg<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MediaLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># MediaLoader __subclasshook</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>isinstance<span class="token punctuation">(</span>TestABCs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MediaLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># MediaLoader __subclasshook</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>Ogg<span class="token punctuation">,</span> MediaLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span class="token keyword">print</span><span class="token punctuation">(</span>issubclass<span class="token punctuation">(</span>TestABCs<span class="token punctuation">,</span> MediaLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果继承了抽象基类，但是不实现规定的方法和属性，则会报错</p><h3 id="案例学习"><a href="#案例学习" class="headerlink" title="案例学习"></a>案例学习</h3><p>下面将简单实现一个房屋租赁系统</p><p>继承关系：</p><p><img src="./%E7%AC%AC3%E7%AB%A0-%E6%A1%88%E4%BE%8B%E5%AD%A6%E4%B9%A0.png" alt="第3章-案例学习"></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_valid_input</span><span class="token punctuation">(</span>input_string<span class="token punctuation">,</span> valid_options<span class="token punctuation">)</span><span class="token punctuation">:</span>    input_string <span class="token operator">=</span> f<span class="token string">"{input_string} {', '.join(valid_options)}\n"</span>    response <span class="token operator">=</span> input<span class="token punctuation">(</span>input_string<span class="token punctuation">)</span>    <span class="token keyword">while</span> response <span class="token operator">not</span> <span class="token keyword">in</span> valid_options<span class="token punctuation">:</span>        response <span class="token operator">=</span> input<span class="token punctuation">(</span>input_string<span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token comment" spellcheck="true"># 房屋和公寓的父类，提供一些共有的参数</span><span class="token keyword">class</span> <span class="token class-name">Property</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> square_feet<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> beds<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> baths<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 防止它不是在继承链的最后一层调用</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>square_feet <span class="token operator">=</span> square_feet        self<span class="token punctuation">.</span>num_bedrooms <span class="token operator">=</span> beds        self<span class="token punctuation">.</span>num_baths <span class="token operator">=</span> baths    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"PROPERTY DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"="</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"square footage: {self.square_feet}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"bedrooms: {self.num_bedrooms}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"bathrooms: {self.num_bedrooms}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># * 静态方法，可直接通过类调用，也可以通过实例调用</span>    <span class="token comment" spellcheck="true"># * 静态方法与实例无关，所以没有self参数，同样不能使用super关键字</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> dict<span class="token punctuation">(</span>            square_feet<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"Enter the square feet: "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            beds<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"Enter number of bedrooms: "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            baths<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"Enter number of baths: "</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 公寓</span><span class="token keyword">class</span> <span class="token class-name">Apartment</span><span class="token punctuation">(</span>Property<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 洗衣机</span>    valid_laundries <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"coin"</span><span class="token punctuation">,</span> <span class="token string">"ensuite"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 阳台</span>    valid_balconies <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">,</span> <span class="token string">"solarium"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> balcony<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> laundry<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>balcony <span class="token operator">=</span> balcony        self<span class="token punctuation">.</span>laundry <span class="token operator">=</span> laundry    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"APARTMENT DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"laundry: {self.laundry}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"has balcony: {self.balcony}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        parent_init <span class="token operator">=</span> Property<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        laundry <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"What laundry facilities does the property have? "</span><span class="token punctuation">,</span> Apartment<span class="token punctuation">.</span>valid_laundries<span class="token punctuation">)</span>        balcony <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"Does the property have a balcony? "</span><span class="token punctuation">,</span> Apartment<span class="token punctuation">.</span>valid_balconies<span class="token punctuation">)</span>        parent_init<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"laundry"</span><span class="token punctuation">:</span> laundry<span class="token punctuation">,</span>            <span class="token string">"balcony"</span><span class="token punctuation">:</span> balcony        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> parent_init<span class="token comment" spellcheck="true"># 房屋</span><span class="token keyword">class</span> <span class="token class-name">House</span><span class="token punctuation">(</span>Property<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 车库</span>    valid_garage <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"attached"</span><span class="token punctuation">,</span> <span class="token string">"detached"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 围栏</span>    valid_fenced <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_stories<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> garage<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> fenced<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>garage <span class="token operator">=</span> garage        self<span class="token punctuation">.</span>fenced <span class="token operator">=</span> fenced        self<span class="token punctuation">.</span>num_stories <span class="token operator">=</span> num_stories    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"HOUSE DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"# of stories: {self.num_stories}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"garage: {self.garage}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"fenced yard: {self.fenced}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        parent_init <span class="token operator">=</span> Property<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        fenced <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"Is the yard fenced? "</span><span class="token punctuation">,</span> House<span class="token punctuation">.</span>valid_fenced<span class="token punctuation">)</span>        garage <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"Is there a garage? "</span><span class="token punctuation">,</span> House<span class="token punctuation">.</span>valid_garage<span class="token punctuation">)</span>        num_stories <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">"How many stories? "</span><span class="token punctuation">)</span>        parent_init<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>            <span class="token string">"fenced"</span><span class="token punctuation">:</span> fenced<span class="token punctuation">,</span>            <span class="token string">"garage"</span><span class="token punctuation">:</span> garage<span class="token punctuation">,</span>            <span class="token string">"num_stories"</span><span class="token punctuation">:</span> num_stories        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> parent_init<span class="token comment" spellcheck="true"># 购买</span><span class="token keyword">class</span> <span class="token class-name">Purchase</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> price<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> taxes<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>price <span class="token operator">=</span> price        self<span class="token punctuation">.</span>taxes <span class="token operator">=</span> taxes    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"PURCHASE DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"selling price: {self.price}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"estimated taxes: {self.taxes}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> dict<span class="token punctuation">(</span>            price<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"What is the selling price? "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            taxes<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"What are the estimated taxes? "</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 租房</span><span class="token keyword">class</span> <span class="token class-name">Rental</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> furnished<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> utilities<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> rent<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>furnished <span class="token operator">=</span> furnished        self<span class="token punctuation">.</span>utilities <span class="token operator">=</span> utilities        self<span class="token punctuation">.</span>rent <span class="token operator">=</span> rent    <span class="token keyword">def</span> <span class="token function">display</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RENTAL DETAILS"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"rent: {self.rent}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"estimated utilities: {self.utilities}"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"furnished: {self.furnished}"</span><span class="token punctuation">)</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> dict<span class="token punctuation">(</span>            rent<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"What is the monthly rent? "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            utilities<span class="token operator">=</span>input<span class="token punctuation">(</span><span class="token string">"What are the estimated utilities? "</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            furnished<span class="token operator">=</span>get_valid_input<span class="token punctuation">(</span>                <span class="token string">"Is the property furnished? "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">,</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 租房子</span><span class="token keyword">class</span> <span class="token class-name">HouseRental</span><span class="token punctuation">(</span>Rental<span class="token punctuation">,</span> House<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init <span class="token operator">=</span> House<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        init<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Rental<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> initinit <span class="token operator">=</span> HouseRental<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>house <span class="token operator">=</span> HouseRental<span class="token punctuation">(</span><span class="token operator">**</span>init<span class="token punctuation">)</span>house<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''Enter the square feet: 1Enter number of bedrooms: 2Enter number of baths: 3Is the yard fenced?  yes, noyesIs there a garage?  attached, detached, noneattachedHow many stories? 3What is the monthly rent? 12What are the estimated utilities? 100Is the property furnished?  yes, noyesPROPERTY DETAILS==========square footage: 1bedrooms: 2bathrooms: 2HOUSE DETAILS# of stories: 3garage: attachedfenced yard: yesRENTAL DETAILSrent: 12estimated utilities: 100furnished: yes'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：在前面的例子中如果我们将HouseRental继承顺序改为<code>(House, Rental)</code>，将不会触发<code>Rental.display()</code>方法。因为当调用<code>House.display</code>方式时，会调用<code>Property.display</code>方法。但是<code>Property.display()</code>中没有调用<code>super</code>，所以调用不了<code>Rental.display</code>方法。如果在Property中调用<code>super().display()</code>方法则不行，因为<code>object</code>对象没有<code>display</code>方法。可行的方式是Rental也继承Property，就成了之前讲到的钻石继承问题了。<code>super()</code>能轻松的解决。</p></blockquote><p>继续编写剩余代码：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 租公寓</span><span class="token keyword">class</span> <span class="token class-name">ApartmentRental</span><span class="token punctuation">(</span>Rental<span class="token punctuation">,</span> Apartment<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init <span class="token operator">=</span> Apartment<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        init<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Rental<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> init<span class="token comment" spellcheck="true"># 买公寓</span><span class="token keyword">class</span> <span class="token class-name">ApartmentPurchase</span><span class="token punctuation">(</span>Purchase<span class="token punctuation">,</span> Apartment<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init <span class="token operator">=</span> Purchase<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        init<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Rental<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> init<span class="token comment" spellcheck="true"># 买房子</span><span class="token keyword">class</span> <span class="token class-name">HousePurchase</span><span class="token punctuation">(</span>Purchase<span class="token punctuation">,</span> House<span class="token punctuation">)</span><span class="token punctuation">:</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">prompt_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init <span class="token operator">=</span> House<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        init<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Purchase<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> init<span class="token keyword">class</span> <span class="token class-name">Agent</span><span class="token punctuation">:</span>    type_map <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token punctuation">(</span><span class="token string">"house"</span><span class="token punctuation">,</span> <span class="token string">"rental"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> HouseRental<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"house"</span><span class="token punctuation">,</span> <span class="token string">"purchase"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> HousePurchase<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"apartment"</span><span class="token punctuation">,</span> <span class="token string">"rental"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ApartmentRental<span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token string">"apartment"</span><span class="token punctuation">,</span> <span class="token string">"purchase"</span><span class="token punctuation">)</span><span class="token punctuation">:</span> ApartmentPurchase    <span class="token punctuation">}</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>property_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">display_properties</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> property <span class="token keyword">in</span> self<span class="token punctuation">.</span>property_list<span class="token punctuation">:</span>            property<span class="token punctuation">.</span>display<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">add_property</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        property_type <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"What type of property? "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"house"</span><span class="token punctuation">,</span> <span class="token string">"apartment"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        payment_type <span class="token operator">=</span> get_valid_input<span class="token punctuation">(</span>            <span class="token string">"What payment type? "</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"purchase"</span><span class="token punctuation">,</span> <span class="token string">"rental"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>        PropertyClass <span class="token operator">=</span> self<span class="token punctuation">.</span>type_map<span class="token punctuation">[</span><span class="token punctuation">(</span>property_type<span class="token punctuation">,</span> payment_type<span class="token punctuation">)</span><span class="token punctuation">]</span>        init_args <span class="token operator">=</span> PropertyClass<span class="token punctuation">.</span>prompt_init<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>property_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>PropertyClass<span class="token punctuation">(</span><span class="token operator">**</span>init_args<span class="token punctuation">)</span><span class="token punctuation">)</span>agent <span class="token operator">=</span> Agent<span class="token punctuation">(</span><span class="token punctuation">)</span>agent<span class="token punctuation">.</span>add_property<span class="token punctuation">(</span><span class="token punctuation">)</span>agent<span class="token punctuation">.</span>add_property<span class="token punctuation">(</span><span class="token punctuation">)</span>agent<span class="token punctuation">.</span>display_properties<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># What type of property?  house, apartment</span><span class="token comment" spellcheck="true"># house</span><span class="token comment" spellcheck="true"># What payment type?  purchase, rental</span><span class="token comment" spellcheck="true"># purchase</span><span class="token comment" spellcheck="true"># Enter the square feet: 1</span><span class="token comment" spellcheck="true"># Enter number of bedrooms: 2</span><span class="token comment" spellcheck="true"># Enter number of baths: 3</span><span class="token comment" spellcheck="true"># Is the yard fenced?  yes, no</span><span class="token comment" spellcheck="true"># yes</span><span class="token comment" spellcheck="true"># Is there a garage?  attached, detached, none</span><span class="token comment" spellcheck="true"># none</span><span class="token comment" spellcheck="true"># How many stories? 4</span><span class="token comment" spellcheck="true"># What is the selling price? 12</span><span class="token comment" spellcheck="true"># What are the estimated taxes? 23</span><span class="token comment" spellcheck="true"># What type of property?  house, apartment</span><span class="token comment" spellcheck="true"># house</span><span class="token comment" spellcheck="true"># What payment type?  purchase, rental</span><span class="token comment" spellcheck="true"># rental</span><span class="token comment" spellcheck="true"># Enter the square feet: 2</span><span class="token comment" spellcheck="true"># Enter number of bedrooms: 3</span><span class="token comment" spellcheck="true"># Enter number of baths: 4</span><span class="token comment" spellcheck="true"># Is the yard fenced?  yes, no</span><span class="token comment" spellcheck="true"># no</span><span class="token comment" spellcheck="true"># Is there a garage?  attached, detached, none</span><span class="token comment" spellcheck="true"># none</span><span class="token comment" spellcheck="true"># How many stories? 6</span><span class="token comment" spellcheck="true"># What is the monthly rent? 12</span><span class="token comment" spellcheck="true"># What are the estimated utilities? 4</span><span class="token comment" spellcheck="true"># Is the property furnished?  yes, no</span><span class="token comment" spellcheck="true"># no</span><span class="token comment" spellcheck="true"># PROPERTY DETAILS</span><span class="token comment" spellcheck="true"># == == == == ==</span><span class="token comment" spellcheck="true"># square footage: 1</span><span class="token comment" spellcheck="true"># bedrooms: 2</span><span class="token comment" spellcheck="true"># bathrooms: 2</span><span class="token comment" spellcheck="true"># HOUSE DETAILS</span><span class="token comment" spellcheck="true"># # of stories: 4</span><span class="token comment" spellcheck="true"># garage: none</span><span class="token comment" spellcheck="true"># fenced yard: yes</span><span class="token comment" spellcheck="true"># PURCHASE DETAILS</span><span class="token comment" spellcheck="true"># selling price: 12</span><span class="token comment" spellcheck="true"># estimated taxes: 23</span><span class="token comment" spellcheck="true"># PROPERTY DETAILS</span><span class="token comment" spellcheck="true"># == == == == ==</span><span class="token comment" spellcheck="true"># square footage: 2</span><span class="token comment" spellcheck="true"># bedrooms: 3</span><span class="token comment" spellcheck="true"># bathrooms: 3</span><span class="token comment" spellcheck="true"># HOUSE DETAILS</span><span class="token comment" spellcheck="true"># # of stories: 6</span><span class="token comment" spellcheck="true"># garage: none</span><span class="token comment" spellcheck="true"># fenced yard: no</span><span class="token comment" spellcheck="true"># RENTAL DETAILS</span><span class="token comment" spellcheck="true"># rent: 12</span><span class="token comment" spellcheck="true"># estimated utilities: 4</span><span class="token comment" spellcheck="true"># furnished: no</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 笔记 </tag>
            
            <tag> 面向对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful API</title>
      <link href="/2020/06/27/restfule-api/"/>
      <url>/2020/06/27/restfule-api/</url>
      
        <content type="html"><![CDATA[<h2 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>​    最近在项目中单独负责一个组件的开发，这个组件的输出是通过api的方式输出。虽然接口不多，也就15个api左右，但是越往后写就越感觉不太对劲。在和同时联调沟通的时候也发现了很多的问题。一直都想要好好总结下，趁着今天下班早有时间就反思一下吧。</p><p>​    我总结了目前我发现的这个项目的一些问题</p><ol><li>API风格混乱</li><li>API设计不好，不能更加友好的支持API升级</li><li>返回状态码的滥用</li><li>接口返回数据结构不一致</li><li>接口太碎片化</li><li>由于是go语言写的，基本每个接口都用到了defer</li></ol><p>​    站在现在的角度来看，其实这个组件的api是想当失败，可以说是不忍直视。当然有一小部分原因是项目紧急的缘故。但是不可否认的是主要还是因为我的原因才导致了这样的结果。所以我决定新开一个分支，在下班时间重构这个组件的API。虽然这个新重构后的API上线的可能性不大（因为好多项目已经集成了该组件，改动起来花费的资源很大）。但也算是对自己的一个交代吧。</p><p>​    自己算了算之前也参与过三个项目相关业务API的开发。但是都是在别人的基础上进行开发，看到别人没有过多的去关注这些东西。所以自己也就自然而然的没有过多的去思考，就顺着那种思路开发下去了。总之该来的还是会来的。这次的更改可能对这个组件起不了多大的作用。但是希望能够给自己敲响警钟，避免下次出现同样的问题。</p><h3 id="REST-API的一些规范"><a href="#REST-API的一些规范" class="headerlink" title="REST API的一些规范"></a>REST API的一些规范</h3><p>实现REST API标准比较好的例子就是<a href="https://developer.github.com/v3/#current-version" target="_blank" rel="noopener">https://developer.github.com/v3/#current-version</a></p><ol><li><p>在API中指定版本</p><p>一种是可以放在url中，另外一种就是将版本放在HTTP请求头中。还是放在url中比较方便</p></li><li><p>url中不能出现动词，名词也应该使用复数</p><p>因为RESTful面向的都是资源，所以在url中不能包含动词。</p></li><li><p>对资源的操作都是用HTTP动词</p><p>常用到的HTTP动词</p><table><thead><tr><th>动词</th><th>作用</th><th>返回结果</th></tr></thead><tbody><tr><td>GET</td><td>从服务器获取资源</td><td>获取单个资源对象或者资源对象数组</td></tr><tr><td>POST</td><td>新建资源</td><td>新生成的资源对象</td></tr><tr><td>PUT</td><td>更新整个对象，需要客户端提供完整的对象</td><td>更新后的资源对象</td></tr><tr><td>PATCH</td><td>更新对象的某个部分，需要客户端提供更新的部分</td><td>更新后的资源对象</td></tr><tr><td>DELETE</td><td>删除整个对象</td><td>返回一个空文档</td></tr></tbody></table></li></ol><p>一些例子</p><pre><code>```bashGET /zoos：列出所有动物园POST /zoos：新建一个动物园GET /zoos/ID：获取某个指定动物园的信息PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）DELETE /zoos/ID：删除某个动物园GET /zoos/ID/animals：列出某个指定动物园的所有动物DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物```</code></pre><ol start="4"><li><p>过滤信息</p><p>一些例子</p><pre class="line-numbers language-bash"><code class="language-bash">?limit<span class="token operator">=</span>10：指定返回记录的数量?offset<span class="token operator">=</span>10：指定返回记录的开始位置。?page<span class="token operator">=</span>2<span class="token operator">&amp;</span>per_page<span class="token operator">=</span>100：指定第几页，以及每页的记录数。?sortby<span class="token operator">=</span>name<span class="token operator">&amp;</span>order<span class="token operator">=</span>asc：指定返回结果按照哪个属性排序，以及排序顺序。?animal_type_id<span class="token operator">=</span>1：指定筛选条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中 GET /zoo/ID/animals 与 GET /animals?zoo=ID都是REST的风格。一直都以为只有第一种才是</p></li><li><p>状态码</p><pre class="line-numbers language-bash"><code class="language-bash">200 OK - <span class="token punctuation">[</span>GET<span class="token punctuation">]</span>：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。201 CREATED - <span class="token punctuation">[</span>POST/PUT/PATCH<span class="token punctuation">]</span>：用户新建或修改数据成功。202 Accepted - <span class="token punctuation">[</span>*<span class="token punctuation">]</span>：表示一个请求已经进入后台排队（异步任务）204 NO CONTENT - <span class="token punctuation">[</span>DELETE<span class="token punctuation">]</span>：用户删除数据成功。400 INVALID REQUEST - <span class="token punctuation">[</span>POST/PUT/PATCH<span class="token punctuation">]</span>：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。401 Unauthorized - <span class="token punctuation">[</span>*<span class="token punctuation">]</span>：表示用户没有权限（令牌、用户名、密码错误）。403 Forbidden - <span class="token punctuation">[</span>*<span class="token punctuation">]</span> 表示用户得到授权（与401错误相对），但是访问是被禁止的。404 NOT FOUND - <span class="token punctuation">[</span>*<span class="token punctuation">]</span>：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。406 Not Acceptable - <span class="token punctuation">[</span>GET<span class="token punctuation">]</span>：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。410 Gone -<span class="token punctuation">[</span>GET<span class="token punctuation">]</span>：用户请求的资源被永久删除，且不会再得到的。422 Unprocesable entity - <span class="token punctuation">[</span>POST/PUT/PATCH<span class="token punctuation">]</span> 当创建一个对象时，发生一个验证错误。500 INTERNAL SERVER ERROR - <span class="token punctuation">[</span>*<span class="token punctuation">]</span>：服务器发生错误，用户将无法判断发出的请求是否成功。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>返回结果</p><pre class="line-numbers language-bash"><code class="language-bash">GET /collection：返回资源对象的列表（数组）GET /collection/resource：返回单个资源对象POST /collection：返回新生成的资源对象PUT /collection/resource：返回完整的资源对象PATCH /collection/resource：返回完整的资源对象DELETE /collection/resource：返回一个空文档<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Hypermedia API</p><p>个人认为这个在公司这种项目中是可以省略的，毕竟公司项目中的API都是面向特定的用户，而且有安全限制，不会把所有的API都暴露出去。</p></li><li><p>API的用户认证使用OAuth 2.0框架</p><p>这个单独拿出来写一写</p></li></ol><p>其实RESTful规范也不多，在实际中除非有特殊情况，都要尽量的遵守规范。</p><p>参考链接：</p><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p><p><a href="https://docs.microsoft.com/zh-cn/azure/architecture/best-practices/api-design" target="_blank" rel="noopener">https://docs.microsoft.com/zh-cn/azure/architecture/best-practices/api-design</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python可变对象和不可变对象</title>
      <link href="/2020/06/27/python-mutable/"/>
      <url>/2020/06/27/python-mutable/</url>
      
        <content type="html"><![CDATA[<p>在Python中所有的一切都是对象，都是继承同一个对象<code>object</code>。</p><blockquote><p><code>object</code>是所有对象的基类，<code>type</code>也是继承<code>object</code></p></blockquote><blockquote><p><code>type</code>是一切type的类型</p></blockquote><p>借用<a href="https://colinoftroy.wordpress.com/2012/12/03/differences-between-python-types-and-objects/" target="_blank" rel="noopener">某博客里的一张图片</a>，他们的关系应该是这样的（蓝色表示继承，红色表示类型）</p><p><img src="./python.jpg" alt="img"></p><h3 id="可变和不可变对象的区别"><a href="#可变和不可变对象的区别" class="headerlink" title="可变和不可变对象的区别"></a>可变和不可变对象的区别</h3><p>Python中的数据结构也可以分为可变对象和不可变对象两类</p><ul><li>可变对象：<code>list</code>,<code>set</code>,<code>dict</code></li><li>不可变对象：<code>tuple</code>,<code>int</code>,<code>float</code>,<code>string</code>,<code>bool</code></li></ul><p><strong>这里说的可变和不可变都是基于内存地址中的数据来区分的</strong>，看个例子</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里a和b都指向了同一个内存地址，因为是<code>list</code>，所以b能够修改内存地址当中的数据，所以打印a时就会输出内存地址当中修改后的数据。</p><p>下面看看不可变对象的例子</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span>TypeError       Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token operator">&lt;</span>ipython<span class="token operator">-</span>input<span class="token number">-17</span><span class="token operator">-</span><span class="token number">62bbbc50f611</span><span class="token operator">></span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">></span> <span class="token number">1</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> object does <span class="token operator">not</span> support item assignment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>tuple</code>是不可变对象，既内存中记录的数据是不可以修改的，所以当我们修改数据时就出现了错误。</p><p>可能会有人疑问，不可变对象也是可以改变内存地址内容的，比如</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">"test"</span>In <span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">"hello"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其实这并不是修改了内存地址中的数据，而是将a重新指向了另外一个内存地址，如果我们在打印输出b，就会发现b还是”test”。</strong></p><p>从内存地址中更容易理解</p><blockquote><p><code>id()</code>方法可以查看内存地址，其实是不是内存地址，而是逻辑地址</p></blockquote><p>可变对象：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4370511024</span>In <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> aOut<span class="token punctuation">[</span><span class="token number">25</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4370511024</span>In <span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4370511024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到a和b指向的内存地址并没有发生变化</p><p>不可变对象：</p><pre class="line-numbers language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">28</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">"test"</span>In <span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4343187248</span>In <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> <span class="token string">"hello"</span>In <span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>a<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4343187248</span>In <span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span>Out<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token number">4372234608</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到其实是b指向的内存地址变化了，并不是内存地址当中的数据发生变化了</p><h3 id="可变对象和不可变对象的应用"><a href="#可变对象和不可变对象的应用" class="headerlink" title="可变对象和不可变对象的应用"></a>可变对象和不可变对象的应用</h3><p><strong>我们在实际工作中应该避免使用可变对象作为函数参数传入，除非你明确的知道会发生什么。</strong></p><p>这么做的原因是因为在Python当中是传递参数都是引用传递而不是值传递。关于引用传递可以简单的用下面的例子证明：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>args<span class="token punctuation">:</span> int<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> id<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>    args <span class="token operator">+=</span> <span class="token number">10</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> id<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    args <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> id<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span>    test<span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> id<span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash"><code class="language-bash">1 45175108321 451751083211 45175111521 4517510832<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到在<code>test</code>函数中，<code>args</code>和在函数外的<code>args</code>的内存地址都是相同的，所以证明了Python中是传递参数是引用传递。但是最后并没有改变函数外<code>args</code>的值，是因为<code>int</code>类型是不可变对象。如果是可变对象就会改变值。</p><h4 id="可变对象作为函数参数的正向作用"><a href="#可变对象作为函数参数的正向作用" class="headerlink" title="可变对象作为函数参数的正向作用"></a>可变对象作为函数参数的正向作用</h4><p>在有些情况下，可变对象作为函数参数还是非常有用的。</p><p>比如要实现一个生产者-消费者模式</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue<span class="token keyword">from</span> concurrent<span class="token punctuation">.</span>futures <span class="token keyword">import</span> ThreadPoolExecutor<span class="token keyword">class</span> <span class="token class-name">Producer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"producet put a message {i}"</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> queue    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"consumer get a message {data}"</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    queue <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token punctuation">)</span>    producer <span class="token operator">=</span> Producer<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    consumer <span class="token operator">=</span> Consumer<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>    thread <span class="token operator">=</span> ThreadPoolExecutor<span class="token punctuation">(</span>max_workers<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>producer<span class="token punctuation">.</span>run<span class="token punctuation">)</span>    thread<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>consumer<span class="token punctuation">.</span>run<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash"><code class="language-bash">producet put a message 0consumer get a message 0producet put a message 1consumer get a message 1producet put a message 2consumer get a message 2producet put a message 3consumer get a message 3producet put a message 4consumer get a message 4producet put a message 5consumer get a message 5producet put a message 6consumer get a message 6producet put a message 7consumer get a message 7producet put a message 8consumer get a message 8producet put a message 9consumer get a message 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过可变对象，能够方便的在两个函数中进行通信，不必每次改变数据都去通知对方。</p><h4 id="可变对象作为函数参数的负向作用"><a href="#可变对象作为函数参数的负向作用" class="headerlink" title="可变对象作为函数参数的负向作用"></a>可变对象作为函数参数的负向作用</h4><p>看下面的例子：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"hello"</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>test<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'world'</span>, <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'world'</span>, <span class="token string">'world'</span>, <span class="token string">'world'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'world'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>会出现这个问题的原因主要有两个</p><ul><li><strong>默认参数的值只会在函数定义的时候赋值一次</strong></li><li><strong>a变量指向了一个可变对象</strong></li></ul><p>当不给test函数传递参数时，a变量就会修改<code>test(a=[])</code>中的[]的内存地址，而且因为<strong>默认参数的值只会在函数定义的时候赋值一次</strong>，所以后面再次不给test函数传递参数时，a变量还是会指向<code>test(a=[])</code>中的[]的内存地址，所以就出现了上面的结果</p><h5 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h5><p>需要将默认值改为不可变对象</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> a<span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是改成这样还是有个问题，就是有时候函数传递进来的是比如说false、空字符串等。会把这些输入当做没有输入</p><p>优化：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token keyword">is</span> None<span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果你的目标是检测函数调用时是否传递了默认值，而不是提供默认值那么会有一个更好的方式</p><p>改进：将<code>None</code>替换为一个独一无二的，用户不可能传入的类型，<code>object</code>是个好的选择</p><pre class="line-numbers language-python"><code class="language-python">_no_value <span class="token operator">=</span> object<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>a<span class="token operator">=</span>_no_value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token keyword">is</span> _no_value<span class="token punctuation">:</span>        a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样即使函数的参数是<code>None</code>，也会判断为传递进来了参数</p>]]></content>
      
      
      <categories>
          
          <category> 编程学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERC20代币批量转账实现和解析(二)</title>
      <link href="/2019/01/02/erc20-dai-bi-pi-liang-zhuan-zhang-shi-xian-he-jie-xi-er/"/>
      <url>/2019/01/02/erc20-dai-bi-pi-liang-zhuan-zhang-shi-xian-he-jie-xi-er/</url>
      
        <content type="html"><![CDATA[<p>接上篇<a href="https://juejin.im/post/6844903748452483086" target="_blank" rel="noopener">ERC20代币批量转账实现和解析</a></p><h2 id="批量转账的原理"><a href="#批量转账的原理" class="headerlink" title="批量转账的原理"></a>批量转账的原理</h2><p>我们将讲解三种空投的实现方式，前两中都是在重新部署一个空投合约，第三种则是在代币代码部署之前就写好空投代码</p><p>有不少的代币已经在以太坊上线部署，一旦上线之后是不能修改代码的，所以这些代币要想实现空投就必须重新部署一个空投合约。利用空投合约进行转账。这种方式主要用到了ERC20标准中的两个函数</p><pre><code>approve: 此函数的调用方授权给定的地址可以从其地址中提款。transferFrom: 该函数允许智能合约自动执行转账流程并代表所有者发送给定数量的通证。</code></pre><h3 id="第一种方式"><a href="#第一种方式" class="headerlink" title="第一种方式"></a>第一种方式</h3><p>我们可以利用<code>approve</code>函数给空投合约地址给与权限，让他可以调用一个地址中的代币，然后循环调用空投合约中的<code>transferFrom</code>进行批量转账</p><p>先写一个简单的空投合约代码</p><pre><code>pragma solidity ^0.4.0;contract Airdrop {    function batch(address tokenAddr, address []toAddr, uint256 []value) returns (bool){        require(toAddr.length == value.length &amp;&amp; toAddr.length &gt;= 1);        bytes4 fID= bytes4(keccak256(&quot;transferFrom(address,address,uint256)&quot;));        for(uint256 i = 0 ; i &lt; toAddr.length; i++){            if(!tokenAddr.call(fID, msg.sender, toAddr[i], value[i])) { revert(); }        }    }}</code></pre><p>定义了<code>batch</code>函数进行空投，会接受三个参数：</p><ol><li>合约地址</li><li>接受地址列表</li><li>空投值的列表，和地址列表一一对应</li></ol><p>可以看到在for循环当中利用<code>transferFrom</code>函数进行批量转账</p><p>按照之前部署合约的步骤进行部署，在命令行中输入<code>airdrop</code></p><p><img src="./1680f197d1572c33.png" alt="查看airdrop部署"></p><p>如果看到上图，就说明你部署成功啦！</p><p>接下来就利用该合约进行空投，首先需要利用<code>approve</code>给与空投合约一定的权限</p><p><img src="./1680f1a47b4ada4e.png" alt="给予airdrop权限"></p><p>对上面的步骤简单讲解一下，首先我们查看空投合约地址可以调用的数量为0</p><blockquote><p><code>allowance</code>返回空投合约地址可以调动一个地址代币的数量</p></blockquote><p>对地址进行解锁，并利用<code>approve</code>赋予权限，在挖矿之后继续查看，发现空投合约可以调用<code>eth.accounts[0]</code>这个地址当中的20个代币</p><p>给予权限之后，我们就开始空投！</p><pre><code> airdrop.batch.sendTransaction(&#39;0x6cbde372b5d3ceeee74fd56a6681eea2c3a4e94c&#39;,[&#39;0xd1d4e4a5ea685295b22d9fbe68b0cc6a8736ecf9&#39;,&#39;0xa90cf1c04ad3e96f081b599db2a7c12251ada066&#39;,&#39;0xc7e452aa3230d3699852687f7deb3c160d6ebab0&#39;,&#39;0x3e9197eb3faa278d455a35d4e9f0bc529dd5732f&#39;,&#39;0xb2dd757d40ea4b10df06e9c91e62109b82e0420b&#39;],[1,2,3,2,1],{gas:300000})</code></pre><p>会有人发现上面的命令不是直接执行<code>batch</code>方法，而是调用了<code>sendTransactoin</code>，这是因为我在命令行下，默认的gas很低，但是这笔交易的数据很多，所以会因为gas用光而失败，不直接调用<code>batch</code>是为了最后的参数<code>gas:300000</code>把gas设置的高一点。当然你直接调用<code>batch</code>方法也是可以的，但是不要最后的<code>{gas:300000}</code></p><p><img src="./1680f1af8adf5a9e.png" alt="airdrop_done"></p><p>从上面可以看到批量转账完成</p><h3 id="第二种方式"><a href="#第二种方式" class="headerlink" title="第二种方式"></a>第二种方式</h3><p>第一种方式需要我们利用<code>approve</code>给合约地址给予一定的权限，但是如果我们把合约地址当成一个账户地址，给他转一些代币，那么空投合约就可以用自己地址当中的币进行转账了。</p><p>先写一个可以实现这种方式的合约代码</p><pre><code>pragma solidity ^0.4.18;contract Ownable {  address public owner;  function Ownable() public {    owner = msg.sender;  }  modifier onlyOwner() {    require(msg.sender == owner);    _;  }}interface Token {  function balanceOf(address _owner) public constant returns (uint256 );  function transfer(address _to, uint256 _value) public ;  event Transfer(address indexed _from, address indexed _to, uint256 _value);}contract Airdropper is Ownable {    function AirTransfer(address[] _recipients, uint[] _values, address _tokenAddress) onlyOwner public returns (bool) {        require(_recipients.length &gt; 0);        Token token = Token(_tokenAddress);        for(uint j = 0; j &lt; _recipients.length; j++){            token.transfer(_recipients[j], _values[j]);        }        return true;    }}</code></pre><p>从代码中可以看到我们是利用合约地址当中的代币进行交易的，按照之前部署代币的步骤我们进行部署</p><p><img src="./1680f1baf2d109ea.png" alt="airdropper"></p><p>部署成功之后，向空投合约转一些代币，然后调用空投合约的方法进行空投，实施的步骤和第一种方式大同小异，就不在赘述了，具体看下图</p><p><img src="./1680f1c1ae8a1d8d.png" alt="airdropper_done"></p><h3 id="第三种方式"><a href="#第三种方式" class="headerlink" title="第三种方式"></a>第三种方式</h3><p>前面两种方式都是在合约外部在重新部署一个合约用于空投，第三种方式则是在合约中就实现空投，实现的思路其实和之前的方法一样，只不过是集合到了合约当中</p><p>将下面的代码加到合约当中</p><pre><code>function batch(address []toAddr, uint256 []value) returns (bool){    require(toAddr.length == value.length &amp;&amp; toAddr.length &gt;= 1);    for(uint256 i = 0 ; i &lt; toAddr.length; i++){        transfer(toAddr[i], value[i]);    }}</code></pre><p>按照之前的步骤部署到geth私有链中，查看合约</p><p><img src="./1680f1cba01d2699.png" alt="3airdrop"></p><p>可以发现，现在的合约当中已经有了<code>batch</code>方法了，然后进行交易就可以了</p><p><img src="./1680f1cf9c709a1c.png" alt="3airdrop_done"></p><p>空投合约的三种方式就实现了，其实原理都很简单</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ERC20代币批量转账实现和解析(一)</title>
      <link href="/2018/12/27/erc20-dai-bi-pi-liang-zhuan-zhang-shi-xian-he-jie-xi-yi/"/>
      <url>/2018/12/27/erc20-dai-bi-pi-liang-zhuan-zhang-shi-xian-he-jie-xi-yi/</url>
      
        <content type="html"><![CDATA[<p>如果你对区块链和ERC20代币没有概念，请先阅读入门知识</p><ol><li><a href="https://learnblockchain.cn/2017/11/20/whatiseth/" target="_blank" rel="noopener">以太坊是什么</a></li><li><a href="https://ethfans.org/posts/block-chain-technology-smart-contracts-and-ethereum" target="_blank" rel="noopener">区块链技术-智能合约-以太坊</a></li></ol><p>批量转账，指的是在一笔 ETH 交易中转多笔代币到不同的账户，一般用于 ERC20 代币项目启动时对用户进行空投。</p><p>批量空投的好处主要有两个，一是省 GAS 费，但事实上省得不多；二是省时间，这是最主要目的。以太坊是以交易为粒度打包，如果转账只能单对单，即使一次发起多笔单对单的交易，等待这些交易被打包的时间也非常漫长，而且还有笔数上限限制。将多笔转账放到同一个交易中，被打包确认的速度就会非常快。一般 ERC20 代币项目启动时都会大撒币，空投地址动辄都是几万几十万，批量空投接口对效率会有上百倍的提升。</p><p>文章主要内容</p><ol><li>在本机部署ETH私有链</li><li>在ETH私有链上发布ERC20代币</li><li>三种批量转账方式的原理</li><li>三种批量转账方式的实现</li><li>如何解析批量转账</li></ol><blockquote><p>由于文章较长，所以这里分为两篇，本篇主要讲前两个部署环境的部分，熟悉部署的同学可以跳过本章</p></blockquote><h2 id="在本机部署ETH私有链"><a href="#在本机部署ETH私有链" class="headerlink" title="在本机部署ETH私有链"></a>在本机部署ETH私有链</h2><p>本机默认是在Mac OS X上进行安装，别的系统的安装可以在github上查看<a href="https://github.com/ethereum/go-ethereum/wiki/Building-Ethereum" target="_blank" rel="noopener">Ethereum Installation Instructions</a></p><h3 id="geth安装"><a href="#geth安装" class="headerlink" title="geth安装"></a>geth安装</h3><p>推荐使用Homebrew进行安装，简单快捷</p><blockquote><p>brew 是 Mac 下的包管理工具，和Ubuntu里的apt-get类似</p></blockquote><pre><code>brew tap ethereum/ethereumbrew install ethereum</code></pre><h3 id="创建私有链"><a href="#创建私有链" class="headerlink" title="创建私有链"></a>创建私有链</h3><p>首先新建一个文件目录，例如<code>ethprivate</code></p><p>要搭建私有链必须有一个创世区块，创世区块的信息写在一个json文件中，例如genesis.json文件，在<code>ethprivate/genesis.json</code>中写入下面的内容</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"config"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"chainID"</span><span class="token operator">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token property">"homesteadBlock"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"eip155Block"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"eip158Block"</span><span class="token operator">:</span> <span class="token number">0</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"alloc"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"coinbase"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"difficulty"</span><span class="token operator">:</span> <span class="token string">"0x400"</span><span class="token punctuation">,</span>  <span class="token property">"extraData"</span><span class="token operator">:</span> <span class="token string">"0x"</span><span class="token punctuation">,</span>  <span class="token property">"gasLimit"</span><span class="token operator">:</span> <span class="token string">"0x84c060"</span><span class="token punctuation">,</span>  <span class="token property">"nonce"</span><span class="token operator">:</span> <span class="token string">"0xdeadbeefdeadbeef"</span><span class="token punctuation">,</span>  <span class="token property">"mixhash"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"parentHash"</span><span class="token operator">:</span> <span class="token string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span><span class="token punctuation">,</span>  <span class="token property">"timestamp"</span><span class="token operator">:</span> <span class="token string">"0x00"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这里将gasLimit设置大一点，防止后面部署合约的时候报<code>Error: exceeds block gas limit undefined</code>的错误信息，这是因为合约所需的gas超过了区块的最大gas</p></blockquote><p>创建好创世区块后，我们需要利用该创世区块去初始化区块链，需要新建一个<code>data0</code>目录存放区块信息</p><p>接着在主目录下，执行初始化区块链的命令</p><pre><code>geth --datadir data0 init genesis.json</code></pre><p>看到如下信息则表明初始化成功</p><p><img src="./167f01019e73ace1.png" alt></p><h3 id="启动私有链"><a href="#启动私有链" class="headerlink" title="启动私有链"></a>启动私有链</h3><pre><code>geth --datadir &#39;data0&#39; --identity &#39;my_block&#39; --port &#39;30304&#39; console 2&gt;&gt;eth_output.log</code></pre><p>参数含义</p><pre><code>–identity：指定节点 ID；–rpc：表示开启 HTTP-RPC 服务；–rpcport：指定 HTTP-RPC 服务监听端口号（默认为 8545）；–datadir：指定区块链数据的存储位置；–port：指定和其他节点连接所用的端口号（默认为 30303）；–networkid： 指定私有链网络号；–nodiscover：关闭节点发现机制，防止加入有同样初始配置的陌生节点。</code></pre><p>看到下面的信息表示私有链成功启动</p><p><img src="./167f01127c85c035.png" alt></p><h3 id="创建账户"><a href="#创建账户" class="headerlink" title="创建账户"></a>创建账户</h3><p>现在刚启动还没有任何账户</p><p><img src="./167f012330806b6e.png" alt></p><p>我们利用<code>personal</code>创建账户</p><pre><code>personal.newAccount()</code></pre><p><img src="./167f012c9ee11b9f.png" alt></p><blockquote><p>Passphrase 就是密码，连续输入两次密码便可以创建一个账户</p></blockquote><p>除了<code>personal</code>，geth命令行中还包含了另外的对象</p><pre><code>eth：包含一些跟操作区块链相关的方法net：包含以下查看p2p网络状态的方法admin：包含一些与管理节点相关的方法miner：包含启动&amp;停止挖矿的一些方法personal：主要包含一些管理账户的方法txpool：包含一些查看交易内存池的方法web3：包含了以上对象，还包含一些单位换算的方法</code></pre><p>按照这中方式可以多创建几个账户，在后面使用</p><h3 id="挖矿"><a href="#挖矿" class="headerlink" title="挖矿"></a>挖矿</h3><p>我们刚开始还没有进行挖矿，所以<code>eth.accounts[0]</code>中的余额为0</p><pre><code>eth.getBalance(eth.accounts[0])</code></pre><p><img src="./167f0138351b2ac0.png" alt></p><blockquote><p>挖矿所得的ETH会默认存在<code>eth.accounts[0]</code>的账户当中</p></blockquote><p>通过<code>miner.start()</code>来启动挖矿，利用<code>miner.stop()</code>停止挖矿</p><p><img src="./167f014193d7c98a.png" alt></p><blockquote><p><code>miner.start()</code>会返回<code>null</code>，推荐使用<code>tail -f eth_output.log</code>查看日志，这样就可以看到挖矿的信息</p></blockquote><p><img src="./167f0147e0208eb4.png" alt><br>现在我们查看账户的余额就不在是0了</p><p><img src="./167f014d7ecf3475.png" alt></p><p>每挖到一个区块会奖励5个以太币，日志中可以看到到目前为止挖到了5个区块，那么就应该是20个以太币，可是查看的余额却不是这样，这是因为这里默认的单位是Wei，有关单位可以去移步<a href="https://zhuanlan.zhihu.com/p/28994731" target="_blank" rel="noopener">以太币(Ether)单位</a></p><p>可以利用下面的命令转换单位</p><p><img src="./167f01539958ff40.png" alt></p><p>这里只做简单的介绍，其余的命令大家有感兴趣的可以自行查找</p><h2 id="合约标准"><a href="#合约标准" class="headerlink" title="合约标准"></a>合约标准</h2><p>ERC20是Fabian Vogelsteller在2015年末提出的以太坊改进建议，它是许多流行的合约都在遵循的标准。 </p><p>ERC20使通证智能合约的行为非常类似于传统的加密货币，例如在不同账户之间发送和接收、查看通证总供应量或者查看某个地址可用的通证余额，就像比特币或以太币一样。这类似于用以太坊钱包 发送和接收以太币、查看流通中的以太币总量、查看特定钱包的货币余额等。</p><p>ERC20规定了一些标准的接口</p><pre><code>contract ERC20Interface {    string public constant name = &quot;Token Name&quot;;    string public constant symbol = &quot;SYM&quot;;    uint8 public constant decimals = 18;  // 18 is the most common number of decimal places    function totalSupply() public constant returns (uint);    function balanceOf(address tokenOwner) public constant returns (uint balance);    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);    function transfer(address to, uint tokens) public returns (bool success);    function approve(address spender, uint tokens) public returns (bool success);    function transferFrom(address from, address to, uint tokens) public returns (bool success);    event Transfer(address indexed from, address indexed to, uint tokens);    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);}</code></pre><p>简单的介绍一下，更加详细的介绍可以在<a href="https://github.com/ethereum/EIPs/issues/20" target="_blank" rel="noopener">github</a>查看</p><pre><code>name ： 代币名称symbol： 代币符号decimals： 代币小数点位数，代币的最小单位totalSupply() : 发行代币总量。balanceOf(): 查看对应账号的代币余额。transfer(): 实现代币交易，用于给用户发送代币（从我们的账户里）transferFrom(): 实现代币用户之间的交易allowance(): 控制代币的交易，如可交易账号及资产approve(): 允许用户可花费的代币数</code></pre><h2 id="在ETH私有链上发布ERC20代币"><a href="#在ETH私有链上发布ERC20代币" class="headerlink" title="在ETH私有链上发布ERC20代币"></a>在ETH私有链上发布ERC20代币</h2><p>ERC20是Fabian Vogelsteller在2015年末提出的以太坊改进建议，它是许多流行的合约都在遵循的标准。 </p><p>ERC20使通证智能合约的行为非常类似于传统的加密货币，例如在不同账户之间发送和接收、查看通证总供应量或者查看某个地址可用的通证余额，就像比特币或以太币一样。这类似于用以太坊钱包 发送和接收以太币、查看流通中的以太币总量、查看特定钱包的货币余额等。</p><p>ERC20规定了一些标准的接口</p><pre><code>contract ERC20Interface {    string public constant name = &quot;Token Name&quot;;    string public constant symbol = &quot;SYM&quot;;    uint8 public constant decimals = 18;  // 18 is the most common number of decimal places    function totalSupply() public constant returns (uint);    function balanceOf(address tokenOwner) public constant returns (uint balance);    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);    function transfer(address to, uint tokens) public returns (bool success);    function approve(address spender, uint tokens) public returns (bool success);    function transferFrom(address from, address to, uint tokens) public returns (bool success);    event Transfer(address indexed from, address indexed to, uint tokens);    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);}</code></pre><p>简单的介绍一下，更加详细的介绍可以在<a href="https://github.com/ethereum/EIPs/issues/20" target="_blank" rel="noopener">github</a>查看</p><pre><code>name ： 代币名称symbol： 代币符号decimals： 代币小数点位数，代币的最小单位totalSupply() : 发行代币总量。balanceOf(): 查看对应账号的代币余额。transfer(): 实现代币交易，用于给用户发送代币（从我们的账户里）transferFrom(): 实现代币用户之间的交易allowance(): 控制代币的交易，如可交易账号及资产approve(): 允许用户可花费的代币数</code></pre><h3 id="编写合约代码"><a href="#编写合约代码" class="headerlink" title="编写合约代码"></a>编写合约代码</h3><p>先编写一个符合ERC20标准的代码</p><pre><code>pragma solidity ^0.4.16;interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }contract TokenERC20 {    string public name;    string public symbol;    uint8 public decimals = 18;  // 18 是建议的默认值    uint256 public totalSupply;    mapping (address =&gt; uint256) public balanceOf;  //     mapping (address =&gt; mapping (address =&gt; uint256)) public allowance;    event Transfer(address indexed from, address indexed to, uint256 value);    event Burn(address indexed from, uint256 value);    function TokenERC20(uint256 initialSupply, string tokenName, string tokenSymbol) public {        totalSupply = initialSupply * 10 ** uint256(decimals);        balanceOf[msg.sender] = totalSupply;        name = tokenName;        symbol = tokenSymbol;    }    function _transfer(address _from, address _to, uint _value) internal {        require(_to != 0x0);        require(balanceOf[_from] &gt;= _value);        require(balanceOf[_to] + _value &gt; balanceOf[_to]);        uint previousBalances = balanceOf[_from] + balanceOf[_to];        balanceOf[_from] -= _value;        balanceOf[_to] += _value;        Transfer(_from, _to, _value);        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);    }    function transfer(address _to, uint256 _value) public {        _transfer(msg.sender, _to, _value);    }    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {        require(_value &lt;= allowance[_from][msg.sender]);     // Check allowance        allowance[_from][msg.sender] -= _value;        _transfer(_from, _to, _value);        return true;    }    function approve(address _spender, uint256 _value) public        returns (bool success) {        allowance[msg.sender][_spender] = _value;        return true;    }    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {        tokenRecipient spender = tokenRecipient(_spender);        if (approve(_spender, _value)) {            spender.receiveApproval(msg.sender, _value, this, _extraData);            return true;        }    }    function burn(uint256 _value) public returns (bool success) {        require(balanceOf[msg.sender] &gt;= _value);        balanceOf[msg.sender] -= _value;        totalSupply -= _value;        Burn(msg.sender, _value);        return true;    }    function burnFrom(address _from, uint256 _value) public returns (bool success) {        require(balanceOf[_from] &gt;= _value);        require(_value &lt;= allowance[_from][msg.sender]);        balanceOf[_from] -= _value;        allowance[_from][msg.sender] -= _value;        totalSupply -= _value;        Burn(_from, _value);        return true;    }}</code></pre><p>然后把这段代码拷贝到<a href="http://remix.ethereum.org/#optimize=false&version=soljson-v0.4.25+commit.59dbf8f1.js" target="_blank" rel="noopener">Solidity</a>，点击旁边的Details获取部署代码</p><p><img src="./167f01705994d26b.png" alt></p><p>然后在弹出层中复制WEB3DEPLOY中的代码到编辑器中</p><p><img src="./167f01767fa2c531.png" alt></p><p>修改代码如图中所示</p><p><img src="./167f017c752a3787.png" alt></p><p>然后将代码复制到geth命令行中，按回车。然后执行<code>miner.start()</code>，如果出现以下信息则表明代币部署成功</p><p><img src="./167f0182236e5734.png" alt></p><blockquote><p>如果出现<code>Error: authentication needed: password or unlock undefined</code>错误，是因为账户没有被解锁，执行<code>personal.unlockAccount(eth.accounts[0])</code>然后输入密码解锁账户</p></blockquote><p>接着我们在命令行中输入<code>tokenerc20</code>则可以看到返回的接口信息</p><p><img src="./167f01899ff07a80.png" alt></p><blockquote><p>address，表示合约地址</p></blockquote><p>可以利用<code>balanceOf</code>函数查看地址的代币余额</p><p><img src="./167f018f235589e1.png" alt></p><p>至此，合约部署完毕</p><p>下一篇文章说说ERC20空投合约的三种实现方式</p>]]></content>
      
      
      <categories>
          
          <category> 区块链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
